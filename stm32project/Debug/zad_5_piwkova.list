
zad_5_piwkova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005c70  08005c70  00006c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006018  08006018  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006018  08006018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006020  08006020  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08006028  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081cc  2**0
                  CONTENTS
 10 .bss          00000204  200001cc  200001cc  000081cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  000081cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006172  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a38  00000000  00000000  0000e36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0000fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005fd  00000000  00000000  000105f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179df  00000000  00000000  00010bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000796e  00000000  00000000  000285d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077855  00000000  00000000  0002ff42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7797  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003204  00000000  00000000  000a77dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000aa9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c58 	.word	0x08005c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08005c58 	.word	0x08005c58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	@ (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ffe3 	bl	8000cbc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cf6:	f7ff ff57 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffa7 	bl	8000c54 <NVIC_EncodePriority>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f7ff ff78 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d10:	2010      	movs	r0, #16
 8000d12:	f7ff ff57 	bl	8000bc4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff97 	bl	8000c54 <NVIC_EncodePriority>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2011      	movs	r0, #17
 8000d2c:	f7ff ff68 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d30:	2011      	movs	r0, #17
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <LL_AHB1_GRP1_EnableClock>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d70:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000d74:	f7ff ffe2 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d78:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000d7c:	f7ff ffde 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <__NVIC_GetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	@ (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	@ 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f0a:	f023 0306 	bic.w	r3, r3, #6
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	60da      	str	r2, [r3, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60da      	str	r2, [r3, #12]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f043 0204 	orr.w	r2, r3, #4
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 0204 	bic.w	r2, r3, #4
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d101      	bne.n	8000f9e <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d101      	bne.n	8000fc4 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	d101      	bne.n	8000fea <LL_I2C_IsActiveFlag_STOP+0x18>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f043 0220 	orr.w	r2, r3, #32
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	61da      	str	r2, [r3, #28]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	605a      	str	r2, [r3, #4]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001052:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800105c:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	4313      	orrs	r3, r2
 8001066:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800106a:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	0d5b      	lsrs	r3, r3, #21
 8001074:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <LL_I2C_HandleTransfer+0x5c>)
 800107a:	430b      	orrs	r3, r1
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	431a      	orrs	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	03ff7bff 	.word	0x03ff7bff

08001098 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	b2db      	uxtb	r3, r3
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_AHB1_GRP1_EnableClock>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	4907      	ldr	r1, [pc, #28]	@ (80010fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4013      	ands	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000

08001100 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <LL_APB1_GRP1_EnableClock+0x2c>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	4907      	ldr	r1, [pc, #28]	@ (800112c <LL_APB1_GRP1_EnableClock+0x2c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001116:	69da      	ldr	r2, [r3, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40021000 	.word	0x40021000

08001130 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	@ 0x38
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800115a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800115e:	f7ff ffb7 	bl	80010d0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001162:	23c0      	movs	r3, #192	@ 0xc0
 8001164:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001166:	2302      	movs	r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001176:	2304      	movs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4821      	ldr	r0, [pc, #132]	@ (8001204 <MX_I2C1_Init+0xd4>)
 8001180:	f001 f998 	bl	80024b4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001184:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001188:	f7ff ffba 	bl	8001100 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800118c:	f7ff fdfa 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8001190:	4603      	mov	r3, r0
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fe4a 	bl	8000e30 <NVIC_EncodePriority>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	201f      	movs	r0, #31
 80011a2:	f7ff fe1b 	bl	8000ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a6:	201f      	movs	r0, #31
 80011a8:	f7ff fdfa 	bl	8000da0 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80011ac:	4816      	ldr	r0, [pc, #88]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011ae:	f7ff ff33 	bl	8001018 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80011b2:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011b4:	f7ff feb7 	bl	8000f26 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011ba:	f7ff fe8c 	bl	8000ed6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80011be:	4812      	ldr	r0, [pc, #72]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011c0:	f7ff fe79 	bl	8000eb6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_I2C1_Init+0xdc>)
 80011ca:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011e8:	f001 fa77 	bl	80026da <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011f2:	f7ff fe80 	bl	8000ef6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80011f6:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_I2C1_Init+0xd8>)
 80011f8:	f7ff fe4d 	bl	8000e96 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3738      	adds	r7, #56	@ 0x38
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	40005400 	.word	0x40005400
 800120c:	2000090e 	.word	0x2000090e

08001210 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t reg_addr, uint8_t slave_addr) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af02      	add	r7, sp, #8
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	460b      	mov	r3, r1
 800121c:	71bb      	strb	r3, [r7, #6]
 800121e:	4613      	mov	r3, r2
 8001220:	717b      	strb	r3, [r7, #5]

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001222:	7979      	ldrb	r1, [r7, #5]
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <i2c_master_write+0x64>)
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2302      	movs	r3, #2
 8001230:	2200      	movs	r2, #0
 8001232:	4811      	ldr	r0, [pc, #68]	@ (8001278 <i2c_master_write+0x68>)
 8001234:	f7ff ff00 	bl	8001038 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, reg_addr);
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	4619      	mov	r1, r3
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <i2c_master_write+0x68>)
 800123e:	f7ff ff38 	bl	80010b2 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 8001242:	e00a      	b.n	800125a <i2c_master_write+0x4a>
		if(LL_I2C_IsActiveFlag_TXIS(I2C1)) {
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <i2c_master_write+0x68>)
 8001246:	f7ff fe9e 	bl	8000f86 <LL_I2C_IsActiveFlag_TXIS>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <i2c_master_write+0x4a>
			LL_I2C_TransmitData8(I2C1, data);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4619      	mov	r1, r3
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <i2c_master_write+0x68>)
 8001256:	f7ff ff2c 	bl	80010b2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 800125a:	4807      	ldr	r0, [pc, #28]	@ (8001278 <i2c_master_write+0x68>)
 800125c:	f7ff feb9 	bl	8000fd2 <LL_I2C_IsActiveFlag_STOP>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0ee      	beq.n	8001244 <i2c_master_write+0x34>
		}
	}

	LL_I2C_ClearFlag_STOP(I2C1);
 8001266:	4804      	ldr	r0, [pc, #16]	@ (8001278 <i2c_master_write+0x68>)
 8001268:	f7ff fec6 	bl	8000ff8 <LL_I2C_ClearFlag_STOP>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	80002000 	.word	0x80002000
 8001278:	40005400 	.word	0x40005400

0800127c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* data, uint8_t length, uint8_t reg_addr, uint8_t slave_addr) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]

	i2c_rx_data = data;
 8001296:	4a2a      	ldr	r2, [pc, #168]	@ (8001340 <i2c_master_read+0xc4>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]

	// enable RX interupt
	LL_I2C_EnableIT_RX(I2C1);
 800129c:	4829      	ldr	r0, [pc, #164]	@ (8001344 <i2c_master_read+0xc8>)
 800129e:	f7ff fe52 	bl	8000f46 <LL_I2C_EnableIT_RX>

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80012a2:	7879      	ldrb	r1, [r7, #1]
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <i2c_master_read+0xcc>)
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	2200      	movs	r2, #0
 80012b2:	4824      	ldr	r0, [pc, #144]	@ (8001344 <i2c_master_read+0xc8>)
 80012b4:	f7ff fec0 	bl	8001038 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 80012b8:	e00a      	b.n	80012d0 <i2c_master_read+0x54>
		// wait until STOP flag is set
		if(LL_I2C_IsActiveFlag_TXIS(I2C1)) {
 80012ba:	4822      	ldr	r0, [pc, #136]	@ (8001344 <i2c_master_read+0xc8>)
 80012bc:	f7ff fe63 	bl	8000f86 <LL_I2C_IsActiveFlag_TXIS>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <i2c_master_read+0x54>
			// TX buffer is ready
			LL_I2C_TransmitData8(I2C1, reg_addr);
 80012c6:	78bb      	ldrb	r3, [r7, #2]
 80012c8:	4619      	mov	r1, r3
 80012ca:	481e      	ldr	r0, [pc, #120]	@ (8001344 <i2c_master_read+0xc8>)
 80012cc:	f7ff fef1 	bl	80010b2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 80012d0:	481c      	ldr	r0, [pc, #112]	@ (8001344 <i2c_master_read+0xc8>)
 80012d2:	f7ff fe7e 	bl	8000fd2 <LL_I2C_IsActiveFlag_STOP>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ee      	beq.n	80012ba <i2c_master_read+0x3e>
		}
	}

	LL_I2C_ClearFlag_STOP(I2C1);
 80012dc:	4819      	ldr	r0, [pc, #100]	@ (8001344 <i2c_master_read+0xc8>)
 80012de:	f7ff fe8b 	bl	8000ff8 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)) {
 80012e2:	bf00      	nop
 80012e4:	4817      	ldr	r0, [pc, #92]	@ (8001344 <i2c_master_read+0xc8>)
 80012e6:	f7ff fe74 	bl	8000fd2 <LL_I2C_IsActiveFlag_STOP>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f9      	bne.n	80012e4 <i2c_master_read+0x68>
		// wait for the previous transfer to end
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80012f0:	7879      	ldrb	r1, [r7, #1]
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	4a15      	ldr	r2, [pc, #84]	@ (800134c <i2c_master_read+0xd0>)
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012fc:	9200      	str	r2, [sp, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	4810      	ldr	r0, [pc, #64]	@ (8001344 <i2c_master_read+0xc8>)
 8001302:	f7ff fe99 	bl	8001038 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 8001306:	bf00      	nop
 8001308:	480e      	ldr	r0, [pc, #56]	@ (8001344 <i2c_master_read+0xc8>)
 800130a:	f7ff fe62 	bl	8000fd2 <LL_I2C_IsActiveFlag_STOP>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f9      	beq.n	8001308 <i2c_master_read+0x8c>
		// wait for the transfer to complete
	}

	// end of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001314:	480b      	ldr	r0, [pc, #44]	@ (8001344 <i2c_master_read+0xc8>)
 8001316:	f7ff fe6f 	bl	8000ff8 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 800131a:	480a      	ldr	r0, [pc, #40]	@ (8001344 <i2c_master_read+0xc8>)
 800131c:	f7ff fe23 	bl	8000f66 <LL_I2C_DisableIT_RX>

	rx_data_index = 0;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <i2c_master_read+0xd4>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]

	I2C1->ICR |= (1 << 4);
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <i2c_master_read+0xc8>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <i2c_master_read+0xc8>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	61d3      	str	r3, [r2, #28]

	return i2c_rx_data;
 8001332:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <i2c_master_read+0xc4>)
 8001334:	681b      	ldr	r3, [r3, #0]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001e8 	.word	0x200001e8
 8001344:	40005400 	.word	0x40005400
 8001348:	80002000 	.word	0x80002000
 800134c:	80002400 	.word	0x80002400
 8001350:	200001ec 	.word	0x200001ec

08001354 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
 8001354:	b598      	push	{r3, r4, r7, lr}
 8001356:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8001358:	4810      	ldr	r0, [pc, #64]	@ (800139c <I2C1_EV_IRQHandler+0x48>)
 800135a:	f7ff fe27 	bl	8000fac <LL_I2C_IsActiveFlag_RXNE>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d019      	beq.n	8001398 <I2C1_EV_IRQHandler+0x44>
		/* Call function Master Reception Callback */
		i2c_rx_data[rx_data_index++] = LL_I2C_ReceiveData8(I2C1);
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <I2C1_EV_IRQHandler+0x4c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <I2C1_EV_IRQHandler+0x50>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	1c59      	adds	r1, r3, #1
 8001370:	b2c8      	uxtb	r0, r1
 8001372:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <I2C1_EV_IRQHandler+0x50>)
 8001374:	7008      	strb	r0, [r1, #0]
 8001376:	18d4      	adds	r4, r2, r3
 8001378:	4808      	ldr	r0, [pc, #32]	@ (800139c <I2C1_EV_IRQHandler+0x48>)
 800137a:	f7ff fe8d 	bl	8001098 <LL_I2C_ReceiveData8>
 800137e:	4603      	mov	r3, r0
 8001380:	7023      	strb	r3, [r4, #0]
		(rx_data_index > 19) ? rx_data_index = 0 : rx_data_index;
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <I2C1_EV_IRQHandler+0x50>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b13      	cmp	r3, #19
 800138a:	d903      	bls.n	8001394 <I2C1_EV_IRQHandler+0x40>
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <I2C1_EV_IRQHandler+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	}
}
 8001392:	e001      	b.n	8001398 <I2C1_EV_IRQHandler+0x44>
		(rx_data_index > 19) ? rx_data_index = 0 : rx_data_index;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <I2C1_EV_IRQHandler+0x50>)
 8001396:	781b      	ldrb	r3, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	bd98      	pop	{r3, r4, r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	200001e8 	.word	0x200001e8
 80013a4:	200001ec 	.word	0x200001ec

080013a8 <__NVIC_SetPriorityGrouping>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <LL_RCC_HSI_Enable+0x1c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <LL_RCC_HSI_Enable+0x1c>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <LL_RCC_HSI_IsReady+0x20>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4904      	ldr	r1, [pc, #16]	@ (8001534 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <LL_RCC_SetSysClkSource+0x24>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 0203 	bic.w	r2, r3, #3
 8001548:	4904      	ldr	r1, [pc, #16]	@ (800155c <LL_RCC_SetSysClkSource+0x24>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <LL_RCC_GetSysClkSource+0x18>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800158c:	4904      	ldr	r1, [pc, #16]	@ (80015a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015b4:	4904      	ldr	r1, [pc, #16]	@ (80015c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000

080015cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015dc:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000

080015f4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <LL_RCC_SetI2CClockSource+0x2c>)
 80015fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0e1b      	lsrs	r3, r3, #24
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800160e:	4904      	ldr	r1, [pc, #16]	@ (8001620 <LL_RCC_SetI2CClockSource+0x2c>)
 8001610:	4313      	orrs	r3, r2
 8001612:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000

08001624 <LL_APB1_GRP1_EnableClock>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <LL_APB1_GRP1_EnableClock+0x2c>)
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <LL_APB1_GRP1_EnableClock+0x2c>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <LL_APB2_GRP1_EnableClock+0x2c>)
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <LL_APB2_GRP1_EnableClock+0x2c>)
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40021000 	.word	0x40021000

08001684 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <LL_FLASH_SetLatency+0x24>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 0207 	bic.w	r2, r3, #7
 8001694:	4904      	ldr	r1, [pc, #16]	@ (80016a8 <LL_FLASH_SetLatency+0x24>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40022000 	.word	0x40022000

080016ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <LL_FLASH_GetLatency+0x18>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff ffc1 	bl	8001654 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80016d2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80016d6:	f7ff ffa5 	bl	8001624 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f7ff fe64 	bl	80013a8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80016e0:	f7ff fe86 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2200      	movs	r2, #0
 80016e8:	210f      	movs	r1, #15
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff feb8 	bl	8001460 <NVIC_EncodePriority>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff fe88 	bl	800140c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f824 	bl	8001748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff fb34 	bl	8000d6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001704:	f7ff faf2 	bl	8000cec <MX_DMA_Init>
  MX_I2C1_Init();
 8001708:	f7ff fd12 	bl	8001130 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800170c:	f000 fcac 	bl	8002068 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */

  //initialize sensors
  HTS221_init();
 8001710:	f001 fb00 	bl	8002d14 <HTS221_init>
  {
    /* USER CODE END WHILE */
	 //a += 1;
    /* USER CODE BEGIN 3 */
	  //get values
	 temperature = hts221_get_temperature();
 8001714:	f001 fb3c 	bl	8002d90 <hts221_get_temperature>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <main+0x78>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
	 humidity = hts221_get_humidity();
 8001722:	f001 fbc1 	bl	8002ea8 <hts221_get_humidity>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <main+0x7c>)
 800172c:	edc3 7a00 	vstr	s15, [r3]
	 //pressure = lps25hb_get_pressure();

	 //send data
	 sendState();
 8001730:	f000 f840 	bl	80017b4 <sendState>
	 LL_mDelay(100);
 8001734:	2064      	movs	r0, #100	@ 0x64
 8001736:	f001 fab7 	bl	8002ca8 <LL_mDelay>
	 temperature = hts221_get_temperature();
 800173a:	bf00      	nop
 800173c:	e7ea      	b.n	8001714 <main+0x4c>
 800173e:	bf00      	nop
 8001740:	200001f0 	.word	0x200001f0
 8001744:	200001f4 	.word	0x200001f4

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff ff99 	bl	8001684 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001752:	bf00      	nop
 8001754:	f7ff ffaa 	bl	80016ac <LL_FLASH_GetLatency>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1fa      	bne.n	8001754 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800175e:	f7ff feb3 	bl	80014c8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001762:	bf00      	nop
 8001764:	f7ff fec0 	bl	80014e8 <LL_RCC_HSI_IsReady>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d1fa      	bne.n	8001764 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff fecc 	bl	800150c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ff01 	bl	800157c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ff12 	bl	80015a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ff23 	bl	80015cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fed6 	bl	8001538 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800178c:	bf00      	nop
 800178e:	f7ff fee7 	bl	8001560 <LL_RCC_GetSysClkSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1fa      	bne.n	800178e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001798:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <SystemClock_Config+0x68>)
 800179a:	f001 fa77 	bl	8002c8c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800179e:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <SystemClock_Config+0x68>)
 80017a0:	f001 faa8 	bl	8002cf4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80017a4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80017a8:	f7ff ff24 	bl	80015f4 <LL_RCC_SetI2CClockSource>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	007a1200 	.word	0x007a1200

080017b4 <sendState>:

/* USER CODE BEGIN 4 */
void sendState() {
 80017b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b8:	b0a2      	sub	sp, #136	@ 0x88
 80017ba:	af08      	add	r7, sp, #32
    // state message
    char message[100];

    snprintf(message, sizeof(message), "%.1f, %.0f, %.2f, %.2f\n",temperature, humidity, pressure, relative_altitude);
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <sendState+0x7c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4604      	mov	r4, r0
 80017c8:	460d      	mov	r5, r1
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <sendState+0x80>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feba 	bl	8000548 <__aeabi_f2d>
 80017d4:	4680      	mov	r8, r0
 80017d6:	4689      	mov	r9, r1
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <sendState+0x84>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe feb3 	bl	8000548 <__aeabi_f2d>
 80017e2:	4682      	mov	sl, r0
 80017e4:	468b      	mov	fp, r1
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <sendState+0x88>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe feac 	bl	8000548 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	1d38      	adds	r0, r7, #4
 80017f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017fa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001802:	e9cd 4500 	strd	r4, r5, [sp]
 8001806:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <sendState+0x8c>)
 8001808:	2164      	movs	r1, #100	@ 0x64
 800180a:	f002 f8e3 	bl	80039d4 <sniprintf>
    USART2_PutBuffer((uint8_t*)message, strlen(message));
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fd2d 	bl	8000270 <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	b2da      	uxtb	r2, r3
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fcfa 	bl	8002218 <USART2_PutBuffer>
}
 8001824:	bf00      	nop
 8001826:	3768      	adds	r7, #104	@ 0x68
 8001828:	46bd      	mov	sp, r7
 800182a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182e:	bf00      	nop
 8001830:	200001f0 	.word	0x200001f0
 8001834:	200001f4 	.word	0x200001f4
 8001838:	200001f8 	.word	0x200001f8
 800183c:	200001fc 	.word	0x200001fc
 8001840:	08005c70 	.word	0x08005c70

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_kill>:

int _kill(int pid, int sig)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018da:	f002 f945 	bl	8003b68 <__errno>
 80018de:	4603      	mov	r3, r0
 80018e0:	2216      	movs	r2, #22
 80018e2:	601a      	str	r2, [r3, #0]
  return -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_exit>:

void _exit (int status)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffe7 	bl	80018d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001902:	bf00      	nop
 8001904:	e7fd      	b.n	8001902 <_exit+0x12>

08001906 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e00a      	b.n	800192e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001918:	f3af 8000 	nop.w
 800191c:	4601      	mov	r1, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	60ba      	str	r2, [r7, #8]
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbf0      	blt.n	8001918 <_read+0x12>
  }

  return len;
 8001936:	687b      	ldr	r3, [r7, #4]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e009      	b.n	8001966 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	60ba      	str	r2, [r7, #8]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	dbf1      	blt.n	8001952 <_write+0x12>
  }
  return len;
 800196e:	687b      	ldr	r3, [r7, #4]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_close>:

int _close(int file)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a0:	605a      	str	r2, [r3, #4]
  return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_isatty>:

int _isatty(int file)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f002 f8aa 	bl	8003b68 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20003000 	.word	0x20003000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000200 	.word	0x20000200
 8001a48:	200003d0 	.word	0x200003d0

08001a4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <LL_DMA_EnableChannel+0x3c>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	4907      	ldr	r1, [pc, #28]	@ (8001aac <LL_DMA_EnableChannel+0x3c>)
 8001a90:	5c8a      	ldrb	r2, [r1, r2]
 8001a92:	4611      	mov	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	440a      	add	r2, r1
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	08005ca0 	.word	0x08005ca0

08001ab0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ad0:	f023 0310 	bic.w	r3, r3, #16
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	4907      	ldr	r1, [pc, #28]	@ (8001af8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001ada:	5c8a      	ldrb	r2, [r1, r2]
 8001adc:	4611      	mov	r1, r2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	440a      	add	r2, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	08005ca0 	.word	0x08005ca0

08001afc <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001b1a:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	08005ca0 	.word	0x08005ca0

08001b2c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <LL_DMA_SetMode+0x44>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	461a      	mov	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 0220 	bic.w	r2, r3, #32
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <LL_DMA_SetMode+0x44>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	4619      	mov	r1, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	440b      	add	r3, r1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	08005ca0 	.word	0x08005ca0

08001b74 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	4907      	ldr	r1, [pc, #28]	@ (8001bb8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	440b      	add	r3, r1
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	08005ca0 	.word	0x08005ca0

08001bbc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <LL_DMA_SetMemoryIncMode+0x44>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <LL_DMA_SetMemoryIncMode+0x44>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	4619      	mov	r1, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	440b      	add	r3, r1
 8001bea:	4619      	mov	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	08005ca0 	.word	0x08005ca0

08001c04 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <LL_DMA_SetPeriphSize+0x44>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	4907      	ldr	r1, [pc, #28]	@ (8001c48 <LL_DMA_SetPeriphSize+0x44>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	440b      	add	r3, r1
 8001c32:	4619      	mov	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	08005ca0 	.word	0x08005ca0

08001c4c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c90 <LL_DMA_SetMemorySize+0x44>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	4907      	ldr	r1, [pc, #28]	@ (8001c90 <LL_DMA_SetMemorySize+0x44>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	4619      	mov	r1, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	440b      	add	r3, r1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	08005ca0 	.word	0x08005ca0

08001c94 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	440b      	add	r3, r1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	08005ca0 	.word	0x08005ca0

08001cdc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <LL_DMA_SetDataLength+0x44>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	3a01      	subs	r2, #1
 8001d00:	4907      	ldr	r1, [pc, #28]	@ (8001d20 <LL_DMA_SetDataLength+0x44>)
 8001d02:	5c8a      	ldrb	r2, [r1, r2]
 8001d04:	4611      	mov	r1, r2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	440a      	add	r2, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	08005ca0 	.word	0x08005ca0

08001d24 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d114      	bne.n	8001d62 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <LL_DMA_ConfigAddresses+0x74>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <LL_DMA_ConfigAddresses+0x74>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8001d60:	e013      	b.n	8001d8a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <LL_DMA_ConfigAddresses+0x74>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <LL_DMA_ConfigAddresses+0x74>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	60d3      	str	r3, [r2, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	08005ca0 	.word	0x08005ca0

08001d9c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <LL_DMA_SetMemoryAddress+0x2c>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	461a      	mov	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	08005ca0 	.word	0x08005ca0

08001dcc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <LL_DMA_SetPeriphAddress+0x2c>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6093      	str	r3, [r2, #8]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	08005ca0 	.word	0x08005ca0

08001dfc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <LL_DMA_EnableIT_TC+0x3c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <LL_DMA_EnableIT_TC+0x3c>)
 8001e1c:	5c8a      	ldrb	r2, [r1, r2]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	440a      	add	r2, r1
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	08005ca0 	.word	0x08005ca0

08001e3c <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <LL_DMA_EnableIT_HT+0x3c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	4907      	ldr	r1, [pc, #28]	@ (8001e78 <LL_DMA_EnableIT_HT+0x3c>)
 8001e5c:	5c8a      	ldrb	r2, [r1, r2]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	440a      	add	r2, r1
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6013      	str	r3, [r2, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	08005ca0 	.word	0x08005ca0

08001e7c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <LL_DMA_EnableIT_TE+0x3c>)
 8001e8c:	5cd3      	ldrb	r3, [r2, r3]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	4907      	ldr	r1, [pc, #28]	@ (8001eb8 <LL_DMA_EnableIT_TE+0x3c>)
 8001e9c:	5c8a      	ldrb	r2, [r1, r2]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6013      	str	r3, [r2, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	08005ca0 	.word	0x08005ca0

08001ebc <LL_AHB1_GRP1_EnableClock>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <LL_APB1_GRP1_EnableClock>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	4907      	ldr	r1, [pc, #28]	@ (8001f18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4013      	ands	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000

08001f1c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3308      	adds	r3, #8
 8001f74:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	e853 3f00 	ldrex	r3, [r3]
 8001f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3308      	adds	r3, #8
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	61ba      	str	r2, [r7, #24]
 8001f8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f90:	6979      	ldr	r1, [r7, #20]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	e841 2300 	strex	r3, r2, [r1]
 8001f98:	613b      	str	r3, [r7, #16]
   return(result);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e7      	bne.n	8001f70 <LL_USART_DisableIT_CTS+0x8>
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	@ 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b089      	sub	sp, #36	@ 0x24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	e853 3f00 	ldrex	r3, [r3]
 8001fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	61ba      	str	r2, [r7, #24]
 8001fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	e841 2300 	strex	r3, r2, [r1]
 8001fde:	613b      	str	r3, [r7, #16]
   return(result);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e7      	bne.n	8001fb6 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	3724      	adds	r7, #36	@ 0x24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	@ 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3308      	adds	r3, #8
 8002000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	e853 3f00 	ldrex	r3, [r3]
 8002008:	60bb      	str	r3, [r7, #8]
   return(result);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	61ba      	str	r2, [r7, #24]
 800201a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201c:	6979      	ldr	r1, [r7, #20]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	e841 2300 	strex	r3, r2, [r1]
 8002024:	613b      	str	r3, [r7, #16]
   return(result);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e7      	bne.n	8001ffc <LL_USART_EnableDMAReq_TX+0x8>
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d103      	bne.n	8002052 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3328      	adds	r3, #40	@ 0x28
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e002      	b.n	8002058 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3324      	adds	r3, #36	@ 0x24
 8002056:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b090      	sub	sp, #64	@ 0x40
 800206c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002092:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002096:	f7ff ff29 	bl	8001eec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800209a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800209e:	f7ff ff0d 	bl	8001ebc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80020a2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80020a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020a8:	2302      	movs	r3, #2
 80020aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020b8:	2307      	movs	r3, #7
 80020ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c4:	f000 f9f6 	bl	80024b4 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2106      	movs	r1, #6
 80020cc:	484f      	ldr	r0, [pc, #316]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80020ce:	f7ff fcef 	bl	8001ab0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80020d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020d6:	2106      	movs	r1, #6
 80020d8:	484c      	ldr	r0, [pc, #304]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80020da:	f7ff fddb 	bl	8001c94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80020de:	2200      	movs	r2, #0
 80020e0:	2106      	movs	r1, #6
 80020e2:	484a      	ldr	r0, [pc, #296]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80020e4:	f7ff fd22 	bl	8001b2c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2106      	movs	r1, #6
 80020ec:	4847      	ldr	r0, [pc, #284]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80020ee:	f7ff fd41 	bl	8001b74 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	2106      	movs	r1, #6
 80020f6:	4845      	ldr	r0, [pc, #276]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80020f8:	f7ff fd60 	bl	8001bbc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2106      	movs	r1, #6
 8002100:	4842      	ldr	r0, [pc, #264]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002102:	f7ff fd7f 	bl	8001c04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002106:	2200      	movs	r2, #0
 8002108:	2106      	movs	r1, #6
 800210a:	4840      	ldr	r0, [pc, #256]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 800210c:	f7ff fd9e 	bl	8001c4c <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002110:	2101      	movs	r1, #1
 8002112:	483f      	ldr	r0, [pc, #252]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 8002114:	f7ff ff91 	bl	800203a <LL_USART_DMA_GetRegAddr>
 8002118:	4604      	mov	r4, r0
 800211a:	4d3e      	ldr	r5, [pc, #248]	@ (8002214 <MX_USART2_UART_Init+0x1ac>)
 800211c:	2106      	movs	r1, #6
 800211e:	483b      	ldr	r0, [pc, #236]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002120:	f7ff fcec 	bl	8001afc <LL_DMA_GetDataTransferDirection>
 8002124:	4603      	mov	r3, r0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	462b      	mov	r3, r5
 800212a:	4622      	mov	r2, r4
 800212c:	2106      	movs	r1, #6
 800212e:	4837      	ldr	r0, [pc, #220]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002130:	f7ff fdf8 	bl	8001d24 <LL_DMA_ConfigAddresses>
      						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
      							(uint32_t)bufferUSART2dma,
      							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	2106      	movs	r1, #6
 8002138:	4834      	ldr	r0, [pc, #208]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 800213a:	f7ff fdcf 	bl	8001cdc <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800213e:	2106      	movs	r1, #6
 8002140:	4832      	ldr	r0, [pc, #200]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002142:	f7ff fc95 	bl	8001a70 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002146:	4832      	ldr	r0, [pc, #200]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 8002148:	f7ff ff31 	bl	8001fae <LL_USART_EnableDMAReq_RX>


  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800214c:	2106      	movs	r1, #6
 800214e:	482f      	ldr	r0, [pc, #188]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002150:	f7ff fe54 	bl	8001dfc <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002154:	2106      	movs	r1, #6
 8002156:	482d      	ldr	r0, [pc, #180]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002158:	f7ff fe70 	bl	8001e3c <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800215c:	2210      	movs	r2, #16
 800215e:	2107      	movs	r1, #7
 8002160:	482a      	ldr	r0, [pc, #168]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002162:	f7ff fca5 	bl	8001ab0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002166:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800216a:	2107      	movs	r1, #7
 800216c:	4827      	ldr	r0, [pc, #156]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 800216e:	f7ff fd91 	bl	8001c94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002172:	2200      	movs	r2, #0
 8002174:	2107      	movs	r1, #7
 8002176:	4825      	ldr	r0, [pc, #148]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002178:	f7ff fcd8 	bl	8001b2c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800217c:	2200      	movs	r2, #0
 800217e:	2107      	movs	r1, #7
 8002180:	4822      	ldr	r0, [pc, #136]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002182:	f7ff fcf7 	bl	8001b74 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	2107      	movs	r1, #7
 800218a:	4820      	ldr	r0, [pc, #128]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 800218c:	f7ff fd16 	bl	8001bbc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002190:	2200      	movs	r2, #0
 8002192:	2107      	movs	r1, #7
 8002194:	481d      	ldr	r0, [pc, #116]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 8002196:	f7ff fd35 	bl	8001c04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800219a:	2200      	movs	r2, #0
 800219c:	2107      	movs	r1, #7
 800219e:	481b      	ldr	r0, [pc, #108]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80021a0:	f7ff fd54 	bl	8001c4c <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80021a4:	2100      	movs	r1, #0
 80021a6:	481a      	ldr	r0, [pc, #104]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 80021a8:	f7ff ff47 	bl	800203a <LL_USART_DMA_GetRegAddr>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	2107      	movs	r1, #7
 80021b2:	4816      	ldr	r0, [pc, #88]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80021b4:	f7ff fe0a 	bl	8001dcc <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80021b8:	4815      	ldr	r0, [pc, #84]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 80021ba:	f7ff ff1b 	bl	8001ff4 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80021be:	2107      	movs	r1, #7
 80021c0:	4812      	ldr	r0, [pc, #72]	@ (800220c <MX_USART2_UART_Init+0x1a4>)
 80021c2:	f7ff fe5b 	bl	8001e7c <LL_DMA_EnableIT_TE>
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80021c6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80021ca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80021d8:	230c      	movs	r3, #12
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4809      	ldr	r0, [pc, #36]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 80021ec:	f000 fcc8 	bl	8002b80 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80021f0:	4807      	ldr	r0, [pc, #28]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 80021f2:	f7ff feb9 	bl	8001f68 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80021f6:	4806      	ldr	r0, [pc, #24]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 80021f8:	f7ff fea0 	bl	8001f3c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80021fc:	4804      	ldr	r0, [pc, #16]	@ (8002210 <MX_USART2_UART_Init+0x1a8>)
 80021fe:	f7ff fe8d 	bl	8001f1c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	3738      	adds	r7, #56	@ 0x38
 8002206:	46bd      	mov	sp, r7
 8002208:	bdb0      	pop	{r4, r5, r7, pc}
 800220a:	bf00      	nop
 800220c:	40020000 	.word	0x40020000
 8002210:	40004400 	.word	0x40004400
 8002214:	20000204 	.word	0x20000204

08002218 <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	2107      	movs	r1, #7
 800222a:	480a      	ldr	r0, [pc, #40]	@ (8002254 <USART2_PutBuffer+0x3c>)
 800222c:	f7ff fdb6 	bl	8001d9c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	461a      	mov	r2, r3
 8002234:	2107      	movs	r1, #7
 8002236:	4807      	ldr	r0, [pc, #28]	@ (8002254 <USART2_PutBuffer+0x3c>)
 8002238:	f7ff fd50 	bl	8001cdc <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 800223c:	2107      	movs	r1, #7
 800223e:	4805      	ldr	r0, [pc, #20]	@ (8002254 <USART2_PutBuffer+0x3c>)
 8002240:	f7ff fddc 	bl	8001dfc <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002244:	2107      	movs	r1, #7
 8002246:	4803      	ldr	r0, [pc, #12]	@ (8002254 <USART2_PutBuffer+0x3c>)
 8002248:	f7ff fc12 	bl	8001a70 <LL_DMA_EnableChannel>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40020000 	.word	0x40020000

08002258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002290 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800225c:	f7ff fbf6 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <LoopForever+0x6>)
  ldr r1, =_edata
 8002262:	490d      	ldr	r1, [pc, #52]	@ (8002298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <LoopForever+0xe>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002278:	4c0a      	ldr	r4, [pc, #40]	@ (80022a4 <LoopForever+0x16>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002286:	f001 fc75 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800228a:	f7ff fa1d 	bl	80016c8 <main>

0800228e <LoopForever>:

LoopForever:
    b LoopForever
 800228e:	e7fe      	b.n	800228e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002290:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800229c:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 80022a0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80022a4:	200003d0 	.word	0x200003d0

080022a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC1_2_IRQHandler>

080022aa <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b089      	sub	sp, #36	@ 0x24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	613b      	str	r3, [r7, #16]
  return result;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2103      	movs	r1, #3
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	401a      	ands	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	61bb      	str	r3, [r7, #24]
  return result;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	3724      	adds	r7, #36	@ 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	43db      	mvns	r3, r3
 800231c:	401a      	ands	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	613b      	str	r3, [r7, #16]
  return result;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2103      	movs	r1, #3
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	61bb      	str	r3, [r7, #24]
  return result;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002396:	b480      	push	{r7}
 8002398:	b089      	sub	sp, #36	@ 0x24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	613b      	str	r3, [r7, #16]
  return result;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2103      	movs	r1, #3
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	61bb      	str	r3, [r7, #24]
  return result;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	60da      	str	r2, [r3, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3724      	adds	r7, #36	@ 0x24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	613b      	str	r3, [r7, #16]
  return result;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	210f      	movs	r1, #15
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	61bb      	str	r3, [r7, #24]
  return result;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002452:	b480      	push	{r7}
 8002454:	b089      	sub	sp, #36	@ 0x24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	613b      	str	r3, [r7, #16]
  return result;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	210f      	movs	r1, #15
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	401a      	ands	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	61bb      	str	r3, [r7, #24]
  return result;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80024a8:	bf00      	nop
 80024aa:	3724      	adds	r7, #36	@ 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	613b      	str	r3, [r7, #16]
  return result;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024d6:	e051      	b.n	800257c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d043      	beq.n	8002576 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d003      	beq.n	80024fe <LL_GPIO_Init+0x4a>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d10e      	bne.n	800251c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	461a      	mov	r2, r3
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ff16 	bl	8002338 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fef6 	bl	8002308 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	461a      	mov	r2, r3
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff36 	bl	8002396 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d11a      	bne.n	8002568 <LL_GPIO_Init+0xb4>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	60bb      	str	r3, [r7, #8]
  return result;
 800253e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b07      	cmp	r3, #7
 8002548:	d807      	bhi.n	800255a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	461a      	mov	r2, r3
 8002550:	69b9      	ldr	r1, [r7, #24]
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ff4e 	bl	80023f4 <LL_GPIO_SetAFPin_0_7>
 8002558:	e006      	b.n	8002568 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	461a      	mov	r2, r3
 8002560:	69b9      	ldr	r1, [r7, #24]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff75 	bl	8002452 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	461a      	mov	r2, r3
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fe9a 	bl	80022aa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3301      	adds	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1a6      	bne.n	80024d8 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <LL_I2C_Enable>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_I2C_Disable>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 0201 	bic.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_I2C_ConfigFilters>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0219      	lsls	r1, r3, #8
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_I2C_SetOwnAddress1>:
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002616:	f023 0307 	bic.w	r3, r3, #7
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	430a      	orrs	r2, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	609a      	str	r2, [r3, #8]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_I2C_EnableOwnAddress1>:
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	609a      	str	r2, [r3, #8]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_I2C_DisableOwnAddress1>:
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_I2C_SetTiming>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	611a      	str	r2, [r3, #16]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_I2C_SetMode>:
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_I2C_AcknowledgeNextData>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	605a      	str	r2, [r3, #4]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff65 	bl	80025b4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	461a      	mov	r2, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff6d 	bl	80025d4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffb6 	bl	8002672 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff44 	bl	8002594 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ffa0 	bl	8002652 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	461a      	mov	r2, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff70 	bl	8002602 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff81 	bl	8002632 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa9 	bl	800268e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffb6 	bl	80026b4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <LL_RCC_HSI_IsReady>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <LL_RCC_HSI_IsReady+0x20>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b02      	cmp	r3, #2
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000

08002778 <LL_RCC_LSE_IsReady>:
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <LL_RCC_LSE_IsReady+0x20>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000

0800279c <LL_RCC_GetSysClkSource>:
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <LL_RCC_GetSysClkSource+0x18>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000

080027b8 <LL_RCC_GetAHBPrescaler>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <LL_RCC_GetAHBPrescaler+0x18>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <LL_RCC_GetAPB1Prescaler>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <LL_RCC_GetAPB1Prescaler+0x18>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <LL_RCC_GetAPB2Prescaler>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <LL_RCC_GetAPB2Prescaler+0x18>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <LL_RCC_GetUSARTClockSource+0x28>)
 8002816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002818:	2103      	movs	r1, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	4313      	orrs	r3, r2
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000

08002838 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <LL_RCC_PLL_GetMainSource+0x18>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000

08002854 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <LL_RCC_PLL_GetPrediv+0x18>)
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	f003 030f 	and.w	r3, r3, #15
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002894:	f000 f862 	bl	800295c <RCC_GetSystemClockFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f880 	bl	80029a8 <RCC_GetHCLKClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f88e 	bl	80029d4 <RCC_GetPCLK1ClockFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f89a 	bl	80029fc <RCC_GetPCLK2ClockFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60da      	str	r2, [r3, #12]
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d130      	bne.n	800294c <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff8e 	bl	800280c <LL_RCC_GetUSARTClockSource>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d00a      	beq.n	800290c <LL_RCC_GetUSARTClockFreq+0x34>
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d819      	bhi.n	800292e <LL_RCC_GetUSARTClockFreq+0x56>
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d002      	beq.n	8002904 <LL_RCC_GetUSARTClockFreq+0x2c>
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d00c      	beq.n	800291c <LL_RCC_GetUSARTClockFreq+0x44>
 8002902:	e014      	b.n	800292e <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002904:	f000 f82a 	bl	800295c <RCC_GetSystemClockFreq>
 8002908:	60f8      	str	r0, [r7, #12]
        break;
 800290a:	e01f      	b.n	800294c <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800290c:	f7ff ff22 	bl	8002754 <LL_RCC_HSI_IsReady>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <LL_RCC_GetUSARTClockFreq+0x80>)
 8002918:	60fb      	str	r3, [r7, #12]
        }
        break;
 800291a:	e014      	b.n	8002946 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800291c:	f7ff ff2c 	bl	8002778 <LL_RCC_LSE_IsReady>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800292a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800292c:	e00d      	b.n	800294a <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800292e:	f000 f815 	bl	800295c <RCC_GetSystemClockFreq>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f837 	bl	80029a8 <RCC_GetHCLKClockFreq>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f849 	bl	80029d4 <RCC_GetPCLK1ClockFreq>
 8002942:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002944:	e002      	b.n	800294c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800294a:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	007a1200 	.word	0x007a1200

0800295c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002966:	f7ff ff19 	bl	800279c <LL_RCC_GetSysClkSource>
 800296a:	4603      	mov	r3, r0
 800296c:	2b08      	cmp	r3, #8
 800296e:	d00c      	beq.n	800298a <RCC_GetSystemClockFreq+0x2e>
 8002970:	2b08      	cmp	r3, #8
 8002972:	d80e      	bhi.n	8002992 <RCC_GetSystemClockFreq+0x36>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <RCC_GetSystemClockFreq+0x22>
 8002978:	2b04      	cmp	r3, #4
 800297a:	d003      	beq.n	8002984 <RCC_GetSystemClockFreq+0x28>
 800297c:	e009      	b.n	8002992 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <RCC_GetSystemClockFreq+0x48>)
 8002980:	607b      	str	r3, [r7, #4]
      break;
 8002982:	e009      	b.n	8002998 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002984:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <RCC_GetSystemClockFreq+0x48>)
 8002986:	607b      	str	r3, [r7, #4]
      break;
 8002988:	e006      	b.n	8002998 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800298a:	f000 f84b 	bl	8002a24 <RCC_PLL_GetFreqDomain_SYS>
 800298e:	6078      	str	r0, [r7, #4]
      break;
 8002990:	e002      	b.n	8002998 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <RCC_GetSystemClockFreq+0x48>)
 8002994:	607b      	str	r3, [r7, #4]
      break;
 8002996:	bf00      	nop
  }

  return frequency;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	007a1200 	.word	0x007a1200

080029a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80029b0:	f7ff ff02 	bl	80027b8 <LL_RCC_GetAHBPrescaler>
 80029b4:	4603      	mov	r3, r0
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <RCC_GetHCLKClockFreq+0x28>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	40d3      	lsrs	r3, r2
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08005c88 	.word	0x08005c88

080029d4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029dc:	f7ff fefa 	bl	80027d4 <LL_RCC_GetAPB1Prescaler>
 80029e0:	4603      	mov	r3, r0
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <RCC_GetPCLK1ClockFreq+0x24>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	40d3      	lsrs	r3, r2
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	08005c98 	.word	0x08005c98

080029fc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002a04:	f7ff fef4 	bl	80027f0 <LL_RCC_GetAPB2Prescaler>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	0adb      	lsrs	r3, r3, #11
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <RCC_GetPCLK2ClockFreq+0x24>)
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	40d3      	lsrs	r3, r2
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	08005c98 	.word	0x08005c98

08002a24 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a32:	f7ff ff01 	bl	8002838 <LL_RCC_PLL_GetMainSource>
 8002a36:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a44:	d003      	beq.n	8002a4e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002a46:	e005      	b.n	8002a54 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a4a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a4c:	e005      	b.n	8002a5a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002a50:	60fb      	str	r3, [r7, #12]
      break;
 8002a52:	e002      	b.n	8002a5a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a56:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a58:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002a5a:	f7ff ff09 	bl	8002870 <LL_RCC_PLL_GetPrediv>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	3301      	adds	r3, #1
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	fbb2 f4f3 	udiv	r4, r2, r3
 8002a68:	f7ff fef4 	bl	8002854 <LL_RCC_PLL_GetMultiplicator>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a72:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002a76:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	603a      	str	r2, [r7, #0]
  return result;
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	40d3      	lsrs	r3, r2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd90      	pop	{r4, r7, pc}
 8002a98:	003d0900 	.word	0x003d0900
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <LL_USART_IsEnabled>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <LL_USART_IsEnabled+0x18>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <LL_USART_IsEnabled+0x1a>
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_USART_SetStopBitsLength>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	605a      	str	r2, [r3, #4]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_USART_SetHWFlowCtrl>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_USART_SetBaudRate>:
{
 8002b12:	b480      	push	{r7}
 8002b14:	b087      	sub	sp, #28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b26:	d11a      	bne.n	8002b5e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	005a      	lsls	r2, r3, #1
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	441a      	add	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	60da      	str	r2, [r3, #12]
}
 8002b5c:	e00a      	b.n	8002b74 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	085a      	lsrs	r2, r3, #1
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	441a      	add	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff84 	bl	8002aa0 <LL_USART_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d14e      	bne.n	8002c3c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <LL_USART_Init+0xc8>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	6851      	ldr	r1, [r2, #4]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	4311      	orrs	r1, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	6912      	ldr	r2, [r2, #16]
 8002bb4:	4311      	orrs	r1, r2
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	6992      	ldr	r2, [r2, #24]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff7c 	bl	8002ac6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff89 	bl	8002aec <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c4c <LL_USART_Init+0xcc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d104      	bne.n	8002bec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fe78 	bl	80028d8 <LL_RCC_GetUSARTClockFreq>
 8002be8:	61b8      	str	r0, [r7, #24]
 8002bea:	e016      	b.n	8002c1a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <LL_USART_Init+0xd0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d107      	bne.n	8002c04 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bf4:	f107 0308 	add.w	r3, r7, #8
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fe47 	bl	800288c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	e00a      	b.n	8002c1a <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a13      	ldr	r2, [pc, #76]	@ (8002c54 <LL_USART_Init+0xd4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fe3b 	bl	800288c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002c34:	69b9      	ldr	r1, [r7, #24]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff6b 	bl	8002b12 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	efff69f3 	.word	0xefff69f3
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40004400 	.word	0x40004400
 8002c54:	40004800 	.word	0x40004800

08002c58 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <LL_InitTick+0x30>)
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <LL_InitTick+0x30>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <LL_InitTick+0x30>)
 8002c78:	2205      	movs	r2, #5
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ffdd 	bl	8002c58 <LL_InitTick>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <LL_mDelay+0x48>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002cb6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d00c      	beq.n	8002cda <LL_mDelay+0x32>
  {
    Delay++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002cc6:	e008      	b.n	8002cda <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002cc8:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <LL_mDelay+0x48>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <LL_mDelay+0x32>
    {
      Delay--;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f3      	bne.n	8002cc8 <LL_mDelay+0x20>
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e010 	.word	0xe000e010

08002cf4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cfc:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <LL_SetSystemCoreClock+0x1c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000000 	.word	0x20000000

08002d14 <HTS221_init>:
 *      Author: Piwkova
 */
#include "hts221.h"

//initialisation of sensor
uint8_t HTS221_init() {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I);
 8002d1a:	200f      	movs	r0, #15
 8002d1c:	f000 f825 	bl	8002d6a <hts221_read_byte>
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]

	if(val == HTS221_WHO_AM_I_VALUE) {
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	2bbc      	cmp	r3, #188	@ 0xbc
 8002d28:	d108      	bne.n	8002d3c <HTS221_init+0x28>
		//control register setup
		uint8_t ctrl_reg1 = 0b10000011;
 8002d2a:	2383      	movs	r3, #131	@ 0x83
 8002d2c:	71bb      	strb	r3, [r7, #6]
		hts221_write_byte(HTS221_CTRL_REG1, ctrl_reg1);
 8002d2e:	79bb      	ldrb	r3, [r7, #6]
 8002d30:	4619      	mov	r1, r3
 8002d32:	2020      	movs	r0, #32
 8002d34:	f000 f807 	bl	8002d46 <hts221_write_byte>

		return 1;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HTS221_init+0x2a>
	}
	return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	460a      	mov	r2, r1
 8002d50:	71fb      	strb	r3, [r7, #7]
 8002d52:	4613      	mov	r3, r2
 8002d54:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_I2C_ADDRESS);
 8002d56:	79f9      	ldrb	r1, [r7, #7]
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	22be      	movs	r2, #190	@ 0xbe
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fa57 	bl	8001210 <i2c_master_write>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
	i2c_master_read(&val, 1, reg_addr, HTS221_I2C_ADDRESS);
 8002d78:	79fa      	ldrb	r2, [r7, #7]
 8002d7a:	f107 000f 	add.w	r0, r7, #15
 8002d7e:	23be      	movs	r3, #190	@ 0xbe
 8002d80:	2101      	movs	r1, #1
 8002d82:	f7fe fa7b 	bl	800127c <i2c_master_read>
	return val;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <hts221_get_temperature>:

float hts221_get_temperature() {
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0

	float temp;

	uint8_t msb = hts221_read_byte(MSB);
 8002d96:	2035      	movs	r0, #53	@ 0x35
 8002d98:	f7ff ffe7 	bl	8002d6a <hts221_read_byte>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	75fb      	strb	r3, [r7, #23]

	uint8_t t0_x8 = hts221_read_byte(T0_degC_x8);
 8002da0:	2032      	movs	r0, #50	@ 0x32
 8002da2:	f7ff ffe2 	bl	8002d6a <hts221_read_byte>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75bb      	strb	r3, [r7, #22]
	uint16_t t0_out = (hts221_read_byte(T0_OUT_1) << 8) | hts221_read_byte(T0_OUT_2);
 8002daa:	203c      	movs	r0, #60	@ 0x3c
 8002dac:	f7ff ffdd 	bl	8002d6a <hts221_read_byte>
 8002db0:	4603      	mov	r3, r0
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	b21c      	sxth	r4, r3
 8002db6:	203d      	movs	r0, #61	@ 0x3d
 8002db8:	f7ff ffd7 	bl	8002d6a <hts221_read_byte>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4323      	orrs	r3, r4
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	82bb      	strh	r3, [r7, #20]

	uint8_t t1_x8 = hts221_read_byte(T1_degC_x8);
 8002dc6:	2033      	movs	r0, #51	@ 0x33
 8002dc8:	f7ff ffcf 	bl	8002d6a <hts221_read_byte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]
    uint16_t t1_out = (hts221_read_byte(T1_OUT_1) << 8) | hts221_read_byte(T1_OUT_2);
 8002dd0:	203e      	movs	r0, #62	@ 0x3e
 8002dd2:	f7ff ffca 	bl	8002d6a <hts221_read_byte>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	b21c      	sxth	r4, r3
 8002ddc:	203f      	movs	r0, #63	@ 0x3f
 8002dde:	f7ff ffc4 	bl	8002d6a <hts221_read_byte>
 8002de2:	4603      	mov	r3, r0
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	4323      	orrs	r3, r4
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	823b      	strh	r3, [r7, #16]

    uint16_t t_out = (hts221_read_byte(HTS221_TEMP_OUT_L) << 8) | hts221_read_byte(HTS221_TEMP_OUT_H);
 8002dec:	202a      	movs	r0, #42	@ 0x2a
 8002dee:	f7ff ffbc 	bl	8002d6a <hts221_read_byte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	b21c      	sxth	r4, r3
 8002df8:	202b      	movs	r0, #43	@ 0x2b
 8002dfa:	f7ff ffb6 	bl	8002d6a <hts221_read_byte>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	4323      	orrs	r3, r4
 8002e04:	b21b      	sxth	r3, r3
 8002e06:	81fb      	strh	r3, [r7, #14]

    float T0_degC = (float) (t0_x8+(1 << 6)*(msb & 0x03))/8.0;
 8002e08:	7dba      	ldrb	r2, [r7, #22]
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	019b      	lsls	r3, r3, #6
 8002e12:	4413      	add	r3, r2
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e24:	edc7 7a02 	vstr	s15, [r7, #8]
    float T1_degC = (float) (t1_x8+(1 << 6)*(msb & 0x0C))/8.0;
 8002e28:	7cfa      	ldrb	r2, [r7, #19]
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	4413      	add	r3, r2
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e44:	edc7 7a01 	vstr	s15, [r7, #4]

    //calculate temperature
    temp = (T1_degC + (((float)t_out-(float)t1_out) * (T1_degC - T0_degC)/((float)t1_out-(float)t0_out)));
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e52:	8a3b      	ldrh	r3, [r7, #16]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e60:	edd7 6a01 	vldr	s13, [r7, #4]
 8002e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e6c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e70:	8a3b      	ldrh	r3, [r7, #16]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e7a:	8abb      	ldrh	r3, [r7, #20]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e94:	edc7 7a00 	vstr	s15, [r7]

	return temp;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	ee07 3a90 	vmov	s15, r3
}
 8002e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <hts221_get_humidity>:


float hts221_get_humidity() {
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0

	float hum;

    uint8_t h0_x2 = hts221_read_byte(H0_rH_x2);
 8002eae:	2032      	movs	r0, #50	@ 0x32
 8002eb0:	f7ff ff5b 	bl	8002d6a <hts221_read_byte>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	75fb      	strb	r3, [r7, #23]
    uint16_t h0_t0_out = (hts221_read_byte(H0_OUT_1) << 8) | hts221_read_byte(H0_OUT_2);
 8002eb8:	2036      	movs	r0, #54	@ 0x36
 8002eba:	f7ff ff56 	bl	8002d6a <hts221_read_byte>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	b21c      	sxth	r4, r3
 8002ec4:	2037      	movs	r0, #55	@ 0x37
 8002ec6:	f7ff ff50 	bl	8002d6a <hts221_read_byte>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	82bb      	strh	r3, [r7, #20]

    uint8_t h1_x2 = hts221_read_byte(H1_rH_x2);
 8002ed4:	2033      	movs	r0, #51	@ 0x33
 8002ed6:	f7ff ff48 	bl	8002d6a <hts221_read_byte>
 8002eda:	4603      	mov	r3, r0
 8002edc:	74fb      	strb	r3, [r7, #19]
    uint16_t h1_t0_out = (hts221_read_byte(H1_OUT_1) << 8) | hts221_read_byte(H1_OUT_2);
 8002ede:	203a      	movs	r0, #58	@ 0x3a
 8002ee0:	f7ff ff43 	bl	8002d6a <hts221_read_byte>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	b21c      	sxth	r4, r3
 8002eea:	203b      	movs	r0, #59	@ 0x3b
 8002eec:	f7ff ff3d 	bl	8002d6a <hts221_read_byte>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	4323      	orrs	r3, r4
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	823b      	strh	r3, [r7, #16]

    uint16_t h_out = (hts221_read_byte(HTS221_HUM_OUT_L) << 8) | hts221_read_byte(HTS221_HUM_OUT_H);
 8002efa:	2028      	movs	r0, #40	@ 0x28
 8002efc:	f7ff ff35 	bl	8002d6a <hts221_read_byte>
 8002f00:	4603      	mov	r3, r0
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	b21c      	sxth	r4, r3
 8002f06:	2029      	movs	r0, #41	@ 0x29
 8002f08:	f7ff ff2f 	bl	8002d6a <hts221_read_byte>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4323      	orrs	r3, r4
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	81fb      	strh	r3, [r7, #14]

    float h0_rh = (float) h0_x2/2.0;
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f28:	edc7 7a02 	vstr	s15, [r7, #8]
    float h1_rh = (float) h1_x2/2.0;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f36:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f3e:	edc7 7a01 	vstr	s15, [r7, #4]

    //calculate humidity
    hum = (h0_rh + ((h1_rh-h0_rh) * ((float)h_out - (float)h0_t0_out)/((float)h1_t0_out-(float)h0_t0_out)));
 8002f42:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f58:	8abb      	ldrh	r3, [r7, #20]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f66:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f6a:	8a3b      	ldrh	r3, [r7, #16]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f74:	8abb      	ldrh	r3, [r7, #20]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f86:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8e:	edc7 7a00 	vstr	s15, [r7]

    return hum;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	ee07 3a90 	vmov	s15, r3
}
 8002f98:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}

08002fa2 <__cvt>:
 8002fa2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa6:	ec57 6b10 	vmov	r6, r7, d0
 8002faa:	2f00      	cmp	r7, #0
 8002fac:	460c      	mov	r4, r1
 8002fae:	4619      	mov	r1, r3
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	bfbb      	ittet	lt
 8002fb4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002fb8:	461f      	movlt	r7, r3
 8002fba:	2300      	movge	r3, #0
 8002fbc:	232d      	movlt	r3, #45	@ 0x2d
 8002fbe:	700b      	strb	r3, [r1, #0]
 8002fc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fc2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002fc6:	4691      	mov	r9, r2
 8002fc8:	f023 0820 	bic.w	r8, r3, #32
 8002fcc:	bfbc      	itt	lt
 8002fce:	4632      	movlt	r2, r6
 8002fd0:	4616      	movlt	r6, r2
 8002fd2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002fd6:	d005      	beq.n	8002fe4 <__cvt+0x42>
 8002fd8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002fdc:	d100      	bne.n	8002fe0 <__cvt+0x3e>
 8002fde:	3401      	adds	r4, #1
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	e000      	b.n	8002fe6 <__cvt+0x44>
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	ab03      	add	r3, sp, #12
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	ab02      	add	r3, sp, #8
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	ec47 6b10 	vmov	d0, r6, r7
 8002ff2:	4653      	mov	r3, sl
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	f000 fe6f 	bl	8003cd8 <_dtoa_r>
 8002ffa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ffe:	4605      	mov	r5, r0
 8003000:	d119      	bne.n	8003036 <__cvt+0x94>
 8003002:	f019 0f01 	tst.w	r9, #1
 8003006:	d00e      	beq.n	8003026 <__cvt+0x84>
 8003008:	eb00 0904 	add.w	r9, r0, r4
 800300c:	2200      	movs	r2, #0
 800300e:	2300      	movs	r3, #0
 8003010:	4630      	mov	r0, r6
 8003012:	4639      	mov	r1, r7
 8003014:	f7fd fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8003018:	b108      	cbz	r0, 800301e <__cvt+0x7c>
 800301a:	f8cd 900c 	str.w	r9, [sp, #12]
 800301e:	2230      	movs	r2, #48	@ 0x30
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	454b      	cmp	r3, r9
 8003024:	d31e      	bcc.n	8003064 <__cvt+0xc2>
 8003026:	9b03      	ldr	r3, [sp, #12]
 8003028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800302a:	1b5b      	subs	r3, r3, r5
 800302c:	4628      	mov	r0, r5
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	b004      	add	sp, #16
 8003032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003036:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800303a:	eb00 0904 	add.w	r9, r0, r4
 800303e:	d1e5      	bne.n	800300c <__cvt+0x6a>
 8003040:	7803      	ldrb	r3, [r0, #0]
 8003042:	2b30      	cmp	r3, #48	@ 0x30
 8003044:	d10a      	bne.n	800305c <__cvt+0xba>
 8003046:	2200      	movs	r2, #0
 8003048:	2300      	movs	r3, #0
 800304a:	4630      	mov	r0, r6
 800304c:	4639      	mov	r1, r7
 800304e:	f7fd fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003052:	b918      	cbnz	r0, 800305c <__cvt+0xba>
 8003054:	f1c4 0401 	rsb	r4, r4, #1
 8003058:	f8ca 4000 	str.w	r4, [sl]
 800305c:	f8da 3000 	ldr.w	r3, [sl]
 8003060:	4499      	add	r9, r3
 8003062:	e7d3      	b.n	800300c <__cvt+0x6a>
 8003064:	1c59      	adds	r1, r3, #1
 8003066:	9103      	str	r1, [sp, #12]
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e7d9      	b.n	8003020 <__cvt+0x7e>

0800306c <__exponent>:
 800306c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800306e:	2900      	cmp	r1, #0
 8003070:	bfba      	itte	lt
 8003072:	4249      	neglt	r1, r1
 8003074:	232d      	movlt	r3, #45	@ 0x2d
 8003076:	232b      	movge	r3, #43	@ 0x2b
 8003078:	2909      	cmp	r1, #9
 800307a:	7002      	strb	r2, [r0, #0]
 800307c:	7043      	strb	r3, [r0, #1]
 800307e:	dd29      	ble.n	80030d4 <__exponent+0x68>
 8003080:	f10d 0307 	add.w	r3, sp, #7
 8003084:	461d      	mov	r5, r3
 8003086:	270a      	movs	r7, #10
 8003088:	461a      	mov	r2, r3
 800308a:	fbb1 f6f7 	udiv	r6, r1, r7
 800308e:	fb07 1416 	mls	r4, r7, r6, r1
 8003092:	3430      	adds	r4, #48	@ 0x30
 8003094:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003098:	460c      	mov	r4, r1
 800309a:	2c63      	cmp	r4, #99	@ 0x63
 800309c:	f103 33ff 	add.w	r3, r3, #4294967295
 80030a0:	4631      	mov	r1, r6
 80030a2:	dcf1      	bgt.n	8003088 <__exponent+0x1c>
 80030a4:	3130      	adds	r1, #48	@ 0x30
 80030a6:	1e94      	subs	r4, r2, #2
 80030a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030ac:	1c41      	adds	r1, r0, #1
 80030ae:	4623      	mov	r3, r4
 80030b0:	42ab      	cmp	r3, r5
 80030b2:	d30a      	bcc.n	80030ca <__exponent+0x5e>
 80030b4:	f10d 0309 	add.w	r3, sp, #9
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	42ac      	cmp	r4, r5
 80030bc:	bf88      	it	hi
 80030be:	2300      	movhi	r3, #0
 80030c0:	3302      	adds	r3, #2
 80030c2:	4403      	add	r3, r0
 80030c4:	1a18      	subs	r0, r3, r0
 80030c6:	b003      	add	sp, #12
 80030c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80030ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80030d2:	e7ed      	b.n	80030b0 <__exponent+0x44>
 80030d4:	2330      	movs	r3, #48	@ 0x30
 80030d6:	3130      	adds	r1, #48	@ 0x30
 80030d8:	7083      	strb	r3, [r0, #2]
 80030da:	70c1      	strb	r1, [r0, #3]
 80030dc:	1d03      	adds	r3, r0, #4
 80030de:	e7f1      	b.n	80030c4 <__exponent+0x58>

080030e0 <_printf_float>:
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	b08d      	sub	sp, #52	@ 0x34
 80030e6:	460c      	mov	r4, r1
 80030e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80030ec:	4616      	mov	r6, r2
 80030ee:	461f      	mov	r7, r3
 80030f0:	4605      	mov	r5, r0
 80030f2:	f000 fcef 	bl	8003ad4 <_localeconv_r>
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	9304      	str	r3, [sp, #16]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd f8b8 	bl	8000270 <strlen>
 8003100:	2300      	movs	r3, #0
 8003102:	930a      	str	r3, [sp, #40]	@ 0x28
 8003104:	f8d8 3000 	ldr.w	r3, [r8]
 8003108:	9005      	str	r0, [sp, #20]
 800310a:	3307      	adds	r3, #7
 800310c:	f023 0307 	bic.w	r3, r3, #7
 8003110:	f103 0208 	add.w	r2, r3, #8
 8003114:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003118:	f8d4 b000 	ldr.w	fp, [r4]
 800311c:	f8c8 2000 	str.w	r2, [r8]
 8003120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003124:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003128:	9307      	str	r3, [sp, #28]
 800312a:	f8cd 8018 	str.w	r8, [sp, #24]
 800312e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003136:	4b9c      	ldr	r3, [pc, #624]	@ (80033a8 <_printf_float+0x2c8>)
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	f7fd fcf6 	bl	8000b2c <__aeabi_dcmpun>
 8003140:	bb70      	cbnz	r0, 80031a0 <_printf_float+0xc0>
 8003142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003146:	4b98      	ldr	r3, [pc, #608]	@ (80033a8 <_printf_float+0x2c8>)
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	f7fd fcd0 	bl	8000af0 <__aeabi_dcmple>
 8003150:	bb30      	cbnz	r0, 80031a0 <_printf_float+0xc0>
 8003152:	2200      	movs	r2, #0
 8003154:	2300      	movs	r3, #0
 8003156:	4640      	mov	r0, r8
 8003158:	4649      	mov	r1, r9
 800315a:	f7fd fcbf 	bl	8000adc <__aeabi_dcmplt>
 800315e:	b110      	cbz	r0, 8003166 <_printf_float+0x86>
 8003160:	232d      	movs	r3, #45	@ 0x2d
 8003162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003166:	4a91      	ldr	r2, [pc, #580]	@ (80033ac <_printf_float+0x2cc>)
 8003168:	4b91      	ldr	r3, [pc, #580]	@ (80033b0 <_printf_float+0x2d0>)
 800316a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800316e:	bf94      	ite	ls
 8003170:	4690      	movls	r8, r2
 8003172:	4698      	movhi	r8, r3
 8003174:	2303      	movs	r3, #3
 8003176:	6123      	str	r3, [r4, #16]
 8003178:	f02b 0304 	bic.w	r3, fp, #4
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	f04f 0900 	mov.w	r9, #0
 8003182:	9700      	str	r7, [sp, #0]
 8003184:	4633      	mov	r3, r6
 8003186:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003188:	4621      	mov	r1, r4
 800318a:	4628      	mov	r0, r5
 800318c:	f000 f9d2 	bl	8003534 <_printf_common>
 8003190:	3001      	adds	r0, #1
 8003192:	f040 808d 	bne.w	80032b0 <_printf_float+0x1d0>
 8003196:	f04f 30ff 	mov.w	r0, #4294967295
 800319a:	b00d      	add	sp, #52	@ 0x34
 800319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	4640      	mov	r0, r8
 80031a6:	4649      	mov	r1, r9
 80031a8:	f7fd fcc0 	bl	8000b2c <__aeabi_dcmpun>
 80031ac:	b140      	cbz	r0, 80031c0 <_printf_float+0xe0>
 80031ae:	464b      	mov	r3, r9
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bfbc      	itt	lt
 80031b4:	232d      	movlt	r3, #45	@ 0x2d
 80031b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80031ba:	4a7e      	ldr	r2, [pc, #504]	@ (80033b4 <_printf_float+0x2d4>)
 80031bc:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <_printf_float+0x2d8>)
 80031be:	e7d4      	b.n	800316a <_printf_float+0x8a>
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80031c6:	9206      	str	r2, [sp, #24]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	d13b      	bne.n	8003244 <_printf_float+0x164>
 80031cc:	2306      	movs	r3, #6
 80031ce:	6063      	str	r3, [r4, #4]
 80031d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80031d4:	2300      	movs	r3, #0
 80031d6:	6022      	str	r2, [r4, #0]
 80031d8:	9303      	str	r3, [sp, #12]
 80031da:	ab0a      	add	r3, sp, #40	@ 0x28
 80031dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80031e0:	ab09      	add	r3, sp, #36	@ 0x24
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	6861      	ldr	r1, [r4, #4]
 80031e6:	ec49 8b10 	vmov	d0, r8, r9
 80031ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff fed7 	bl	8002fa2 <__cvt>
 80031f4:	9b06      	ldr	r3, [sp, #24]
 80031f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80031f8:	2b47      	cmp	r3, #71	@ 0x47
 80031fa:	4680      	mov	r8, r0
 80031fc:	d129      	bne.n	8003252 <_printf_float+0x172>
 80031fe:	1cc8      	adds	r0, r1, #3
 8003200:	db02      	blt.n	8003208 <_printf_float+0x128>
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	4299      	cmp	r1, r3
 8003206:	dd41      	ble.n	800328c <_printf_float+0x1ac>
 8003208:	f1aa 0a02 	sub.w	sl, sl, #2
 800320c:	fa5f fa8a 	uxtb.w	sl, sl
 8003210:	3901      	subs	r1, #1
 8003212:	4652      	mov	r2, sl
 8003214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003218:	9109      	str	r1, [sp, #36]	@ 0x24
 800321a:	f7ff ff27 	bl	800306c <__exponent>
 800321e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003220:	1813      	adds	r3, r2, r0
 8003222:	2a01      	cmp	r2, #1
 8003224:	4681      	mov	r9, r0
 8003226:	6123      	str	r3, [r4, #16]
 8003228:	dc02      	bgt.n	8003230 <_printf_float+0x150>
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	07d2      	lsls	r2, r2, #31
 800322e:	d501      	bpl.n	8003234 <_printf_float+0x154>
 8003230:	3301      	adds	r3, #1
 8003232:	6123      	str	r3, [r4, #16]
 8003234:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0a2      	beq.n	8003182 <_printf_float+0xa2>
 800323c:	232d      	movs	r3, #45	@ 0x2d
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003242:	e79e      	b.n	8003182 <_printf_float+0xa2>
 8003244:	9a06      	ldr	r2, [sp, #24]
 8003246:	2a47      	cmp	r2, #71	@ 0x47
 8003248:	d1c2      	bne.n	80031d0 <_printf_float+0xf0>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1c0      	bne.n	80031d0 <_printf_float+0xf0>
 800324e:	2301      	movs	r3, #1
 8003250:	e7bd      	b.n	80031ce <_printf_float+0xee>
 8003252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003256:	d9db      	bls.n	8003210 <_printf_float+0x130>
 8003258:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800325c:	d118      	bne.n	8003290 <_printf_float+0x1b0>
 800325e:	2900      	cmp	r1, #0
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	dd0b      	ble.n	800327c <_printf_float+0x19c>
 8003264:	6121      	str	r1, [r4, #16]
 8003266:	b913      	cbnz	r3, 800326e <_printf_float+0x18e>
 8003268:	6822      	ldr	r2, [r4, #0]
 800326a:	07d0      	lsls	r0, r2, #31
 800326c:	d502      	bpl.n	8003274 <_printf_float+0x194>
 800326e:	3301      	adds	r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003276:	f04f 0900 	mov.w	r9, #0
 800327a:	e7db      	b.n	8003234 <_printf_float+0x154>
 800327c:	b913      	cbnz	r3, 8003284 <_printf_float+0x1a4>
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	07d2      	lsls	r2, r2, #31
 8003282:	d501      	bpl.n	8003288 <_printf_float+0x1a8>
 8003284:	3302      	adds	r3, #2
 8003286:	e7f4      	b.n	8003272 <_printf_float+0x192>
 8003288:	2301      	movs	r3, #1
 800328a:	e7f2      	b.n	8003272 <_printf_float+0x192>
 800328c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003292:	4299      	cmp	r1, r3
 8003294:	db05      	blt.n	80032a2 <_printf_float+0x1c2>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	6121      	str	r1, [r4, #16]
 800329a:	07d8      	lsls	r0, r3, #31
 800329c:	d5ea      	bpl.n	8003274 <_printf_float+0x194>
 800329e:	1c4b      	adds	r3, r1, #1
 80032a0:	e7e7      	b.n	8003272 <_printf_float+0x192>
 80032a2:	2900      	cmp	r1, #0
 80032a4:	bfd4      	ite	le
 80032a6:	f1c1 0202 	rsble	r2, r1, #2
 80032aa:	2201      	movgt	r2, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	e7e0      	b.n	8003272 <_printf_float+0x192>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	055a      	lsls	r2, r3, #21
 80032b4:	d407      	bmi.n	80032c6 <_printf_float+0x1e6>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	4642      	mov	r2, r8
 80032ba:	4631      	mov	r1, r6
 80032bc:	4628      	mov	r0, r5
 80032be:	47b8      	blx	r7
 80032c0:	3001      	adds	r0, #1
 80032c2:	d12b      	bne.n	800331c <_printf_float+0x23c>
 80032c4:	e767      	b.n	8003196 <_printf_float+0xb6>
 80032c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032ca:	f240 80dd 	bls.w	8003488 <_printf_float+0x3a8>
 80032ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032d2:	2200      	movs	r2, #0
 80032d4:	2300      	movs	r3, #0
 80032d6:	f7fd fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d033      	beq.n	8003346 <_printf_float+0x266>
 80032de:	4a37      	ldr	r2, [pc, #220]	@ (80033bc <_printf_float+0x2dc>)
 80032e0:	2301      	movs	r3, #1
 80032e2:	4631      	mov	r1, r6
 80032e4:	4628      	mov	r0, r5
 80032e6:	47b8      	blx	r7
 80032e8:	3001      	adds	r0, #1
 80032ea:	f43f af54 	beq.w	8003196 <_printf_float+0xb6>
 80032ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80032f2:	4543      	cmp	r3, r8
 80032f4:	db02      	blt.n	80032fc <_printf_float+0x21c>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	07d8      	lsls	r0, r3, #31
 80032fa:	d50f      	bpl.n	800331c <_printf_float+0x23c>
 80032fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003300:	4631      	mov	r1, r6
 8003302:	4628      	mov	r0, r5
 8003304:	47b8      	blx	r7
 8003306:	3001      	adds	r0, #1
 8003308:	f43f af45 	beq.w	8003196 <_printf_float+0xb6>
 800330c:	f04f 0900 	mov.w	r9, #0
 8003310:	f108 38ff 	add.w	r8, r8, #4294967295
 8003314:	f104 0a1a 	add.w	sl, r4, #26
 8003318:	45c8      	cmp	r8, r9
 800331a:	dc09      	bgt.n	8003330 <_printf_float+0x250>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	079b      	lsls	r3, r3, #30
 8003320:	f100 8103 	bmi.w	800352a <_printf_float+0x44a>
 8003324:	68e0      	ldr	r0, [r4, #12]
 8003326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003328:	4298      	cmp	r0, r3
 800332a:	bfb8      	it	lt
 800332c:	4618      	movlt	r0, r3
 800332e:	e734      	b.n	800319a <_printf_float+0xba>
 8003330:	2301      	movs	r3, #1
 8003332:	4652      	mov	r2, sl
 8003334:	4631      	mov	r1, r6
 8003336:	4628      	mov	r0, r5
 8003338:	47b8      	blx	r7
 800333a:	3001      	adds	r0, #1
 800333c:	f43f af2b 	beq.w	8003196 <_printf_float+0xb6>
 8003340:	f109 0901 	add.w	r9, r9, #1
 8003344:	e7e8      	b.n	8003318 <_printf_float+0x238>
 8003346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	dc39      	bgt.n	80033c0 <_printf_float+0x2e0>
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <_printf_float+0x2dc>)
 800334e:	2301      	movs	r3, #1
 8003350:	4631      	mov	r1, r6
 8003352:	4628      	mov	r0, r5
 8003354:	47b8      	blx	r7
 8003356:	3001      	adds	r0, #1
 8003358:	f43f af1d 	beq.w	8003196 <_printf_float+0xb6>
 800335c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003360:	ea59 0303 	orrs.w	r3, r9, r3
 8003364:	d102      	bne.n	800336c <_printf_float+0x28c>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	07d9      	lsls	r1, r3, #31
 800336a:	d5d7      	bpl.n	800331c <_printf_float+0x23c>
 800336c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	47b8      	blx	r7
 8003376:	3001      	adds	r0, #1
 8003378:	f43f af0d 	beq.w	8003196 <_printf_float+0xb6>
 800337c:	f04f 0a00 	mov.w	sl, #0
 8003380:	f104 0b1a 	add.w	fp, r4, #26
 8003384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003386:	425b      	negs	r3, r3
 8003388:	4553      	cmp	r3, sl
 800338a:	dc01      	bgt.n	8003390 <_printf_float+0x2b0>
 800338c:	464b      	mov	r3, r9
 800338e:	e793      	b.n	80032b8 <_printf_float+0x1d8>
 8003390:	2301      	movs	r3, #1
 8003392:	465a      	mov	r2, fp
 8003394:	4631      	mov	r1, r6
 8003396:	4628      	mov	r0, r5
 8003398:	47b8      	blx	r7
 800339a:	3001      	adds	r0, #1
 800339c:	f43f aefb 	beq.w	8003196 <_printf_float+0xb6>
 80033a0:	f10a 0a01 	add.w	sl, sl, #1
 80033a4:	e7ee      	b.n	8003384 <_printf_float+0x2a4>
 80033a6:	bf00      	nop
 80033a8:	7fefffff 	.word	0x7fefffff
 80033ac:	08005ca7 	.word	0x08005ca7
 80033b0:	08005cab 	.word	0x08005cab
 80033b4:	08005caf 	.word	0x08005caf
 80033b8:	08005cb3 	.word	0x08005cb3
 80033bc:	08005cb7 	.word	0x08005cb7
 80033c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80033c6:	4553      	cmp	r3, sl
 80033c8:	bfa8      	it	ge
 80033ca:	4653      	movge	r3, sl
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	4699      	mov	r9, r3
 80033d0:	dc36      	bgt.n	8003440 <_printf_float+0x360>
 80033d2:	f04f 0b00 	mov.w	fp, #0
 80033d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033da:	f104 021a 	add.w	r2, r4, #26
 80033de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033e0:	9306      	str	r3, [sp, #24]
 80033e2:	eba3 0309 	sub.w	r3, r3, r9
 80033e6:	455b      	cmp	r3, fp
 80033e8:	dc31      	bgt.n	800344e <_printf_float+0x36e>
 80033ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ec:	459a      	cmp	sl, r3
 80033ee:	dc3a      	bgt.n	8003466 <_printf_float+0x386>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	07da      	lsls	r2, r3, #31
 80033f4:	d437      	bmi.n	8003466 <_printf_float+0x386>
 80033f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f8:	ebaa 0903 	sub.w	r9, sl, r3
 80033fc:	9b06      	ldr	r3, [sp, #24]
 80033fe:	ebaa 0303 	sub.w	r3, sl, r3
 8003402:	4599      	cmp	r9, r3
 8003404:	bfa8      	it	ge
 8003406:	4699      	movge	r9, r3
 8003408:	f1b9 0f00 	cmp.w	r9, #0
 800340c:	dc33      	bgt.n	8003476 <_printf_float+0x396>
 800340e:	f04f 0800 	mov.w	r8, #0
 8003412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003416:	f104 0b1a 	add.w	fp, r4, #26
 800341a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800341c:	ebaa 0303 	sub.w	r3, sl, r3
 8003420:	eba3 0309 	sub.w	r3, r3, r9
 8003424:	4543      	cmp	r3, r8
 8003426:	f77f af79 	ble.w	800331c <_printf_float+0x23c>
 800342a:	2301      	movs	r3, #1
 800342c:	465a      	mov	r2, fp
 800342e:	4631      	mov	r1, r6
 8003430:	4628      	mov	r0, r5
 8003432:	47b8      	blx	r7
 8003434:	3001      	adds	r0, #1
 8003436:	f43f aeae 	beq.w	8003196 <_printf_float+0xb6>
 800343a:	f108 0801 	add.w	r8, r8, #1
 800343e:	e7ec      	b.n	800341a <_printf_float+0x33a>
 8003440:	4642      	mov	r2, r8
 8003442:	4631      	mov	r1, r6
 8003444:	4628      	mov	r0, r5
 8003446:	47b8      	blx	r7
 8003448:	3001      	adds	r0, #1
 800344a:	d1c2      	bne.n	80033d2 <_printf_float+0x2f2>
 800344c:	e6a3      	b.n	8003196 <_printf_float+0xb6>
 800344e:	2301      	movs	r3, #1
 8003450:	4631      	mov	r1, r6
 8003452:	4628      	mov	r0, r5
 8003454:	9206      	str	r2, [sp, #24]
 8003456:	47b8      	blx	r7
 8003458:	3001      	adds	r0, #1
 800345a:	f43f ae9c 	beq.w	8003196 <_printf_float+0xb6>
 800345e:	9a06      	ldr	r2, [sp, #24]
 8003460:	f10b 0b01 	add.w	fp, fp, #1
 8003464:	e7bb      	b.n	80033de <_printf_float+0x2fe>
 8003466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	d1c0      	bne.n	80033f6 <_printf_float+0x316>
 8003474:	e68f      	b.n	8003196 <_printf_float+0xb6>
 8003476:	9a06      	ldr	r2, [sp, #24]
 8003478:	464b      	mov	r3, r9
 800347a:	4442      	add	r2, r8
 800347c:	4631      	mov	r1, r6
 800347e:	4628      	mov	r0, r5
 8003480:	47b8      	blx	r7
 8003482:	3001      	adds	r0, #1
 8003484:	d1c3      	bne.n	800340e <_printf_float+0x32e>
 8003486:	e686      	b.n	8003196 <_printf_float+0xb6>
 8003488:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800348c:	f1ba 0f01 	cmp.w	sl, #1
 8003490:	dc01      	bgt.n	8003496 <_printf_float+0x3b6>
 8003492:	07db      	lsls	r3, r3, #31
 8003494:	d536      	bpl.n	8003504 <_printf_float+0x424>
 8003496:	2301      	movs	r3, #1
 8003498:	4642      	mov	r2, r8
 800349a:	4631      	mov	r1, r6
 800349c:	4628      	mov	r0, r5
 800349e:	47b8      	blx	r7
 80034a0:	3001      	adds	r0, #1
 80034a2:	f43f ae78 	beq.w	8003196 <_printf_float+0xb6>
 80034a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034aa:	4631      	mov	r1, r6
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b8      	blx	r7
 80034b0:	3001      	adds	r0, #1
 80034b2:	f43f ae70 	beq.w	8003196 <_printf_float+0xb6>
 80034b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034ba:	2200      	movs	r2, #0
 80034bc:	2300      	movs	r3, #0
 80034be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034c2:	f7fd fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80034c6:	b9c0      	cbnz	r0, 80034fa <_printf_float+0x41a>
 80034c8:	4653      	mov	r3, sl
 80034ca:	f108 0201 	add.w	r2, r8, #1
 80034ce:	4631      	mov	r1, r6
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b8      	blx	r7
 80034d4:	3001      	adds	r0, #1
 80034d6:	d10c      	bne.n	80034f2 <_printf_float+0x412>
 80034d8:	e65d      	b.n	8003196 <_printf_float+0xb6>
 80034da:	2301      	movs	r3, #1
 80034dc:	465a      	mov	r2, fp
 80034de:	4631      	mov	r1, r6
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b8      	blx	r7
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f ae56 	beq.w	8003196 <_printf_float+0xb6>
 80034ea:	f108 0801 	add.w	r8, r8, #1
 80034ee:	45d0      	cmp	r8, sl
 80034f0:	dbf3      	blt.n	80034da <_printf_float+0x3fa>
 80034f2:	464b      	mov	r3, r9
 80034f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80034f8:	e6df      	b.n	80032ba <_printf_float+0x1da>
 80034fa:	f04f 0800 	mov.w	r8, #0
 80034fe:	f104 0b1a 	add.w	fp, r4, #26
 8003502:	e7f4      	b.n	80034ee <_printf_float+0x40e>
 8003504:	2301      	movs	r3, #1
 8003506:	4642      	mov	r2, r8
 8003508:	e7e1      	b.n	80034ce <_printf_float+0x3ee>
 800350a:	2301      	movs	r3, #1
 800350c:	464a      	mov	r2, r9
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	f43f ae3e 	beq.w	8003196 <_printf_float+0xb6>
 800351a:	f108 0801 	add.w	r8, r8, #1
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003522:	1a5b      	subs	r3, r3, r1
 8003524:	4543      	cmp	r3, r8
 8003526:	dcf0      	bgt.n	800350a <_printf_float+0x42a>
 8003528:	e6fc      	b.n	8003324 <_printf_float+0x244>
 800352a:	f04f 0800 	mov.w	r8, #0
 800352e:	f104 0919 	add.w	r9, r4, #25
 8003532:	e7f4      	b.n	800351e <_printf_float+0x43e>

08003534 <_printf_common>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	4616      	mov	r6, r2
 800353a:	4698      	mov	r8, r3
 800353c:	688a      	ldr	r2, [r1, #8]
 800353e:	690b      	ldr	r3, [r1, #16]
 8003540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003544:	4293      	cmp	r3, r2
 8003546:	bfb8      	it	lt
 8003548:	4613      	movlt	r3, r2
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003550:	4607      	mov	r7, r0
 8003552:	460c      	mov	r4, r1
 8003554:	b10a      	cbz	r2, 800355a <_printf_common+0x26>
 8003556:	3301      	adds	r3, #1
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	0699      	lsls	r1, r3, #26
 800355e:	bf42      	ittt	mi
 8003560:	6833      	ldrmi	r3, [r6, #0]
 8003562:	3302      	addmi	r3, #2
 8003564:	6033      	strmi	r3, [r6, #0]
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	f015 0506 	ands.w	r5, r5, #6
 800356c:	d106      	bne.n	800357c <_printf_common+0x48>
 800356e:	f104 0a19 	add.w	sl, r4, #25
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	6832      	ldr	r2, [r6, #0]
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	42ab      	cmp	r3, r5
 800357a:	dc26      	bgt.n	80035ca <_printf_common+0x96>
 800357c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	3b00      	subs	r3, #0
 8003584:	bf18      	it	ne
 8003586:	2301      	movne	r3, #1
 8003588:	0692      	lsls	r2, r2, #26
 800358a:	d42b      	bmi.n	80035e4 <_printf_common+0xb0>
 800358c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003590:	4641      	mov	r1, r8
 8003592:	4638      	mov	r0, r7
 8003594:	47c8      	blx	r9
 8003596:	3001      	adds	r0, #1
 8003598:	d01e      	beq.n	80035d8 <_printf_common+0xa4>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	f003 0306 	and.w	r3, r3, #6
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf02      	ittt	eq
 80035a6:	68e5      	ldreq	r5, [r4, #12]
 80035a8:	6833      	ldreq	r3, [r6, #0]
 80035aa:	1aed      	subeq	r5, r5, r3
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	bf0c      	ite	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	2500      	movne	r5, #0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	bfc4      	itt	gt
 80035ba:	1a9b      	subgt	r3, r3, r2
 80035bc:	18ed      	addgt	r5, r5, r3
 80035be:	2600      	movs	r6, #0
 80035c0:	341a      	adds	r4, #26
 80035c2:	42b5      	cmp	r5, r6
 80035c4:	d11a      	bne.n	80035fc <_printf_common+0xc8>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e008      	b.n	80035dc <_printf_common+0xa8>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4652      	mov	r2, sl
 80035ce:	4641      	mov	r1, r8
 80035d0:	4638      	mov	r0, r7
 80035d2:	47c8      	blx	r9
 80035d4:	3001      	adds	r0, #1
 80035d6:	d103      	bne.n	80035e0 <_printf_common+0xac>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7c6      	b.n	8003572 <_printf_common+0x3e>
 80035e4:	18e1      	adds	r1, r4, r3
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	2030      	movs	r0, #48	@ 0x30
 80035ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ee:	4422      	add	r2, r4
 80035f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035f8:	3302      	adds	r3, #2
 80035fa:	e7c7      	b.n	800358c <_printf_common+0x58>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4622      	mov	r2, r4
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	47c8      	blx	r9
 8003606:	3001      	adds	r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa4>
 800360a:	3601      	adds	r6, #1
 800360c:	e7d9      	b.n	80035c2 <_printf_common+0x8e>
	...

08003610 <_printf_i>:
 8003610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	7e0f      	ldrb	r7, [r1, #24]
 8003616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003618:	2f78      	cmp	r7, #120	@ 0x78
 800361a:	4691      	mov	r9, r2
 800361c:	4680      	mov	r8, r0
 800361e:	460c      	mov	r4, r1
 8003620:	469a      	mov	sl, r3
 8003622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003626:	d807      	bhi.n	8003638 <_printf_i+0x28>
 8003628:	2f62      	cmp	r7, #98	@ 0x62
 800362a:	d80a      	bhi.n	8003642 <_printf_i+0x32>
 800362c:	2f00      	cmp	r7, #0
 800362e:	f000 80d2 	beq.w	80037d6 <_printf_i+0x1c6>
 8003632:	2f58      	cmp	r7, #88	@ 0x58
 8003634:	f000 80b9 	beq.w	80037aa <_printf_i+0x19a>
 8003638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800363c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003640:	e03a      	b.n	80036b8 <_printf_i+0xa8>
 8003642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003646:	2b15      	cmp	r3, #21
 8003648:	d8f6      	bhi.n	8003638 <_printf_i+0x28>
 800364a:	a101      	add	r1, pc, #4	@ (adr r1, 8003650 <_printf_i+0x40>)
 800364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003639 	.word	0x08003639
 800365c:	08003639 	.word	0x08003639
 8003660:	08003639 	.word	0x08003639
 8003664:	08003639 	.word	0x08003639
 8003668:	080036bd 	.word	0x080036bd
 800366c:	08003639 	.word	0x08003639
 8003670:	08003639 	.word	0x08003639
 8003674:	08003639 	.word	0x08003639
 8003678:	08003639 	.word	0x08003639
 800367c:	080037bd 	.word	0x080037bd
 8003680:	080036e7 	.word	0x080036e7
 8003684:	08003777 	.word	0x08003777
 8003688:	08003639 	.word	0x08003639
 800368c:	08003639 	.word	0x08003639
 8003690:	080037df 	.word	0x080037df
 8003694:	08003639 	.word	0x08003639
 8003698:	080036e7 	.word	0x080036e7
 800369c:	08003639 	.word	0x08003639
 80036a0:	08003639 	.word	0x08003639
 80036a4:	0800377f 	.word	0x0800377f
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6032      	str	r2, [r6, #0]
 80036b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e09d      	b.n	80037f8 <_printf_i+0x1e8>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	6031      	str	r1, [r6, #0]
 80036c4:	0606      	lsls	r6, r0, #24
 80036c6:	d501      	bpl.n	80036cc <_printf_i+0xbc>
 80036c8:	681d      	ldr	r5, [r3, #0]
 80036ca:	e003      	b.n	80036d4 <_printf_i+0xc4>
 80036cc:	0645      	lsls	r5, r0, #25
 80036ce:	d5fb      	bpl.n	80036c8 <_printf_i+0xb8>
 80036d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	da03      	bge.n	80036e0 <_printf_i+0xd0>
 80036d8:	232d      	movs	r3, #45	@ 0x2d
 80036da:	426d      	negs	r5, r5
 80036dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e0:	4859      	ldr	r0, [pc, #356]	@ (8003848 <_printf_i+0x238>)
 80036e2:	230a      	movs	r3, #10
 80036e4:	e011      	b.n	800370a <_printf_i+0xfa>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	0608      	lsls	r0, r1, #24
 80036ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80036f0:	d402      	bmi.n	80036f8 <_printf_i+0xe8>
 80036f2:	0649      	lsls	r1, r1, #25
 80036f4:	bf48      	it	mi
 80036f6:	b2ad      	uxthmi	r5, r5
 80036f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036fa:	4853      	ldr	r0, [pc, #332]	@ (8003848 <_printf_i+0x238>)
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	bf14      	ite	ne
 8003700:	230a      	movne	r3, #10
 8003702:	2308      	moveq	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800370a:	6866      	ldr	r6, [r4, #4]
 800370c:	60a6      	str	r6, [r4, #8]
 800370e:	2e00      	cmp	r6, #0
 8003710:	bfa2      	ittt	ge
 8003712:	6821      	ldrge	r1, [r4, #0]
 8003714:	f021 0104 	bicge.w	r1, r1, #4
 8003718:	6021      	strge	r1, [r4, #0]
 800371a:	b90d      	cbnz	r5, 8003720 <_printf_i+0x110>
 800371c:	2e00      	cmp	r6, #0
 800371e:	d04b      	beq.n	80037b8 <_printf_i+0x1a8>
 8003720:	4616      	mov	r6, r2
 8003722:	fbb5 f1f3 	udiv	r1, r5, r3
 8003726:	fb03 5711 	mls	r7, r3, r1, r5
 800372a:	5dc7      	ldrb	r7, [r0, r7]
 800372c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003730:	462f      	mov	r7, r5
 8003732:	42bb      	cmp	r3, r7
 8003734:	460d      	mov	r5, r1
 8003736:	d9f4      	bls.n	8003722 <_printf_i+0x112>
 8003738:	2b08      	cmp	r3, #8
 800373a:	d10b      	bne.n	8003754 <_printf_i+0x144>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	07df      	lsls	r7, r3, #31
 8003740:	d508      	bpl.n	8003754 <_printf_i+0x144>
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	6861      	ldr	r1, [r4, #4]
 8003746:	4299      	cmp	r1, r3
 8003748:	bfde      	ittt	le
 800374a:	2330      	movle	r3, #48	@ 0x30
 800374c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003754:	1b92      	subs	r2, r2, r6
 8003756:	6122      	str	r2, [r4, #16]
 8003758:	f8cd a000 	str.w	sl, [sp]
 800375c:	464b      	mov	r3, r9
 800375e:	aa03      	add	r2, sp, #12
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f7ff fee6 	bl	8003534 <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	d14a      	bne.n	8003802 <_printf_i+0x1f2>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b004      	add	sp, #16
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	4833      	ldr	r0, [pc, #204]	@ (800384c <_printf_i+0x23c>)
 8003780:	2778      	movs	r7, #120	@ 0x78
 8003782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	6831      	ldr	r1, [r6, #0]
 800378a:	061f      	lsls	r7, r3, #24
 800378c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003790:	d402      	bmi.n	8003798 <_printf_i+0x188>
 8003792:	065f      	lsls	r7, r3, #25
 8003794:	bf48      	it	mi
 8003796:	b2ad      	uxthmi	r5, r5
 8003798:	6031      	str	r1, [r6, #0]
 800379a:	07d9      	lsls	r1, r3, #31
 800379c:	bf44      	itt	mi
 800379e:	f043 0320 	orrmi.w	r3, r3, #32
 80037a2:	6023      	strmi	r3, [r4, #0]
 80037a4:	b11d      	cbz	r5, 80037ae <_printf_i+0x19e>
 80037a6:	2310      	movs	r3, #16
 80037a8:	e7ac      	b.n	8003704 <_printf_i+0xf4>
 80037aa:	4827      	ldr	r0, [pc, #156]	@ (8003848 <_printf_i+0x238>)
 80037ac:	e7e9      	b.n	8003782 <_printf_i+0x172>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f023 0320 	bic.w	r3, r3, #32
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	e7f6      	b.n	80037a6 <_printf_i+0x196>
 80037b8:	4616      	mov	r6, r2
 80037ba:	e7bd      	b.n	8003738 <_printf_i+0x128>
 80037bc:	6833      	ldr	r3, [r6, #0]
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	6961      	ldr	r1, [r4, #20]
 80037c2:	1d18      	adds	r0, r3, #4
 80037c4:	6030      	str	r0, [r6, #0]
 80037c6:	062e      	lsls	r6, r5, #24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	d501      	bpl.n	80037d0 <_printf_i+0x1c0>
 80037cc:	6019      	str	r1, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <_printf_i+0x1c6>
 80037d0:	0668      	lsls	r0, r5, #25
 80037d2:	d5fb      	bpl.n	80037cc <_printf_i+0x1bc>
 80037d4:	8019      	strh	r1, [r3, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	6123      	str	r3, [r4, #16]
 80037da:	4616      	mov	r6, r2
 80037dc:	e7bc      	b.n	8003758 <_printf_i+0x148>
 80037de:	6833      	ldr	r3, [r6, #0]
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	6032      	str	r2, [r6, #0]
 80037e4:	681e      	ldr	r6, [r3, #0]
 80037e6:	6862      	ldr	r2, [r4, #4]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7fc fcf0 	bl	80001d0 <memchr>
 80037f0:	b108      	cbz	r0, 80037f6 <_printf_i+0x1e6>
 80037f2:	1b80      	subs	r0, r0, r6
 80037f4:	6060      	str	r0, [r4, #4]
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	2300      	movs	r3, #0
 80037fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003800:	e7aa      	b.n	8003758 <_printf_i+0x148>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	4632      	mov	r2, r6
 8003806:	4649      	mov	r1, r9
 8003808:	4640      	mov	r0, r8
 800380a:	47d0      	blx	sl
 800380c:	3001      	adds	r0, #1
 800380e:	d0ad      	beq.n	800376c <_printf_i+0x15c>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	079b      	lsls	r3, r3, #30
 8003814:	d413      	bmi.n	800383e <_printf_i+0x22e>
 8003816:	68e0      	ldr	r0, [r4, #12]
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	4298      	cmp	r0, r3
 800381c:	bfb8      	it	lt
 800381e:	4618      	movlt	r0, r3
 8003820:	e7a6      	b.n	8003770 <_printf_i+0x160>
 8003822:	2301      	movs	r3, #1
 8003824:	4632      	mov	r2, r6
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	47d0      	blx	sl
 800382c:	3001      	adds	r0, #1
 800382e:	d09d      	beq.n	800376c <_printf_i+0x15c>
 8003830:	3501      	adds	r5, #1
 8003832:	68e3      	ldr	r3, [r4, #12]
 8003834:	9903      	ldr	r1, [sp, #12]
 8003836:	1a5b      	subs	r3, r3, r1
 8003838:	42ab      	cmp	r3, r5
 800383a:	dcf2      	bgt.n	8003822 <_printf_i+0x212>
 800383c:	e7eb      	b.n	8003816 <_printf_i+0x206>
 800383e:	2500      	movs	r5, #0
 8003840:	f104 0619 	add.w	r6, r4, #25
 8003844:	e7f5      	b.n	8003832 <_printf_i+0x222>
 8003846:	bf00      	nop
 8003848:	08005cb9 	.word	0x08005cb9
 800384c:	08005cca 	.word	0x08005cca

08003850 <std>:
 8003850:	2300      	movs	r3, #0
 8003852:	b510      	push	{r4, lr}
 8003854:	4604      	mov	r4, r0
 8003856:	e9c0 3300 	strd	r3, r3, [r0]
 800385a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800385e:	6083      	str	r3, [r0, #8]
 8003860:	8181      	strh	r1, [r0, #12]
 8003862:	6643      	str	r3, [r0, #100]	@ 0x64
 8003864:	81c2      	strh	r2, [r0, #14]
 8003866:	6183      	str	r3, [r0, #24]
 8003868:	4619      	mov	r1, r3
 800386a:	2208      	movs	r2, #8
 800386c:	305c      	adds	r0, #92	@ 0x5c
 800386e:	f000 f928 	bl	8003ac2 <memset>
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <std+0x58>)
 8003874:	6263      	str	r3, [r4, #36]	@ 0x24
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <std+0x5c>)
 8003878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <std+0x60>)
 800387c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <std+0x64>)
 8003880:	6323      	str	r3, [r4, #48]	@ 0x30
 8003882:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <std+0x68>)
 8003884:	6224      	str	r4, [r4, #32]
 8003886:	429c      	cmp	r4, r3
 8003888:	d006      	beq.n	8003898 <std+0x48>
 800388a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800388e:	4294      	cmp	r4, r2
 8003890:	d002      	beq.n	8003898 <std+0x48>
 8003892:	33d0      	adds	r3, #208	@ 0xd0
 8003894:	429c      	cmp	r4, r3
 8003896:	d105      	bne.n	80038a4 <std+0x54>
 8003898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	f000 b98c 	b.w	8003bbc <__retarget_lock_init_recursive>
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	bf00      	nop
 80038a8:	08003a3d 	.word	0x08003a3d
 80038ac:	08003a5f 	.word	0x08003a5f
 80038b0:	08003a97 	.word	0x08003a97
 80038b4:	08003abb 	.word	0x08003abb
 80038b8:	20000284 	.word	0x20000284

080038bc <stdio_exit_handler>:
 80038bc:	4a02      	ldr	r2, [pc, #8]	@ (80038c8 <stdio_exit_handler+0xc>)
 80038be:	4903      	ldr	r1, [pc, #12]	@ (80038cc <stdio_exit_handler+0x10>)
 80038c0:	4803      	ldr	r0, [pc, #12]	@ (80038d0 <stdio_exit_handler+0x14>)
 80038c2:	f000 b869 	b.w	8003998 <_fwalk_sglue>
 80038c6:	bf00      	nop
 80038c8:	20000004 	.word	0x20000004
 80038cc:	0800551d 	.word	0x0800551d
 80038d0:	20000014 	.word	0x20000014

080038d4 <cleanup_stdio>:
 80038d4:	6841      	ldr	r1, [r0, #4]
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <cleanup_stdio+0x34>)
 80038d8:	4299      	cmp	r1, r3
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	d001      	beq.n	80038e4 <cleanup_stdio+0x10>
 80038e0:	f001 fe1c 	bl	800551c <_fflush_r>
 80038e4:	68a1      	ldr	r1, [r4, #8]
 80038e6:	4b09      	ldr	r3, [pc, #36]	@ (800390c <cleanup_stdio+0x38>)
 80038e8:	4299      	cmp	r1, r3
 80038ea:	d002      	beq.n	80038f2 <cleanup_stdio+0x1e>
 80038ec:	4620      	mov	r0, r4
 80038ee:	f001 fe15 	bl	800551c <_fflush_r>
 80038f2:	68e1      	ldr	r1, [r4, #12]
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <cleanup_stdio+0x3c>)
 80038f6:	4299      	cmp	r1, r3
 80038f8:	d004      	beq.n	8003904 <cleanup_stdio+0x30>
 80038fa:	4620      	mov	r0, r4
 80038fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003900:	f001 be0c 	b.w	800551c <_fflush_r>
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	20000284 	.word	0x20000284
 800390c:	200002ec 	.word	0x200002ec
 8003910:	20000354 	.word	0x20000354

08003914 <global_stdio_init.part.0>:
 8003914:	b510      	push	{r4, lr}
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <global_stdio_init.part.0+0x30>)
 8003918:	4c0b      	ldr	r4, [pc, #44]	@ (8003948 <global_stdio_init.part.0+0x34>)
 800391a:	4a0c      	ldr	r2, [pc, #48]	@ (800394c <global_stdio_init.part.0+0x38>)
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	4620      	mov	r0, r4
 8003920:	2200      	movs	r2, #0
 8003922:	2104      	movs	r1, #4
 8003924:	f7ff ff94 	bl	8003850 <std>
 8003928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800392c:	2201      	movs	r2, #1
 800392e:	2109      	movs	r1, #9
 8003930:	f7ff ff8e 	bl	8003850 <std>
 8003934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003938:	2202      	movs	r2, #2
 800393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393e:	2112      	movs	r1, #18
 8003940:	f7ff bf86 	b.w	8003850 <std>
 8003944:	200003bc 	.word	0x200003bc
 8003948:	20000284 	.word	0x20000284
 800394c:	080038bd 	.word	0x080038bd

08003950 <__sfp_lock_acquire>:
 8003950:	4801      	ldr	r0, [pc, #4]	@ (8003958 <__sfp_lock_acquire+0x8>)
 8003952:	f000 b934 	b.w	8003bbe <__retarget_lock_acquire_recursive>
 8003956:	bf00      	nop
 8003958:	200003c5 	.word	0x200003c5

0800395c <__sfp_lock_release>:
 800395c:	4801      	ldr	r0, [pc, #4]	@ (8003964 <__sfp_lock_release+0x8>)
 800395e:	f000 b92f 	b.w	8003bc0 <__retarget_lock_release_recursive>
 8003962:	bf00      	nop
 8003964:	200003c5 	.word	0x200003c5

08003968 <__sinit>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
 800396c:	f7ff fff0 	bl	8003950 <__sfp_lock_acquire>
 8003970:	6a23      	ldr	r3, [r4, #32]
 8003972:	b11b      	cbz	r3, 800397c <__sinit+0x14>
 8003974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003978:	f7ff bff0 	b.w	800395c <__sfp_lock_release>
 800397c:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <__sinit+0x28>)
 800397e:	6223      	str	r3, [r4, #32]
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <__sinit+0x2c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f5      	bne.n	8003974 <__sinit+0xc>
 8003988:	f7ff ffc4 	bl	8003914 <global_stdio_init.part.0>
 800398c:	e7f2      	b.n	8003974 <__sinit+0xc>
 800398e:	bf00      	nop
 8003990:	080038d5 	.word	0x080038d5
 8003994:	200003bc 	.word	0x200003bc

08003998 <_fwalk_sglue>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	4607      	mov	r7, r0
 800399e:	4688      	mov	r8, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	2600      	movs	r6, #0
 80039a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a8:	f1b9 0901 	subs.w	r9, r9, #1
 80039ac:	d505      	bpl.n	80039ba <_fwalk_sglue+0x22>
 80039ae:	6824      	ldr	r4, [r4, #0]
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	d1f7      	bne.n	80039a4 <_fwalk_sglue+0xc>
 80039b4:	4630      	mov	r0, r6
 80039b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d907      	bls.n	80039d0 <_fwalk_sglue+0x38>
 80039c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c4:	3301      	adds	r3, #1
 80039c6:	d003      	beq.n	80039d0 <_fwalk_sglue+0x38>
 80039c8:	4629      	mov	r1, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	47c0      	blx	r8
 80039ce:	4306      	orrs	r6, r0
 80039d0:	3568      	adds	r5, #104	@ 0x68
 80039d2:	e7e9      	b.n	80039a8 <_fwalk_sglue+0x10>

080039d4 <sniprintf>:
 80039d4:	b40c      	push	{r2, r3}
 80039d6:	b530      	push	{r4, r5, lr}
 80039d8:	4b17      	ldr	r3, [pc, #92]	@ (8003a38 <sniprintf+0x64>)
 80039da:	1e0c      	subs	r4, r1, #0
 80039dc:	681d      	ldr	r5, [r3, #0]
 80039de:	b09d      	sub	sp, #116	@ 0x74
 80039e0:	da08      	bge.n	80039f4 <sniprintf+0x20>
 80039e2:	238b      	movs	r3, #139	@ 0x8b
 80039e4:	602b      	str	r3, [r5, #0]
 80039e6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ea:	b01d      	add	sp, #116	@ 0x74
 80039ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039f0:	b002      	add	sp, #8
 80039f2:	4770      	bx	lr
 80039f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80039f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039fc:	bf14      	ite	ne
 80039fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a02:	4623      	moveq	r3, r4
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	9307      	str	r3, [sp, #28]
 8003a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a0c:	9002      	str	r0, [sp, #8]
 8003a0e:	9006      	str	r0, [sp, #24]
 8003a10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a16:	ab21      	add	r3, sp, #132	@ 0x84
 8003a18:	a902      	add	r1, sp, #8
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	f001 fbfd 	bl	800521c <_svfiprintf_r>
 8003a22:	1c43      	adds	r3, r0, #1
 8003a24:	bfbc      	itt	lt
 8003a26:	238b      	movlt	r3, #139	@ 0x8b
 8003a28:	602b      	strlt	r3, [r5, #0]
 8003a2a:	2c00      	cmp	r4, #0
 8003a2c:	d0dd      	beq.n	80039ea <sniprintf+0x16>
 8003a2e:	9b02      	ldr	r3, [sp, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e7d9      	b.n	80039ea <sniprintf+0x16>
 8003a36:	bf00      	nop
 8003a38:	20000010 	.word	0x20000010

08003a3c <__sread>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	460c      	mov	r4, r1
 8003a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a44:	f000 f86c 	bl	8003b20 <_read_r>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	bfab      	itete	ge
 8003a4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a50:	181b      	addge	r3, r3, r0
 8003a52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a56:	bfac      	ite	ge
 8003a58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a5a:	81a3      	strhlt	r3, [r4, #12]
 8003a5c:	bd10      	pop	{r4, pc}

08003a5e <__swrite>:
 8003a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a62:	461f      	mov	r7, r3
 8003a64:	898b      	ldrh	r3, [r1, #12]
 8003a66:	05db      	lsls	r3, r3, #23
 8003a68:	4605      	mov	r5, r0
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	d505      	bpl.n	8003a7c <__swrite+0x1e>
 8003a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a74:	2302      	movs	r3, #2
 8003a76:	2200      	movs	r2, #0
 8003a78:	f000 f840 	bl	8003afc <_lseek_r>
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a86:	81a3      	strh	r3, [r4, #12]
 8003a88:	4632      	mov	r2, r6
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a92:	f000 b857 	b.w	8003b44 <_write_r>

08003a96 <__sseek>:
 8003a96:	b510      	push	{r4, lr}
 8003a98:	460c      	mov	r4, r1
 8003a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9e:	f000 f82d 	bl	8003afc <_lseek_r>
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	bf15      	itete	ne
 8003aa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003aaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003aae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ab2:	81a3      	strheq	r3, [r4, #12]
 8003ab4:	bf18      	it	ne
 8003ab6:	81a3      	strhne	r3, [r4, #12]
 8003ab8:	bd10      	pop	{r4, pc}

08003aba <__sclose>:
 8003aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003abe:	f000 b80d 	b.w	8003adc <_close_r>

08003ac2 <memset>:
 8003ac2:	4402      	add	r2, r0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d100      	bne.n	8003acc <memset+0xa>
 8003aca:	4770      	bx	lr
 8003acc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad0:	e7f9      	b.n	8003ac6 <memset+0x4>
	...

08003ad4 <_localeconv_r>:
 8003ad4:	4800      	ldr	r0, [pc, #0]	@ (8003ad8 <_localeconv_r+0x4>)
 8003ad6:	4770      	bx	lr
 8003ad8:	20000150 	.word	0x20000150

08003adc <_close_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d06      	ldr	r5, [pc, #24]	@ (8003af8 <_close_r+0x1c>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fd ff46 	bl	8001978 <_close>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_close_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_close_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	200003c0 	.word	0x200003c0

08003afc <_lseek_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4d07      	ldr	r5, [pc, #28]	@ (8003b1c <_lseek_r+0x20>)
 8003b00:	4604      	mov	r4, r0
 8003b02:	4608      	mov	r0, r1
 8003b04:	4611      	mov	r1, r2
 8003b06:	2200      	movs	r2, #0
 8003b08:	602a      	str	r2, [r5, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7fd ff5b 	bl	80019c6 <_lseek>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_lseek_r+0x1e>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_lseek_r+0x1e>
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	200003c0 	.word	0x200003c0

08003b20 <_read_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4d07      	ldr	r5, [pc, #28]	@ (8003b40 <_read_r+0x20>)
 8003b24:	4604      	mov	r4, r0
 8003b26:	4608      	mov	r0, r1
 8003b28:	4611      	mov	r1, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	602a      	str	r2, [r5, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f7fd fee9 	bl	8001906 <_read>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_read_r+0x1e>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_read_r+0x1e>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	200003c0 	.word	0x200003c0

08003b44 <_write_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	@ (8003b64 <_write_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fd fef4 	bl	8001940 <_write>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_write_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_write_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	200003c0 	.word	0x200003c0

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	@ (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000010 	.word	0x20000010

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4d0d      	ldr	r5, [pc, #52]	@ (8003bac <__libc_init_array+0x38>)
 8003b78:	4c0d      	ldr	r4, [pc, #52]	@ (8003bb0 <__libc_init_array+0x3c>)
 8003b7a:	1b64      	subs	r4, r4, r5
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	2600      	movs	r6, #0
 8003b80:	42a6      	cmp	r6, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	4d0b      	ldr	r5, [pc, #44]	@ (8003bb4 <__libc_init_array+0x40>)
 8003b86:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb8 <__libc_init_array+0x44>)
 8003b88:	f002 f866 	bl	8005c58 <_init>
 8003b8c:	1b64      	subs	r4, r4, r5
 8003b8e:	10a4      	asrs	r4, r4, #2
 8003b90:	2600      	movs	r6, #0
 8003b92:	42a6      	cmp	r6, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9c:	4798      	blx	r3
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba6:	4798      	blx	r3
 8003ba8:	3601      	adds	r6, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	08006020 	.word	0x08006020
 8003bb0:	08006020 	.word	0x08006020
 8003bb4:	08006020 	.word	0x08006020
 8003bb8:	08006024 	.word	0x08006024

08003bbc <__retarget_lock_init_recursive>:
 8003bbc:	4770      	bx	lr

08003bbe <__retarget_lock_acquire_recursive>:
 8003bbe:	4770      	bx	lr

08003bc0 <__retarget_lock_release_recursive>:
 8003bc0:	4770      	bx	lr

08003bc2 <quorem>:
 8003bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc6:	6903      	ldr	r3, [r0, #16]
 8003bc8:	690c      	ldr	r4, [r1, #16]
 8003bca:	42a3      	cmp	r3, r4
 8003bcc:	4607      	mov	r7, r0
 8003bce:	db7e      	blt.n	8003cce <quorem+0x10c>
 8003bd0:	3c01      	subs	r4, #1
 8003bd2:	f101 0814 	add.w	r8, r1, #20
 8003bd6:	00a3      	lsls	r3, r4, #2
 8003bd8:	f100 0514 	add.w	r5, r0, #20
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bec:	3301      	adds	r3, #1
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bf8:	d32e      	bcc.n	8003c58 <quorem+0x96>
 8003bfa:	f04f 0a00 	mov.w	sl, #0
 8003bfe:	46c4      	mov	ip, r8
 8003c00:	46ae      	mov	lr, r5
 8003c02:	46d3      	mov	fp, sl
 8003c04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c08:	b298      	uxth	r0, r3
 8003c0a:	fb06 a000 	mla	r0, r6, r0, sl
 8003c0e:	0c02      	lsrs	r2, r0, #16
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	fb06 2303 	mla	r3, r6, r3, r2
 8003c16:	f8de 2000 	ldr.w	r2, [lr]
 8003c1a:	b280      	uxth	r0, r0
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	1a12      	subs	r2, r2, r0
 8003c20:	445a      	add	r2, fp
 8003c22:	f8de 0000 	ldr.w	r0, [lr]
 8003c26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c34:	b292      	uxth	r2, r2
 8003c36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c3a:	45e1      	cmp	r9, ip
 8003c3c:	f84e 2b04 	str.w	r2, [lr], #4
 8003c40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c44:	d2de      	bcs.n	8003c04 <quorem+0x42>
 8003c46:	9b00      	ldr	r3, [sp, #0]
 8003c48:	58eb      	ldr	r3, [r5, r3]
 8003c4a:	b92b      	cbnz	r3, 8003c58 <quorem+0x96>
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	429d      	cmp	r5, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	d32f      	bcc.n	8003cb6 <quorem+0xf4>
 8003c56:	613c      	str	r4, [r7, #16]
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f001 f97b 	bl	8004f54 <__mcmp>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	db25      	blt.n	8003cae <quorem+0xec>
 8003c62:	4629      	mov	r1, r5
 8003c64:	2000      	movs	r0, #0
 8003c66:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c6a:	f8d1 c000 	ldr.w	ip, [r1]
 8003c6e:	fa1f fe82 	uxth.w	lr, r2
 8003c72:	fa1f f38c 	uxth.w	r3, ip
 8003c76:	eba3 030e 	sub.w	r3, r3, lr
 8003c7a:	4403      	add	r3, r0
 8003c7c:	0c12      	lsrs	r2, r2, #16
 8003c7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c8c:	45c1      	cmp	r9, r8
 8003c8e:	f841 3b04 	str.w	r3, [r1], #4
 8003c92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c96:	d2e6      	bcs.n	8003c66 <quorem+0xa4>
 8003c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ca0:	b922      	cbnz	r2, 8003cac <quorem+0xea>
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	429d      	cmp	r5, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	d30b      	bcc.n	8003cc2 <quorem+0x100>
 8003caa:	613c      	str	r4, [r7, #16]
 8003cac:	3601      	adds	r6, #1
 8003cae:	4630      	mov	r0, r6
 8003cb0:	b003      	add	sp, #12
 8003cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	3b04      	subs	r3, #4
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d1cb      	bne.n	8003c56 <quorem+0x94>
 8003cbe:	3c01      	subs	r4, #1
 8003cc0:	e7c6      	b.n	8003c50 <quorem+0x8e>
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	3b04      	subs	r3, #4
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d1ef      	bne.n	8003caa <quorem+0xe8>
 8003cca:	3c01      	subs	r4, #1
 8003ccc:	e7ea      	b.n	8003ca4 <quorem+0xe2>
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e7ee      	b.n	8003cb0 <quorem+0xee>
 8003cd2:	0000      	movs	r0, r0
 8003cd4:	0000      	movs	r0, r0
	...

08003cd8 <_dtoa_r>:
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	69c7      	ldr	r7, [r0, #28]
 8003cde:	b099      	sub	sp, #100	@ 0x64
 8003ce0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003ce4:	ec55 4b10 	vmov	r4, r5, d0
 8003ce8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003cea:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cec:	4683      	mov	fp, r0
 8003cee:	920e      	str	r2, [sp, #56]	@ 0x38
 8003cf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003cf2:	b97f      	cbnz	r7, 8003d14 <_dtoa_r+0x3c>
 8003cf4:	2010      	movs	r0, #16
 8003cf6:	f000 fdfd 	bl	80048f4 <malloc>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	f8cb 001c 	str.w	r0, [fp, #28]
 8003d00:	b920      	cbnz	r0, 8003d0c <_dtoa_r+0x34>
 8003d02:	4ba7      	ldr	r3, [pc, #668]	@ (8003fa0 <_dtoa_r+0x2c8>)
 8003d04:	21ef      	movs	r1, #239	@ 0xef
 8003d06:	48a7      	ldr	r0, [pc, #668]	@ (8003fa4 <_dtoa_r+0x2cc>)
 8003d08:	f001 fc68 	bl	80055dc <__assert_func>
 8003d0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d10:	6007      	str	r7, [r0, #0]
 8003d12:	60c7      	str	r7, [r0, #12]
 8003d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	b159      	cbz	r1, 8003d34 <_dtoa_r+0x5c>
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	604a      	str	r2, [r1, #4]
 8003d20:	2301      	movs	r3, #1
 8003d22:	4093      	lsls	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
 8003d26:	4658      	mov	r0, fp
 8003d28:	f000 feda 	bl	8004ae0 <_Bfree>
 8003d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	1e2b      	subs	r3, r5, #0
 8003d36:	bfb9      	ittee	lt
 8003d38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d3c:	9303      	strlt	r3, [sp, #12]
 8003d3e:	2300      	movge	r3, #0
 8003d40:	6033      	strge	r3, [r6, #0]
 8003d42:	9f03      	ldr	r7, [sp, #12]
 8003d44:	4b98      	ldr	r3, [pc, #608]	@ (8003fa8 <_dtoa_r+0x2d0>)
 8003d46:	bfbc      	itt	lt
 8003d48:	2201      	movlt	r2, #1
 8003d4a:	6032      	strlt	r2, [r6, #0]
 8003d4c:	43bb      	bics	r3, r7
 8003d4e:	d112      	bne.n	8003d76 <_dtoa_r+0x9e>
 8003d50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d5c:	4323      	orrs	r3, r4
 8003d5e:	f000 854d 	beq.w	80047fc <_dtoa_r+0xb24>
 8003d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003fbc <_dtoa_r+0x2e4>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 854f 	beq.w	800480c <_dtoa_r+0xb34>
 8003d6e:	f10a 0303 	add.w	r3, sl, #3
 8003d72:	f000 bd49 	b.w	8004808 <_dtoa_r+0xb30>
 8003d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	ec51 0b17 	vmov	r0, r1, d7
 8003d80:	2300      	movs	r3, #0
 8003d82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003d86:	f7fc fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d8a:	4680      	mov	r8, r0
 8003d8c:	b158      	cbz	r0, 8003da6 <_dtoa_r+0xce>
 8003d8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d90:	2301      	movs	r3, #1
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d96:	b113      	cbz	r3, 8003d9e <_dtoa_r+0xc6>
 8003d98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003d9a:	4b84      	ldr	r3, [pc, #528]	@ (8003fac <_dtoa_r+0x2d4>)
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003fc0 <_dtoa_r+0x2e8>
 8003da2:	f000 bd33 	b.w	800480c <_dtoa_r+0xb34>
 8003da6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003daa:	aa16      	add	r2, sp, #88	@ 0x58
 8003dac:	a917      	add	r1, sp, #92	@ 0x5c
 8003dae:	4658      	mov	r0, fp
 8003db0:	f001 f980 	bl	80050b4 <__d2b>
 8003db4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003db8:	4681      	mov	r9, r0
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	d077      	beq.n	8003eae <_dtoa_r+0x1d6>
 8003dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003dcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003dd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003dd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4b74      	ldr	r3, [pc, #464]	@ (8003fb0 <_dtoa_r+0x2d8>)
 8003dde:	f7fc fa53 	bl	8000288 <__aeabi_dsub>
 8003de2:	a369      	add	r3, pc, #420	@ (adr r3, 8003f88 <_dtoa_r+0x2b0>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fc06 	bl	80005f8 <__aeabi_dmul>
 8003dec:	a368      	add	r3, pc, #416	@ (adr r3, 8003f90 <_dtoa_r+0x2b8>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc fa4b 	bl	800028c <__adddf3>
 8003df6:	4604      	mov	r4, r0
 8003df8:	4630      	mov	r0, r6
 8003dfa:	460d      	mov	r5, r1
 8003dfc:	f7fc fb92 	bl	8000524 <__aeabi_i2d>
 8003e00:	a365      	add	r3, pc, #404	@ (adr r3, 8003f98 <_dtoa_r+0x2c0>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fbf7 	bl	80005f8 <__aeabi_dmul>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f7fc fa3b 	bl	800028c <__adddf3>
 8003e16:	4604      	mov	r4, r0
 8003e18:	460d      	mov	r5, r1
 8003e1a:	f7fc fe9d 	bl	8000b58 <__aeabi_d2iz>
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4607      	mov	r7, r0
 8003e22:	2300      	movs	r3, #0
 8003e24:	4620      	mov	r0, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7fc fe58 	bl	8000adc <__aeabi_dcmplt>
 8003e2c:	b140      	cbz	r0, 8003e40 <_dtoa_r+0x168>
 8003e2e:	4638      	mov	r0, r7
 8003e30:	f7fc fb78 	bl	8000524 <__aeabi_i2d>
 8003e34:	4622      	mov	r2, r4
 8003e36:	462b      	mov	r3, r5
 8003e38:	f7fc fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e3c:	b900      	cbnz	r0, 8003e40 <_dtoa_r+0x168>
 8003e3e:	3f01      	subs	r7, #1
 8003e40:	2f16      	cmp	r7, #22
 8003e42:	d851      	bhi.n	8003ee8 <_dtoa_r+0x210>
 8003e44:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb4 <_dtoa_r+0x2dc>)
 8003e46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e52:	f7fc fe43 	bl	8000adc <__aeabi_dcmplt>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d048      	beq.n	8003eec <_dtoa_r+0x214>
 8003e5a:	3f01      	subs	r7, #1
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003e60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003e62:	1b9b      	subs	r3, r3, r6
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	bf44      	itt	mi
 8003e68:	f1c3 0801 	rsbmi	r8, r3, #1
 8003e6c:	2300      	movmi	r3, #0
 8003e6e:	9208      	str	r2, [sp, #32]
 8003e70:	bf54      	ite	pl
 8003e72:	f04f 0800 	movpl.w	r8, #0
 8003e76:	9308      	strmi	r3, [sp, #32]
 8003e78:	2f00      	cmp	r7, #0
 8003e7a:	db39      	blt.n	8003ef0 <_dtoa_r+0x218>
 8003e7c:	9b08      	ldr	r3, [sp, #32]
 8003e7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003e80:	443b      	add	r3, r7
 8003e82:	9308      	str	r3, [sp, #32]
 8003e84:	2300      	movs	r3, #0
 8003e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e8a:	2b09      	cmp	r3, #9
 8003e8c:	d864      	bhi.n	8003f58 <_dtoa_r+0x280>
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	bfc4      	itt	gt
 8003e92:	3b04      	subgt	r3, #4
 8003e94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e98:	f1a3 0302 	sub.w	r3, r3, #2
 8003e9c:	bfcc      	ite	gt
 8003e9e:	2400      	movgt	r4, #0
 8003ea0:	2401      	movle	r4, #1
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d863      	bhi.n	8003f6e <_dtoa_r+0x296>
 8003ea6:	e8df f003 	tbb	[pc, r3]
 8003eaa:	372a      	.short	0x372a
 8003eac:	5535      	.short	0x5535
 8003eae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003eb2:	441e      	add	r6, r3
 8003eb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	bfc1      	itttt	gt
 8003ebc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003ec0:	409f      	lslgt	r7, r3
 8003ec2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ec6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003eca:	bfd6      	itet	le
 8003ecc:	f1c3 0320 	rsble	r3, r3, #32
 8003ed0:	ea47 0003 	orrgt.w	r0, r7, r3
 8003ed4:	fa04 f003 	lslle.w	r0, r4, r3
 8003ed8:	f7fc fb14 	bl	8000504 <__aeabi_ui2d>
 8003edc:	2201      	movs	r2, #1
 8003ede:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003ee2:	3e01      	subs	r6, #1
 8003ee4:	9214      	str	r2, [sp, #80]	@ 0x50
 8003ee6:	e777      	b.n	8003dd8 <_dtoa_r+0x100>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e7b8      	b.n	8003e5e <_dtoa_r+0x186>
 8003eec:	9012      	str	r0, [sp, #72]	@ 0x48
 8003eee:	e7b7      	b.n	8003e60 <_dtoa_r+0x188>
 8003ef0:	427b      	negs	r3, r7
 8003ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	eba8 0807 	sub.w	r8, r8, r7
 8003efa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003efc:	e7c4      	b.n	8003e88 <_dtoa_r+0x1b0>
 8003efe:	2300      	movs	r3, #0
 8003f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dc35      	bgt.n	8003f74 <_dtoa_r+0x29c>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	9307      	str	r3, [sp, #28]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f12:	e00b      	b.n	8003f2c <_dtoa_r+0x254>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e7f3      	b.n	8003f00 <_dtoa_r+0x228>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	9307      	str	r3, [sp, #28]
 8003f28:	bfb8      	it	lt
 8003f2a:	2301      	movlt	r3, #1
 8003f2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003f30:	2100      	movs	r1, #0
 8003f32:	2204      	movs	r2, #4
 8003f34:	f102 0514 	add.w	r5, r2, #20
 8003f38:	429d      	cmp	r5, r3
 8003f3a:	d91f      	bls.n	8003f7c <_dtoa_r+0x2a4>
 8003f3c:	6041      	str	r1, [r0, #4]
 8003f3e:	4658      	mov	r0, fp
 8003f40:	f000 fd8e 	bl	8004a60 <_Balloc>
 8003f44:	4682      	mov	sl, r0
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d13c      	bne.n	8003fc4 <_dtoa_r+0x2ec>
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <_dtoa_r+0x2e0>)
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f52:	e6d8      	b.n	8003d06 <_dtoa_r+0x2e>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e7e0      	b.n	8003f1a <_dtoa_r+0x242>
 8003f58:	2401      	movs	r4, #1
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2312      	movs	r3, #18
 8003f6c:	e7d0      	b.n	8003f10 <_dtoa_r+0x238>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f72:	e7f5      	b.n	8003f60 <_dtoa_r+0x288>
 8003f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	e7d7      	b.n	8003f2c <_dtoa_r+0x254>
 8003f7c:	3101      	adds	r1, #1
 8003f7e:	0052      	lsls	r2, r2, #1
 8003f80:	e7d8      	b.n	8003f34 <_dtoa_r+0x25c>
 8003f82:	bf00      	nop
 8003f84:	f3af 8000 	nop.w
 8003f88:	636f4361 	.word	0x636f4361
 8003f8c:	3fd287a7 	.word	0x3fd287a7
 8003f90:	8b60c8b3 	.word	0x8b60c8b3
 8003f94:	3fc68a28 	.word	0x3fc68a28
 8003f98:	509f79fb 	.word	0x509f79fb
 8003f9c:	3fd34413 	.word	0x3fd34413
 8003fa0:	08005ce8 	.word	0x08005ce8
 8003fa4:	08005cff 	.word	0x08005cff
 8003fa8:	7ff00000 	.word	0x7ff00000
 8003fac:	08005cb8 	.word	0x08005cb8
 8003fb0:	3ff80000 	.word	0x3ff80000
 8003fb4:	08005df8 	.word	0x08005df8
 8003fb8:	08005d57 	.word	0x08005d57
 8003fbc:	08005ce4 	.word	0x08005ce4
 8003fc0:	08005cb7 	.word	0x08005cb7
 8003fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fc8:	6018      	str	r0, [r3, #0]
 8003fca:	9b07      	ldr	r3, [sp, #28]
 8003fcc:	2b0e      	cmp	r3, #14
 8003fce:	f200 80a4 	bhi.w	800411a <_dtoa_r+0x442>
 8003fd2:	2c00      	cmp	r4, #0
 8003fd4:	f000 80a1 	beq.w	800411a <_dtoa_r+0x442>
 8003fd8:	2f00      	cmp	r7, #0
 8003fda:	dd33      	ble.n	8004044 <_dtoa_r+0x36c>
 8003fdc:	4bad      	ldr	r3, [pc, #692]	@ (8004294 <_dtoa_r+0x5bc>)
 8003fde:	f007 020f 	and.w	r2, r7, #15
 8003fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fe6:	ed93 7b00 	vldr	d7, [r3]
 8003fea:	05f8      	lsls	r0, r7, #23
 8003fec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003ff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003ff4:	d516      	bpl.n	8004024 <_dtoa_r+0x34c>
 8003ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8004298 <_dtoa_r+0x5c0>)
 8003ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004000:	f7fc fc24 	bl	800084c <__aeabi_ddiv>
 8004004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004008:	f004 040f 	and.w	r4, r4, #15
 800400c:	2603      	movs	r6, #3
 800400e:	4da2      	ldr	r5, [pc, #648]	@ (8004298 <_dtoa_r+0x5c0>)
 8004010:	b954      	cbnz	r4, 8004028 <_dtoa_r+0x350>
 8004012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800401a:	f7fc fc17 	bl	800084c <__aeabi_ddiv>
 800401e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004022:	e028      	b.n	8004076 <_dtoa_r+0x39e>
 8004024:	2602      	movs	r6, #2
 8004026:	e7f2      	b.n	800400e <_dtoa_r+0x336>
 8004028:	07e1      	lsls	r1, r4, #31
 800402a:	d508      	bpl.n	800403e <_dtoa_r+0x366>
 800402c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004034:	f7fc fae0 	bl	80005f8 <__aeabi_dmul>
 8004038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800403c:	3601      	adds	r6, #1
 800403e:	1064      	asrs	r4, r4, #1
 8004040:	3508      	adds	r5, #8
 8004042:	e7e5      	b.n	8004010 <_dtoa_r+0x338>
 8004044:	f000 80d2 	beq.w	80041ec <_dtoa_r+0x514>
 8004048:	427c      	negs	r4, r7
 800404a:	4b92      	ldr	r3, [pc, #584]	@ (8004294 <_dtoa_r+0x5bc>)
 800404c:	4d92      	ldr	r5, [pc, #584]	@ (8004298 <_dtoa_r+0x5c0>)
 800404e:	f004 020f 	and.w	r2, r4, #15
 8004052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800405e:	f7fc facb 	bl	80005f8 <__aeabi_dmul>
 8004062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004066:	1124      	asrs	r4, r4, #4
 8004068:	2300      	movs	r3, #0
 800406a:	2602      	movs	r6, #2
 800406c:	2c00      	cmp	r4, #0
 800406e:	f040 80b2 	bne.w	80041d6 <_dtoa_r+0x4fe>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1d3      	bne.n	800401e <_dtoa_r+0x346>
 8004076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004078:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80b7 	beq.w	80041f0 <_dtoa_r+0x518>
 8004082:	4b86      	ldr	r3, [pc, #536]	@ (800429c <_dtoa_r+0x5c4>)
 8004084:	2200      	movs	r2, #0
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc fd27 	bl	8000adc <__aeabi_dcmplt>
 800408e:	2800      	cmp	r0, #0
 8004090:	f000 80ae 	beq.w	80041f0 <_dtoa_r+0x518>
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80aa 	beq.w	80041f0 <_dtoa_r+0x518>
 800409c:	9b00      	ldr	r3, [sp, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dd37      	ble.n	8004112 <_dtoa_r+0x43a>
 80040a2:	1e7b      	subs	r3, r7, #1
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	4620      	mov	r0, r4
 80040a8:	4b7d      	ldr	r3, [pc, #500]	@ (80042a0 <_dtoa_r+0x5c8>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	4629      	mov	r1, r5
 80040ae:	f7fc faa3 	bl	80005f8 <__aeabi_dmul>
 80040b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040b6:	9c00      	ldr	r4, [sp, #0]
 80040b8:	3601      	adds	r6, #1
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7fc fa32 	bl	8000524 <__aeabi_i2d>
 80040c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c4:	f7fc fa98 	bl	80005f8 <__aeabi_dmul>
 80040c8:	4b76      	ldr	r3, [pc, #472]	@ (80042a4 <_dtoa_r+0x5cc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	f7fc f8de 	bl	800028c <__adddf3>
 80040d0:	4605      	mov	r5, r0
 80040d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80040d6:	2c00      	cmp	r4, #0
 80040d8:	f040 808d 	bne.w	80041f6 <_dtoa_r+0x51e>
 80040dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e0:	4b71      	ldr	r3, [pc, #452]	@ (80042a8 <_dtoa_r+0x5d0>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	f7fc f8d0 	bl	8000288 <__aeabi_dsub>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040f0:	462a      	mov	r2, r5
 80040f2:	4633      	mov	r3, r6
 80040f4:	f7fc fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	f040 828b 	bne.w	8004614 <_dtoa_r+0x93c>
 80040fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004102:	462a      	mov	r2, r5
 8004104:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004108:	f7fc fce8 	bl	8000adc <__aeabi_dcmplt>
 800410c:	2800      	cmp	r0, #0
 800410e:	f040 8128 	bne.w	8004362 <_dtoa_r+0x68a>
 8004112:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004116:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800411a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800411c:	2b00      	cmp	r3, #0
 800411e:	f2c0 815a 	blt.w	80043d6 <_dtoa_r+0x6fe>
 8004122:	2f0e      	cmp	r7, #14
 8004124:	f300 8157 	bgt.w	80043d6 <_dtoa_r+0x6fe>
 8004128:	4b5a      	ldr	r3, [pc, #360]	@ (8004294 <_dtoa_r+0x5bc>)
 800412a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800412e:	ed93 7b00 	vldr	d7, [r3]
 8004132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	ed8d 7b00 	vstr	d7, [sp]
 800413a:	da03      	bge.n	8004144 <_dtoa_r+0x46c>
 800413c:	9b07      	ldr	r3, [sp, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f340 8101 	ble.w	8004346 <_dtoa_r+0x66e>
 8004144:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004148:	4656      	mov	r6, sl
 800414a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800414e:	4620      	mov	r0, r4
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc fb7b 	bl	800084c <__aeabi_ddiv>
 8004156:	f7fc fcff 	bl	8000b58 <__aeabi_d2iz>
 800415a:	4680      	mov	r8, r0
 800415c:	f7fc f9e2 	bl	8000524 <__aeabi_i2d>
 8004160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004164:	f7fc fa48 	bl	80005f8 <__aeabi_dmul>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4620      	mov	r0, r4
 800416e:	4629      	mov	r1, r5
 8004170:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004174:	f7fc f888 	bl	8000288 <__aeabi_dsub>
 8004178:	f806 4b01 	strb.w	r4, [r6], #1
 800417c:	9d07      	ldr	r5, [sp, #28]
 800417e:	eba6 040a 	sub.w	r4, r6, sl
 8004182:	42a5      	cmp	r5, r4
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	f040 8117 	bne.w	80043ba <_dtoa_r+0x6e2>
 800418c:	f7fc f87e 	bl	800028c <__adddf3>
 8004190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004194:	4604      	mov	r4, r0
 8004196:	460d      	mov	r5, r1
 8004198:	f7fc fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800419c:	2800      	cmp	r0, #0
 800419e:	f040 80f9 	bne.w	8004394 <_dtoa_r+0x6bc>
 80041a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041a6:	4620      	mov	r0, r4
 80041a8:	4629      	mov	r1, r5
 80041aa:	f7fc fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80041ae:	b118      	cbz	r0, 80041b8 <_dtoa_r+0x4e0>
 80041b0:	f018 0f01 	tst.w	r8, #1
 80041b4:	f040 80ee 	bne.w	8004394 <_dtoa_r+0x6bc>
 80041b8:	4649      	mov	r1, r9
 80041ba:	4658      	mov	r0, fp
 80041bc:	f000 fc90 	bl	8004ae0 <_Bfree>
 80041c0:	2300      	movs	r3, #0
 80041c2:	7033      	strb	r3, [r6, #0]
 80041c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80041c6:	3701      	adds	r7, #1
 80041c8:	601f      	str	r7, [r3, #0]
 80041ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 831d 	beq.w	800480c <_dtoa_r+0xb34>
 80041d2:	601e      	str	r6, [r3, #0]
 80041d4:	e31a      	b.n	800480c <_dtoa_r+0xb34>
 80041d6:	07e2      	lsls	r2, r4, #31
 80041d8:	d505      	bpl.n	80041e6 <_dtoa_r+0x50e>
 80041da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041de:	f7fc fa0b 	bl	80005f8 <__aeabi_dmul>
 80041e2:	3601      	adds	r6, #1
 80041e4:	2301      	movs	r3, #1
 80041e6:	1064      	asrs	r4, r4, #1
 80041e8:	3508      	adds	r5, #8
 80041ea:	e73f      	b.n	800406c <_dtoa_r+0x394>
 80041ec:	2602      	movs	r6, #2
 80041ee:	e742      	b.n	8004076 <_dtoa_r+0x39e>
 80041f0:	9c07      	ldr	r4, [sp, #28]
 80041f2:	9704      	str	r7, [sp, #16]
 80041f4:	e761      	b.n	80040ba <_dtoa_r+0x3e2>
 80041f6:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <_dtoa_r+0x5bc>)
 80041f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004202:	4454      	add	r4, sl
 8004204:	2900      	cmp	r1, #0
 8004206:	d053      	beq.n	80042b0 <_dtoa_r+0x5d8>
 8004208:	4928      	ldr	r1, [pc, #160]	@ (80042ac <_dtoa_r+0x5d4>)
 800420a:	2000      	movs	r0, #0
 800420c:	f7fc fb1e 	bl	800084c <__aeabi_ddiv>
 8004210:	4633      	mov	r3, r6
 8004212:	462a      	mov	r2, r5
 8004214:	f7fc f838 	bl	8000288 <__aeabi_dsub>
 8004218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800421c:	4656      	mov	r6, sl
 800421e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004222:	f7fc fc99 	bl	8000b58 <__aeabi_d2iz>
 8004226:	4605      	mov	r5, r0
 8004228:	f7fc f97c 	bl	8000524 <__aeabi_i2d>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004234:	f7fc f828 	bl	8000288 <__aeabi_dsub>
 8004238:	3530      	adds	r5, #48	@ 0x30
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004242:	f806 5b01 	strb.w	r5, [r6], #1
 8004246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800424a:	f7fc fc47 	bl	8000adc <__aeabi_dcmplt>
 800424e:	2800      	cmp	r0, #0
 8004250:	d171      	bne.n	8004336 <_dtoa_r+0x65e>
 8004252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004256:	4911      	ldr	r1, [pc, #68]	@ (800429c <_dtoa_r+0x5c4>)
 8004258:	2000      	movs	r0, #0
 800425a:	f7fc f815 	bl	8000288 <__aeabi_dsub>
 800425e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004262:	f7fc fc3b 	bl	8000adc <__aeabi_dcmplt>
 8004266:	2800      	cmp	r0, #0
 8004268:	f040 8095 	bne.w	8004396 <_dtoa_r+0x6be>
 800426c:	42a6      	cmp	r6, r4
 800426e:	f43f af50 	beq.w	8004112 <_dtoa_r+0x43a>
 8004272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004276:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <_dtoa_r+0x5c8>)
 8004278:	2200      	movs	r2, #0
 800427a:	f7fc f9bd 	bl	80005f8 <__aeabi_dmul>
 800427e:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <_dtoa_r+0x5c8>)
 8004280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004284:	2200      	movs	r2, #0
 8004286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800428a:	f7fc f9b5 	bl	80005f8 <__aeabi_dmul>
 800428e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004292:	e7c4      	b.n	800421e <_dtoa_r+0x546>
 8004294:	08005df8 	.word	0x08005df8
 8004298:	08005dd0 	.word	0x08005dd0
 800429c:	3ff00000 	.word	0x3ff00000
 80042a0:	40240000 	.word	0x40240000
 80042a4:	401c0000 	.word	0x401c0000
 80042a8:	40140000 	.word	0x40140000
 80042ac:	3fe00000 	.word	0x3fe00000
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7fc f9a0 	bl	80005f8 <__aeabi_dmul>
 80042b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80042be:	4656      	mov	r6, sl
 80042c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c4:	f7fc fc48 	bl	8000b58 <__aeabi_d2iz>
 80042c8:	4605      	mov	r5, r0
 80042ca:	f7fc f92b 	bl	8000524 <__aeabi_i2d>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042d6:	f7fb ffd7 	bl	8000288 <__aeabi_dsub>
 80042da:	3530      	adds	r5, #48	@ 0x30
 80042dc:	f806 5b01 	strb.w	r5, [r6], #1
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	d124      	bne.n	800433a <_dtoa_r+0x662>
 80042f0:	4bac      	ldr	r3, [pc, #688]	@ (80045a4 <_dtoa_r+0x8cc>)
 80042f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80042f6:	f7fb ffc9 	bl	800028c <__adddf3>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004302:	f7fc fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8004306:	2800      	cmp	r0, #0
 8004308:	d145      	bne.n	8004396 <_dtoa_r+0x6be>
 800430a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800430e:	49a5      	ldr	r1, [pc, #660]	@ (80045a4 <_dtoa_r+0x8cc>)
 8004310:	2000      	movs	r0, #0
 8004312:	f7fb ffb9 	bl	8000288 <__aeabi_dsub>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800431e:	f7fc fbdd 	bl	8000adc <__aeabi_dcmplt>
 8004322:	2800      	cmp	r0, #0
 8004324:	f43f aef5 	beq.w	8004112 <_dtoa_r+0x43a>
 8004328:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800432a:	1e73      	subs	r3, r6, #1
 800432c:	9315      	str	r3, [sp, #84]	@ 0x54
 800432e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004332:	2b30      	cmp	r3, #48	@ 0x30
 8004334:	d0f8      	beq.n	8004328 <_dtoa_r+0x650>
 8004336:	9f04      	ldr	r7, [sp, #16]
 8004338:	e73e      	b.n	80041b8 <_dtoa_r+0x4e0>
 800433a:	4b9b      	ldr	r3, [pc, #620]	@ (80045a8 <_dtoa_r+0x8d0>)
 800433c:	f7fc f95c 	bl	80005f8 <__aeabi_dmul>
 8004340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004344:	e7bc      	b.n	80042c0 <_dtoa_r+0x5e8>
 8004346:	d10c      	bne.n	8004362 <_dtoa_r+0x68a>
 8004348:	4b98      	ldr	r3, [pc, #608]	@ (80045ac <_dtoa_r+0x8d4>)
 800434a:	2200      	movs	r2, #0
 800434c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004350:	f7fc f952 	bl	80005f8 <__aeabi_dmul>
 8004354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004358:	f7fc fbd4 	bl	8000b04 <__aeabi_dcmpge>
 800435c:	2800      	cmp	r0, #0
 800435e:	f000 8157 	beq.w	8004610 <_dtoa_r+0x938>
 8004362:	2400      	movs	r4, #0
 8004364:	4625      	mov	r5, r4
 8004366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004368:	43db      	mvns	r3, r3
 800436a:	9304      	str	r3, [sp, #16]
 800436c:	4656      	mov	r6, sl
 800436e:	2700      	movs	r7, #0
 8004370:	4621      	mov	r1, r4
 8004372:	4658      	mov	r0, fp
 8004374:	f000 fbb4 	bl	8004ae0 <_Bfree>
 8004378:	2d00      	cmp	r5, #0
 800437a:	d0dc      	beq.n	8004336 <_dtoa_r+0x65e>
 800437c:	b12f      	cbz	r7, 800438a <_dtoa_r+0x6b2>
 800437e:	42af      	cmp	r7, r5
 8004380:	d003      	beq.n	800438a <_dtoa_r+0x6b2>
 8004382:	4639      	mov	r1, r7
 8004384:	4658      	mov	r0, fp
 8004386:	f000 fbab 	bl	8004ae0 <_Bfree>
 800438a:	4629      	mov	r1, r5
 800438c:	4658      	mov	r0, fp
 800438e:	f000 fba7 	bl	8004ae0 <_Bfree>
 8004392:	e7d0      	b.n	8004336 <_dtoa_r+0x65e>
 8004394:	9704      	str	r7, [sp, #16]
 8004396:	4633      	mov	r3, r6
 8004398:	461e      	mov	r6, r3
 800439a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800439e:	2a39      	cmp	r2, #57	@ 0x39
 80043a0:	d107      	bne.n	80043b2 <_dtoa_r+0x6da>
 80043a2:	459a      	cmp	sl, r3
 80043a4:	d1f8      	bne.n	8004398 <_dtoa_r+0x6c0>
 80043a6:	9a04      	ldr	r2, [sp, #16]
 80043a8:	3201      	adds	r2, #1
 80043aa:	9204      	str	r2, [sp, #16]
 80043ac:	2230      	movs	r2, #48	@ 0x30
 80043ae:	f88a 2000 	strb.w	r2, [sl]
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	3201      	adds	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e7bd      	b.n	8004336 <_dtoa_r+0x65e>
 80043ba:	4b7b      	ldr	r3, [pc, #492]	@ (80045a8 <_dtoa_r+0x8d0>)
 80043bc:	2200      	movs	r2, #0
 80043be:	f7fc f91b 	bl	80005f8 <__aeabi_dmul>
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	460d      	mov	r5, r1
 80043ca:	f7fc fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f43f aebb 	beq.w	800414a <_dtoa_r+0x472>
 80043d4:	e6f0      	b.n	80041b8 <_dtoa_r+0x4e0>
 80043d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80043d8:	2a00      	cmp	r2, #0
 80043da:	f000 80db 	beq.w	8004594 <_dtoa_r+0x8bc>
 80043de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043e0:	2a01      	cmp	r2, #1
 80043e2:	f300 80bf 	bgt.w	8004564 <_dtoa_r+0x88c>
 80043e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	f000 80b7 	beq.w	800455c <_dtoa_r+0x884>
 80043ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80043f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80043f4:	4646      	mov	r6, r8
 80043f6:	9a08      	ldr	r2, [sp, #32]
 80043f8:	2101      	movs	r1, #1
 80043fa:	441a      	add	r2, r3
 80043fc:	4658      	mov	r0, fp
 80043fe:	4498      	add	r8, r3
 8004400:	9208      	str	r2, [sp, #32]
 8004402:	f000 fc21 	bl	8004c48 <__i2b>
 8004406:	4605      	mov	r5, r0
 8004408:	b15e      	cbz	r6, 8004422 <_dtoa_r+0x74a>
 800440a:	9b08      	ldr	r3, [sp, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	dd08      	ble.n	8004422 <_dtoa_r+0x74a>
 8004410:	42b3      	cmp	r3, r6
 8004412:	9a08      	ldr	r2, [sp, #32]
 8004414:	bfa8      	it	ge
 8004416:	4633      	movge	r3, r6
 8004418:	eba8 0803 	sub.w	r8, r8, r3
 800441c:	1af6      	subs	r6, r6, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	9308      	str	r3, [sp, #32]
 8004422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004424:	b1f3      	cbz	r3, 8004464 <_dtoa_r+0x78c>
 8004426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80b7 	beq.w	800459c <_dtoa_r+0x8c4>
 800442e:	b18c      	cbz	r4, 8004454 <_dtoa_r+0x77c>
 8004430:	4629      	mov	r1, r5
 8004432:	4622      	mov	r2, r4
 8004434:	4658      	mov	r0, fp
 8004436:	f000 fcc7 	bl	8004dc8 <__pow5mult>
 800443a:	464a      	mov	r2, r9
 800443c:	4601      	mov	r1, r0
 800443e:	4605      	mov	r5, r0
 8004440:	4658      	mov	r0, fp
 8004442:	f000 fc17 	bl	8004c74 <__multiply>
 8004446:	4649      	mov	r1, r9
 8004448:	9004      	str	r0, [sp, #16]
 800444a:	4658      	mov	r0, fp
 800444c:	f000 fb48 	bl	8004ae0 <_Bfree>
 8004450:	9b04      	ldr	r3, [sp, #16]
 8004452:	4699      	mov	r9, r3
 8004454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004456:	1b1a      	subs	r2, r3, r4
 8004458:	d004      	beq.n	8004464 <_dtoa_r+0x78c>
 800445a:	4649      	mov	r1, r9
 800445c:	4658      	mov	r0, fp
 800445e:	f000 fcb3 	bl	8004dc8 <__pow5mult>
 8004462:	4681      	mov	r9, r0
 8004464:	2101      	movs	r1, #1
 8004466:	4658      	mov	r0, fp
 8004468:	f000 fbee 	bl	8004c48 <__i2b>
 800446c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800446e:	4604      	mov	r4, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 81cf 	beq.w	8004814 <_dtoa_r+0xb3c>
 8004476:	461a      	mov	r2, r3
 8004478:	4601      	mov	r1, r0
 800447a:	4658      	mov	r0, fp
 800447c:	f000 fca4 	bl	8004dc8 <__pow5mult>
 8004480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004482:	2b01      	cmp	r3, #1
 8004484:	4604      	mov	r4, r0
 8004486:	f300 8095 	bgt.w	80045b4 <_dtoa_r+0x8dc>
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 8087 	bne.w	80045a0 <_dtoa_r+0x8c8>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8089 	bne.w	80045b0 <_dtoa_r+0x8d8>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a4:	0d1b      	lsrs	r3, r3, #20
 80044a6:	051b      	lsls	r3, r3, #20
 80044a8:	b12b      	cbz	r3, 80044b6 <_dtoa_r+0x7de>
 80044aa:	9b08      	ldr	r3, [sp, #32]
 80044ac:	3301      	adds	r3, #1
 80044ae:	9308      	str	r3, [sp, #32]
 80044b0:	f108 0801 	add.w	r8, r8, #1
 80044b4:	2301      	movs	r3, #1
 80044b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 81b0 	beq.w	8004820 <_dtoa_r+0xb48>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044c6:	6918      	ldr	r0, [r3, #16]
 80044c8:	f000 fb72 	bl	8004bb0 <__hi0bits>
 80044cc:	f1c0 0020 	rsb	r0, r0, #32
 80044d0:	9b08      	ldr	r3, [sp, #32]
 80044d2:	4418      	add	r0, r3
 80044d4:	f010 001f 	ands.w	r0, r0, #31
 80044d8:	d077      	beq.n	80045ca <_dtoa_r+0x8f2>
 80044da:	f1c0 0320 	rsb	r3, r0, #32
 80044de:	2b04      	cmp	r3, #4
 80044e0:	dd6b      	ble.n	80045ba <_dtoa_r+0x8e2>
 80044e2:	9b08      	ldr	r3, [sp, #32]
 80044e4:	f1c0 001c 	rsb	r0, r0, #28
 80044e8:	4403      	add	r3, r0
 80044ea:	4480      	add	r8, r0
 80044ec:	4406      	add	r6, r0
 80044ee:	9308      	str	r3, [sp, #32]
 80044f0:	f1b8 0f00 	cmp.w	r8, #0
 80044f4:	dd05      	ble.n	8004502 <_dtoa_r+0x82a>
 80044f6:	4649      	mov	r1, r9
 80044f8:	4642      	mov	r2, r8
 80044fa:	4658      	mov	r0, fp
 80044fc:	f000 fcbe 	bl	8004e7c <__lshift>
 8004500:	4681      	mov	r9, r0
 8004502:	9b08      	ldr	r3, [sp, #32]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dd05      	ble.n	8004514 <_dtoa_r+0x83c>
 8004508:	4621      	mov	r1, r4
 800450a:	461a      	mov	r2, r3
 800450c:	4658      	mov	r0, fp
 800450e:	f000 fcb5 	bl	8004e7c <__lshift>
 8004512:	4604      	mov	r4, r0
 8004514:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004516:	2b00      	cmp	r3, #0
 8004518:	d059      	beq.n	80045ce <_dtoa_r+0x8f6>
 800451a:	4621      	mov	r1, r4
 800451c:	4648      	mov	r0, r9
 800451e:	f000 fd19 	bl	8004f54 <__mcmp>
 8004522:	2800      	cmp	r0, #0
 8004524:	da53      	bge.n	80045ce <_dtoa_r+0x8f6>
 8004526:	1e7b      	subs	r3, r7, #1
 8004528:	9304      	str	r3, [sp, #16]
 800452a:	4649      	mov	r1, r9
 800452c:	2300      	movs	r3, #0
 800452e:	220a      	movs	r2, #10
 8004530:	4658      	mov	r0, fp
 8004532:	f000 faf7 	bl	8004b24 <__multadd>
 8004536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004538:	4681      	mov	r9, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8172 	beq.w	8004824 <_dtoa_r+0xb4c>
 8004540:	2300      	movs	r3, #0
 8004542:	4629      	mov	r1, r5
 8004544:	220a      	movs	r2, #10
 8004546:	4658      	mov	r0, fp
 8004548:	f000 faec 	bl	8004b24 <__multadd>
 800454c:	9b00      	ldr	r3, [sp, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	4605      	mov	r5, r0
 8004552:	dc67      	bgt.n	8004624 <_dtoa_r+0x94c>
 8004554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004556:	2b02      	cmp	r3, #2
 8004558:	dc41      	bgt.n	80045de <_dtoa_r+0x906>
 800455a:	e063      	b.n	8004624 <_dtoa_r+0x94c>
 800455c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800455e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004562:	e746      	b.n	80043f2 <_dtoa_r+0x71a>
 8004564:	9b07      	ldr	r3, [sp, #28]
 8004566:	1e5c      	subs	r4, r3, #1
 8004568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800456a:	42a3      	cmp	r3, r4
 800456c:	bfbf      	itttt	lt
 800456e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004570:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004572:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004574:	1ae3      	sublt	r3, r4, r3
 8004576:	bfb4      	ite	lt
 8004578:	18d2      	addlt	r2, r2, r3
 800457a:	1b1c      	subge	r4, r3, r4
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	bfbc      	itt	lt
 8004580:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004582:	2400      	movlt	r4, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	bfb5      	itete	lt
 8004588:	eba8 0603 	sublt.w	r6, r8, r3
 800458c:	9b07      	ldrge	r3, [sp, #28]
 800458e:	2300      	movlt	r3, #0
 8004590:	4646      	movge	r6, r8
 8004592:	e730      	b.n	80043f6 <_dtoa_r+0x71e>
 8004594:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004596:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004598:	4646      	mov	r6, r8
 800459a:	e735      	b.n	8004408 <_dtoa_r+0x730>
 800459c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800459e:	e75c      	b.n	800445a <_dtoa_r+0x782>
 80045a0:	2300      	movs	r3, #0
 80045a2:	e788      	b.n	80044b6 <_dtoa_r+0x7de>
 80045a4:	3fe00000 	.word	0x3fe00000
 80045a8:	40240000 	.word	0x40240000
 80045ac:	40140000 	.word	0x40140000
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	e780      	b.n	80044b6 <_dtoa_r+0x7de>
 80045b4:	2300      	movs	r3, #0
 80045b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80045b8:	e782      	b.n	80044c0 <_dtoa_r+0x7e8>
 80045ba:	d099      	beq.n	80044f0 <_dtoa_r+0x818>
 80045bc:	9a08      	ldr	r2, [sp, #32]
 80045be:	331c      	adds	r3, #28
 80045c0:	441a      	add	r2, r3
 80045c2:	4498      	add	r8, r3
 80045c4:	441e      	add	r6, r3
 80045c6:	9208      	str	r2, [sp, #32]
 80045c8:	e792      	b.n	80044f0 <_dtoa_r+0x818>
 80045ca:	4603      	mov	r3, r0
 80045cc:	e7f6      	b.n	80045bc <_dtoa_r+0x8e4>
 80045ce:	9b07      	ldr	r3, [sp, #28]
 80045d0:	9704      	str	r7, [sp, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	dc20      	bgt.n	8004618 <_dtoa_r+0x940>
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045da:	2b02      	cmp	r3, #2
 80045dc:	dd1e      	ble.n	800461c <_dtoa_r+0x944>
 80045de:	9b00      	ldr	r3, [sp, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f47f aec0 	bne.w	8004366 <_dtoa_r+0x68e>
 80045e6:	4621      	mov	r1, r4
 80045e8:	2205      	movs	r2, #5
 80045ea:	4658      	mov	r0, fp
 80045ec:	f000 fa9a 	bl	8004b24 <__multadd>
 80045f0:	4601      	mov	r1, r0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4648      	mov	r0, r9
 80045f6:	f000 fcad 	bl	8004f54 <__mcmp>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	f77f aeb3 	ble.w	8004366 <_dtoa_r+0x68e>
 8004600:	4656      	mov	r6, sl
 8004602:	2331      	movs	r3, #49	@ 0x31
 8004604:	f806 3b01 	strb.w	r3, [r6], #1
 8004608:	9b04      	ldr	r3, [sp, #16]
 800460a:	3301      	adds	r3, #1
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	e6ae      	b.n	800436e <_dtoa_r+0x696>
 8004610:	9c07      	ldr	r4, [sp, #28]
 8004612:	9704      	str	r7, [sp, #16]
 8004614:	4625      	mov	r5, r4
 8004616:	e7f3      	b.n	8004600 <_dtoa_r+0x928>
 8004618:	9b07      	ldr	r3, [sp, #28]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8104 	beq.w	800482c <_dtoa_r+0xb54>
 8004624:	2e00      	cmp	r6, #0
 8004626:	dd05      	ble.n	8004634 <_dtoa_r+0x95c>
 8004628:	4629      	mov	r1, r5
 800462a:	4632      	mov	r2, r6
 800462c:	4658      	mov	r0, fp
 800462e:	f000 fc25 	bl	8004e7c <__lshift>
 8004632:	4605      	mov	r5, r0
 8004634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d05a      	beq.n	80046f0 <_dtoa_r+0xa18>
 800463a:	6869      	ldr	r1, [r5, #4]
 800463c:	4658      	mov	r0, fp
 800463e:	f000 fa0f 	bl	8004a60 <_Balloc>
 8004642:	4606      	mov	r6, r0
 8004644:	b928      	cbnz	r0, 8004652 <_dtoa_r+0x97a>
 8004646:	4b84      	ldr	r3, [pc, #528]	@ (8004858 <_dtoa_r+0xb80>)
 8004648:	4602      	mov	r2, r0
 800464a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800464e:	f7ff bb5a 	b.w	8003d06 <_dtoa_r+0x2e>
 8004652:	692a      	ldr	r2, [r5, #16]
 8004654:	3202      	adds	r2, #2
 8004656:	0092      	lsls	r2, r2, #2
 8004658:	f105 010c 	add.w	r1, r5, #12
 800465c:	300c      	adds	r0, #12
 800465e:	f000 ffaf 	bl	80055c0 <memcpy>
 8004662:	2201      	movs	r2, #1
 8004664:	4631      	mov	r1, r6
 8004666:	4658      	mov	r0, fp
 8004668:	f000 fc08 	bl	8004e7c <__lshift>
 800466c:	f10a 0301 	add.w	r3, sl, #1
 8004670:	9307      	str	r3, [sp, #28]
 8004672:	9b00      	ldr	r3, [sp, #0]
 8004674:	4453      	add	r3, sl
 8004676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	462f      	mov	r7, r5
 8004680:	930a      	str	r3, [sp, #40]	@ 0x28
 8004682:	4605      	mov	r5, r0
 8004684:	9b07      	ldr	r3, [sp, #28]
 8004686:	4621      	mov	r1, r4
 8004688:	3b01      	subs	r3, #1
 800468a:	4648      	mov	r0, r9
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	f7ff fa98 	bl	8003bc2 <quorem>
 8004692:	4639      	mov	r1, r7
 8004694:	9002      	str	r0, [sp, #8]
 8004696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800469a:	4648      	mov	r0, r9
 800469c:	f000 fc5a 	bl	8004f54 <__mcmp>
 80046a0:	462a      	mov	r2, r5
 80046a2:	9008      	str	r0, [sp, #32]
 80046a4:	4621      	mov	r1, r4
 80046a6:	4658      	mov	r0, fp
 80046a8:	f000 fc70 	bl	8004f8c <__mdiff>
 80046ac:	68c2      	ldr	r2, [r0, #12]
 80046ae:	4606      	mov	r6, r0
 80046b0:	bb02      	cbnz	r2, 80046f4 <_dtoa_r+0xa1c>
 80046b2:	4601      	mov	r1, r0
 80046b4:	4648      	mov	r0, r9
 80046b6:	f000 fc4d 	bl	8004f54 <__mcmp>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4631      	mov	r1, r6
 80046be:	4658      	mov	r0, fp
 80046c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80046c2:	f000 fa0d 	bl	8004ae0 <_Bfree>
 80046c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046ca:	9e07      	ldr	r6, [sp, #28]
 80046cc:	ea43 0102 	orr.w	r1, r3, r2
 80046d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046d2:	4319      	orrs	r1, r3
 80046d4:	d110      	bne.n	80046f8 <_dtoa_r+0xa20>
 80046d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80046da:	d029      	beq.n	8004730 <_dtoa_r+0xa58>
 80046dc:	9b08      	ldr	r3, [sp, #32]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	dd02      	ble.n	80046e8 <_dtoa_r+0xa10>
 80046e2:	9b02      	ldr	r3, [sp, #8]
 80046e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80046e8:	9b00      	ldr	r3, [sp, #0]
 80046ea:	f883 8000 	strb.w	r8, [r3]
 80046ee:	e63f      	b.n	8004370 <_dtoa_r+0x698>
 80046f0:	4628      	mov	r0, r5
 80046f2:	e7bb      	b.n	800466c <_dtoa_r+0x994>
 80046f4:	2201      	movs	r2, #1
 80046f6:	e7e1      	b.n	80046bc <_dtoa_r+0x9e4>
 80046f8:	9b08      	ldr	r3, [sp, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db04      	blt.n	8004708 <_dtoa_r+0xa30>
 80046fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004700:	430b      	orrs	r3, r1
 8004702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004704:	430b      	orrs	r3, r1
 8004706:	d120      	bne.n	800474a <_dtoa_r+0xa72>
 8004708:	2a00      	cmp	r2, #0
 800470a:	dded      	ble.n	80046e8 <_dtoa_r+0xa10>
 800470c:	4649      	mov	r1, r9
 800470e:	2201      	movs	r2, #1
 8004710:	4658      	mov	r0, fp
 8004712:	f000 fbb3 	bl	8004e7c <__lshift>
 8004716:	4621      	mov	r1, r4
 8004718:	4681      	mov	r9, r0
 800471a:	f000 fc1b 	bl	8004f54 <__mcmp>
 800471e:	2800      	cmp	r0, #0
 8004720:	dc03      	bgt.n	800472a <_dtoa_r+0xa52>
 8004722:	d1e1      	bne.n	80046e8 <_dtoa_r+0xa10>
 8004724:	f018 0f01 	tst.w	r8, #1
 8004728:	d0de      	beq.n	80046e8 <_dtoa_r+0xa10>
 800472a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800472e:	d1d8      	bne.n	80046e2 <_dtoa_r+0xa0a>
 8004730:	9a00      	ldr	r2, [sp, #0]
 8004732:	2339      	movs	r3, #57	@ 0x39
 8004734:	7013      	strb	r3, [r2, #0]
 8004736:	4633      	mov	r3, r6
 8004738:	461e      	mov	r6, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004740:	2a39      	cmp	r2, #57	@ 0x39
 8004742:	d052      	beq.n	80047ea <_dtoa_r+0xb12>
 8004744:	3201      	adds	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e612      	b.n	8004370 <_dtoa_r+0x698>
 800474a:	2a00      	cmp	r2, #0
 800474c:	dd07      	ble.n	800475e <_dtoa_r+0xa86>
 800474e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004752:	d0ed      	beq.n	8004730 <_dtoa_r+0xa58>
 8004754:	9a00      	ldr	r2, [sp, #0]
 8004756:	f108 0301 	add.w	r3, r8, #1
 800475a:	7013      	strb	r3, [r2, #0]
 800475c:	e608      	b.n	8004370 <_dtoa_r+0x698>
 800475e:	9b07      	ldr	r3, [sp, #28]
 8004760:	9a07      	ldr	r2, [sp, #28]
 8004762:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004768:	4293      	cmp	r3, r2
 800476a:	d028      	beq.n	80047be <_dtoa_r+0xae6>
 800476c:	4649      	mov	r1, r9
 800476e:	2300      	movs	r3, #0
 8004770:	220a      	movs	r2, #10
 8004772:	4658      	mov	r0, fp
 8004774:	f000 f9d6 	bl	8004b24 <__multadd>
 8004778:	42af      	cmp	r7, r5
 800477a:	4681      	mov	r9, r0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	f04f 020a 	mov.w	r2, #10
 8004784:	4639      	mov	r1, r7
 8004786:	4658      	mov	r0, fp
 8004788:	d107      	bne.n	800479a <_dtoa_r+0xac2>
 800478a:	f000 f9cb 	bl	8004b24 <__multadd>
 800478e:	4607      	mov	r7, r0
 8004790:	4605      	mov	r5, r0
 8004792:	9b07      	ldr	r3, [sp, #28]
 8004794:	3301      	adds	r3, #1
 8004796:	9307      	str	r3, [sp, #28]
 8004798:	e774      	b.n	8004684 <_dtoa_r+0x9ac>
 800479a:	f000 f9c3 	bl	8004b24 <__multadd>
 800479e:	4629      	mov	r1, r5
 80047a0:	4607      	mov	r7, r0
 80047a2:	2300      	movs	r3, #0
 80047a4:	220a      	movs	r2, #10
 80047a6:	4658      	mov	r0, fp
 80047a8:	f000 f9bc 	bl	8004b24 <__multadd>
 80047ac:	4605      	mov	r5, r0
 80047ae:	e7f0      	b.n	8004792 <_dtoa_r+0xaba>
 80047b0:	9b00      	ldr	r3, [sp, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfcc      	ite	gt
 80047b6:	461e      	movgt	r6, r3
 80047b8:	2601      	movle	r6, #1
 80047ba:	4456      	add	r6, sl
 80047bc:	2700      	movs	r7, #0
 80047be:	4649      	mov	r1, r9
 80047c0:	2201      	movs	r2, #1
 80047c2:	4658      	mov	r0, fp
 80047c4:	f000 fb5a 	bl	8004e7c <__lshift>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4681      	mov	r9, r0
 80047cc:	f000 fbc2 	bl	8004f54 <__mcmp>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	dcb0      	bgt.n	8004736 <_dtoa_r+0xa5e>
 80047d4:	d102      	bne.n	80047dc <_dtoa_r+0xb04>
 80047d6:	f018 0f01 	tst.w	r8, #1
 80047da:	d1ac      	bne.n	8004736 <_dtoa_r+0xa5e>
 80047dc:	4633      	mov	r3, r6
 80047de:	461e      	mov	r6, r3
 80047e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047e4:	2a30      	cmp	r2, #48	@ 0x30
 80047e6:	d0fa      	beq.n	80047de <_dtoa_r+0xb06>
 80047e8:	e5c2      	b.n	8004370 <_dtoa_r+0x698>
 80047ea:	459a      	cmp	sl, r3
 80047ec:	d1a4      	bne.n	8004738 <_dtoa_r+0xa60>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	3301      	adds	r3, #1
 80047f2:	9304      	str	r3, [sp, #16]
 80047f4:	2331      	movs	r3, #49	@ 0x31
 80047f6:	f88a 3000 	strb.w	r3, [sl]
 80047fa:	e5b9      	b.n	8004370 <_dtoa_r+0x698>
 80047fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800485c <_dtoa_r+0xb84>
 8004802:	b11b      	cbz	r3, 800480c <_dtoa_r+0xb34>
 8004804:	f10a 0308 	add.w	r3, sl, #8
 8004808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4650      	mov	r0, sl
 800480e:	b019      	add	sp, #100	@ 0x64
 8004810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004816:	2b01      	cmp	r3, #1
 8004818:	f77f ae37 	ble.w	800448a <_dtoa_r+0x7b2>
 800481c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800481e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004820:	2001      	movs	r0, #1
 8004822:	e655      	b.n	80044d0 <_dtoa_r+0x7f8>
 8004824:	9b00      	ldr	r3, [sp, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f77f aed6 	ble.w	80045d8 <_dtoa_r+0x900>
 800482c:	4656      	mov	r6, sl
 800482e:	4621      	mov	r1, r4
 8004830:	4648      	mov	r0, r9
 8004832:	f7ff f9c6 	bl	8003bc2 <quorem>
 8004836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800483a:	f806 8b01 	strb.w	r8, [r6], #1
 800483e:	9b00      	ldr	r3, [sp, #0]
 8004840:	eba6 020a 	sub.w	r2, r6, sl
 8004844:	4293      	cmp	r3, r2
 8004846:	ddb3      	ble.n	80047b0 <_dtoa_r+0xad8>
 8004848:	4649      	mov	r1, r9
 800484a:	2300      	movs	r3, #0
 800484c:	220a      	movs	r2, #10
 800484e:	4658      	mov	r0, fp
 8004850:	f000 f968 	bl	8004b24 <__multadd>
 8004854:	4681      	mov	r9, r0
 8004856:	e7ea      	b.n	800482e <_dtoa_r+0xb56>
 8004858:	08005d57 	.word	0x08005d57
 800485c:	08005cdb 	.word	0x08005cdb

08004860 <_free_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4605      	mov	r5, r0
 8004864:	2900      	cmp	r1, #0
 8004866:	d041      	beq.n	80048ec <_free_r+0x8c>
 8004868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486c:	1f0c      	subs	r4, r1, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfb8      	it	lt
 8004872:	18e4      	addlt	r4, r4, r3
 8004874:	f000 f8e8 	bl	8004a48 <__malloc_lock>
 8004878:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <_free_r+0x90>)
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	b933      	cbnz	r3, 800488c <_free_r+0x2c>
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6014      	str	r4, [r2, #0]
 8004882:	4628      	mov	r0, r5
 8004884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004888:	f000 b8e4 	b.w	8004a54 <__malloc_unlock>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d908      	bls.n	80048a2 <_free_r+0x42>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428b      	cmp	r3, r1
 8004896:	bf01      	itttt	eq
 8004898:	6819      	ldreq	r1, [r3, #0]
 800489a:	685b      	ldreq	r3, [r3, #4]
 800489c:	1809      	addeq	r1, r1, r0
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	e7ed      	b.n	800487e <_free_r+0x1e>
 80048a2:	461a      	mov	r2, r3
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b10b      	cbz	r3, 80048ac <_free_r+0x4c>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d9fa      	bls.n	80048a2 <_free_r+0x42>
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	1850      	adds	r0, r2, r1
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d10b      	bne.n	80048cc <_free_r+0x6c>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	4401      	add	r1, r0
 80048b8:	1850      	adds	r0, r2, r1
 80048ba:	4283      	cmp	r3, r0
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	d1e0      	bne.n	8004882 <_free_r+0x22>
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	6053      	str	r3, [r2, #4]
 80048c6:	4408      	add	r0, r1
 80048c8:	6010      	str	r0, [r2, #0]
 80048ca:	e7da      	b.n	8004882 <_free_r+0x22>
 80048cc:	d902      	bls.n	80048d4 <_free_r+0x74>
 80048ce:	230c      	movs	r3, #12
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	e7d6      	b.n	8004882 <_free_r+0x22>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	1821      	adds	r1, r4, r0
 80048d8:	428b      	cmp	r3, r1
 80048da:	bf04      	itt	eq
 80048dc:	6819      	ldreq	r1, [r3, #0]
 80048de:	685b      	ldreq	r3, [r3, #4]
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	bf04      	itt	eq
 80048e4:	1809      	addeq	r1, r1, r0
 80048e6:	6021      	streq	r1, [r4, #0]
 80048e8:	6054      	str	r4, [r2, #4]
 80048ea:	e7ca      	b.n	8004882 <_free_r+0x22>
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	200003cc 	.word	0x200003cc

080048f4 <malloc>:
 80048f4:	4b02      	ldr	r3, [pc, #8]	@ (8004900 <malloc+0xc>)
 80048f6:	4601      	mov	r1, r0
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	f000 b825 	b.w	8004948 <_malloc_r>
 80048fe:	bf00      	nop
 8004900:	20000010 	.word	0x20000010

08004904 <sbrk_aligned>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4e0f      	ldr	r6, [pc, #60]	@ (8004944 <sbrk_aligned+0x40>)
 8004908:	460c      	mov	r4, r1
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	4605      	mov	r5, r0
 800490e:	b911      	cbnz	r1, 8004916 <sbrk_aligned+0x12>
 8004910:	f000 fe46 	bl	80055a0 <_sbrk_r>
 8004914:	6030      	str	r0, [r6, #0]
 8004916:	4621      	mov	r1, r4
 8004918:	4628      	mov	r0, r5
 800491a:	f000 fe41 	bl	80055a0 <_sbrk_r>
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	d103      	bne.n	800492a <sbrk_aligned+0x26>
 8004922:	f04f 34ff 	mov.w	r4, #4294967295
 8004926:	4620      	mov	r0, r4
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	1cc4      	adds	r4, r0, #3
 800492c:	f024 0403 	bic.w	r4, r4, #3
 8004930:	42a0      	cmp	r0, r4
 8004932:	d0f8      	beq.n	8004926 <sbrk_aligned+0x22>
 8004934:	1a21      	subs	r1, r4, r0
 8004936:	4628      	mov	r0, r5
 8004938:	f000 fe32 	bl	80055a0 <_sbrk_r>
 800493c:	3001      	adds	r0, #1
 800493e:	d1f2      	bne.n	8004926 <sbrk_aligned+0x22>
 8004940:	e7ef      	b.n	8004922 <sbrk_aligned+0x1e>
 8004942:	bf00      	nop
 8004944:	200003c8 	.word	0x200003c8

08004948 <_malloc_r>:
 8004948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800494c:	1ccd      	adds	r5, r1, #3
 800494e:	f025 0503 	bic.w	r5, r5, #3
 8004952:	3508      	adds	r5, #8
 8004954:	2d0c      	cmp	r5, #12
 8004956:	bf38      	it	cc
 8004958:	250c      	movcc	r5, #12
 800495a:	2d00      	cmp	r5, #0
 800495c:	4606      	mov	r6, r0
 800495e:	db01      	blt.n	8004964 <_malloc_r+0x1c>
 8004960:	42a9      	cmp	r1, r5
 8004962:	d904      	bls.n	800496e <_malloc_r+0x26>
 8004964:	230c      	movs	r3, #12
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	2000      	movs	r0, #0
 800496a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800496e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a44 <_malloc_r+0xfc>
 8004972:	f000 f869 	bl	8004a48 <__malloc_lock>
 8004976:	f8d8 3000 	ldr.w	r3, [r8]
 800497a:	461c      	mov	r4, r3
 800497c:	bb44      	cbnz	r4, 80049d0 <_malloc_r+0x88>
 800497e:	4629      	mov	r1, r5
 8004980:	4630      	mov	r0, r6
 8004982:	f7ff ffbf 	bl	8004904 <sbrk_aligned>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	4604      	mov	r4, r0
 800498a:	d158      	bne.n	8004a3e <_malloc_r+0xf6>
 800498c:	f8d8 4000 	ldr.w	r4, [r8]
 8004990:	4627      	mov	r7, r4
 8004992:	2f00      	cmp	r7, #0
 8004994:	d143      	bne.n	8004a1e <_malloc_r+0xd6>
 8004996:	2c00      	cmp	r4, #0
 8004998:	d04b      	beq.n	8004a32 <_malloc_r+0xea>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	4639      	mov	r1, r7
 800499e:	4630      	mov	r0, r6
 80049a0:	eb04 0903 	add.w	r9, r4, r3
 80049a4:	f000 fdfc 	bl	80055a0 <_sbrk_r>
 80049a8:	4581      	cmp	r9, r0
 80049aa:	d142      	bne.n	8004a32 <_malloc_r+0xea>
 80049ac:	6821      	ldr	r1, [r4, #0]
 80049ae:	1a6d      	subs	r5, r5, r1
 80049b0:	4629      	mov	r1, r5
 80049b2:	4630      	mov	r0, r6
 80049b4:	f7ff ffa6 	bl	8004904 <sbrk_aligned>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d03a      	beq.n	8004a32 <_malloc_r+0xea>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	442b      	add	r3, r5
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	f8d8 3000 	ldr.w	r3, [r8]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	bb62      	cbnz	r2, 8004a24 <_malloc_r+0xdc>
 80049ca:	f8c8 7000 	str.w	r7, [r8]
 80049ce:	e00f      	b.n	80049f0 <_malloc_r+0xa8>
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	1b52      	subs	r2, r2, r5
 80049d4:	d420      	bmi.n	8004a18 <_malloc_r+0xd0>
 80049d6:	2a0b      	cmp	r2, #11
 80049d8:	d917      	bls.n	8004a0a <_malloc_r+0xc2>
 80049da:	1961      	adds	r1, r4, r5
 80049dc:	42a3      	cmp	r3, r4
 80049de:	6025      	str	r5, [r4, #0]
 80049e0:	bf18      	it	ne
 80049e2:	6059      	strne	r1, [r3, #4]
 80049e4:	6863      	ldr	r3, [r4, #4]
 80049e6:	bf08      	it	eq
 80049e8:	f8c8 1000 	streq.w	r1, [r8]
 80049ec:	5162      	str	r2, [r4, r5]
 80049ee:	604b      	str	r3, [r1, #4]
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 f82f 	bl	8004a54 <__malloc_unlock>
 80049f6:	f104 000b 	add.w	r0, r4, #11
 80049fa:	1d23      	adds	r3, r4, #4
 80049fc:	f020 0007 	bic.w	r0, r0, #7
 8004a00:	1ac2      	subs	r2, r0, r3
 8004a02:	bf1c      	itt	ne
 8004a04:	1a1b      	subne	r3, r3, r0
 8004a06:	50a3      	strne	r3, [r4, r2]
 8004a08:	e7af      	b.n	800496a <_malloc_r+0x22>
 8004a0a:	6862      	ldr	r2, [r4, #4]
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	bf0c      	ite	eq
 8004a10:	f8c8 2000 	streq.w	r2, [r8]
 8004a14:	605a      	strne	r2, [r3, #4]
 8004a16:	e7eb      	b.n	80049f0 <_malloc_r+0xa8>
 8004a18:	4623      	mov	r3, r4
 8004a1a:	6864      	ldr	r4, [r4, #4]
 8004a1c:	e7ae      	b.n	800497c <_malloc_r+0x34>
 8004a1e:	463c      	mov	r4, r7
 8004a20:	687f      	ldr	r7, [r7, #4]
 8004a22:	e7b6      	b.n	8004992 <_malloc_r+0x4a>
 8004a24:	461a      	mov	r2, r3
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d1fb      	bne.n	8004a24 <_malloc_r+0xdc>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6053      	str	r3, [r2, #4]
 8004a30:	e7de      	b.n	80049f0 <_malloc_r+0xa8>
 8004a32:	230c      	movs	r3, #12
 8004a34:	6033      	str	r3, [r6, #0]
 8004a36:	4630      	mov	r0, r6
 8004a38:	f000 f80c 	bl	8004a54 <__malloc_unlock>
 8004a3c:	e794      	b.n	8004968 <_malloc_r+0x20>
 8004a3e:	6005      	str	r5, [r0, #0]
 8004a40:	e7d6      	b.n	80049f0 <_malloc_r+0xa8>
 8004a42:	bf00      	nop
 8004a44:	200003cc 	.word	0x200003cc

08004a48 <__malloc_lock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	@ (8004a50 <__malloc_lock+0x8>)
 8004a4a:	f7ff b8b8 	b.w	8003bbe <__retarget_lock_acquire_recursive>
 8004a4e:	bf00      	nop
 8004a50:	200003c4 	.word	0x200003c4

08004a54 <__malloc_unlock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	@ (8004a5c <__malloc_unlock+0x8>)
 8004a56:	f7ff b8b3 	b.w	8003bc0 <__retarget_lock_release_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	200003c4 	.word	0x200003c4

08004a60 <_Balloc>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	69c6      	ldr	r6, [r0, #28]
 8004a64:	4604      	mov	r4, r0
 8004a66:	460d      	mov	r5, r1
 8004a68:	b976      	cbnz	r6, 8004a88 <_Balloc+0x28>
 8004a6a:	2010      	movs	r0, #16
 8004a6c:	f7ff ff42 	bl	80048f4 <malloc>
 8004a70:	4602      	mov	r2, r0
 8004a72:	61e0      	str	r0, [r4, #28]
 8004a74:	b920      	cbnz	r0, 8004a80 <_Balloc+0x20>
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <_Balloc+0x78>)
 8004a78:	4818      	ldr	r0, [pc, #96]	@ (8004adc <_Balloc+0x7c>)
 8004a7a:	216b      	movs	r1, #107	@ 0x6b
 8004a7c:	f000 fdae 	bl	80055dc <__assert_func>
 8004a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a84:	6006      	str	r6, [r0, #0]
 8004a86:	60c6      	str	r6, [r0, #12]
 8004a88:	69e6      	ldr	r6, [r4, #28]
 8004a8a:	68f3      	ldr	r3, [r6, #12]
 8004a8c:	b183      	cbz	r3, 8004ab0 <_Balloc+0x50>
 8004a8e:	69e3      	ldr	r3, [r4, #28]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a96:	b9b8      	cbnz	r0, 8004ac8 <_Balloc+0x68>
 8004a98:	2101      	movs	r1, #1
 8004a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8004a9e:	1d72      	adds	r2, r6, #5
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 fdb8 	bl	8005618 <_calloc_r>
 8004aa8:	b160      	cbz	r0, 8004ac4 <_Balloc+0x64>
 8004aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004aae:	e00e      	b.n	8004ace <_Balloc+0x6e>
 8004ab0:	2221      	movs	r2, #33	@ 0x21
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 fdaf 	bl	8005618 <_calloc_r>
 8004aba:	69e3      	ldr	r3, [r4, #28]
 8004abc:	60f0      	str	r0, [r6, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e4      	bne.n	8004a8e <_Balloc+0x2e>
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	6802      	ldr	r2, [r0, #0]
 8004aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ad4:	e7f7      	b.n	8004ac6 <_Balloc+0x66>
 8004ad6:	bf00      	nop
 8004ad8:	08005ce8 	.word	0x08005ce8
 8004adc:	08005d68 	.word	0x08005d68

08004ae0 <_Bfree>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	69c6      	ldr	r6, [r0, #28]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	b976      	cbnz	r6, 8004b08 <_Bfree+0x28>
 8004aea:	2010      	movs	r0, #16
 8004aec:	f7ff ff02 	bl	80048f4 <malloc>
 8004af0:	4602      	mov	r2, r0
 8004af2:	61e8      	str	r0, [r5, #28]
 8004af4:	b920      	cbnz	r0, 8004b00 <_Bfree+0x20>
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <_Bfree+0x3c>)
 8004af8:	4809      	ldr	r0, [pc, #36]	@ (8004b20 <_Bfree+0x40>)
 8004afa:	218f      	movs	r1, #143	@ 0x8f
 8004afc:	f000 fd6e 	bl	80055dc <__assert_func>
 8004b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b04:	6006      	str	r6, [r0, #0]
 8004b06:	60c6      	str	r6, [r0, #12]
 8004b08:	b13c      	cbz	r4, 8004b1a <_Bfree+0x3a>
 8004b0a:	69eb      	ldr	r3, [r5, #28]
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b14:	6021      	str	r1, [r4, #0]
 8004b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	08005ce8 	.word	0x08005ce8
 8004b20:	08005d68 	.word	0x08005d68

08004b24 <__multadd>:
 8004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	690d      	ldr	r5, [r1, #16]
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	461e      	mov	r6, r3
 8004b30:	f101 0c14 	add.w	ip, r1, #20
 8004b34:	2000      	movs	r0, #0
 8004b36:	f8dc 3000 	ldr.w	r3, [ip]
 8004b3a:	b299      	uxth	r1, r3
 8004b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8004b40:	0c1e      	lsrs	r6, r3, #16
 8004b42:	0c0b      	lsrs	r3, r1, #16
 8004b44:	fb02 3306 	mla	r3, r2, r6, r3
 8004b48:	b289      	uxth	r1, r1
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b50:	4285      	cmp	r5, r0
 8004b52:	f84c 1b04 	str.w	r1, [ip], #4
 8004b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b5a:	dcec      	bgt.n	8004b36 <__multadd+0x12>
 8004b5c:	b30e      	cbz	r6, 8004ba2 <__multadd+0x7e>
 8004b5e:	68a3      	ldr	r3, [r4, #8]
 8004b60:	42ab      	cmp	r3, r5
 8004b62:	dc19      	bgt.n	8004b98 <__multadd+0x74>
 8004b64:	6861      	ldr	r1, [r4, #4]
 8004b66:	4638      	mov	r0, r7
 8004b68:	3101      	adds	r1, #1
 8004b6a:	f7ff ff79 	bl	8004a60 <_Balloc>
 8004b6e:	4680      	mov	r8, r0
 8004b70:	b928      	cbnz	r0, 8004b7e <__multadd+0x5a>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <__multadd+0x84>)
 8004b76:	480d      	ldr	r0, [pc, #52]	@ (8004bac <__multadd+0x88>)
 8004b78:	21ba      	movs	r1, #186	@ 0xba
 8004b7a:	f000 fd2f 	bl	80055dc <__assert_func>
 8004b7e:	6922      	ldr	r2, [r4, #16]
 8004b80:	3202      	adds	r2, #2
 8004b82:	f104 010c 	add.w	r1, r4, #12
 8004b86:	0092      	lsls	r2, r2, #2
 8004b88:	300c      	adds	r0, #12
 8004b8a:	f000 fd19 	bl	80055c0 <memcpy>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ffa5 	bl	8004ae0 <_Bfree>
 8004b96:	4644      	mov	r4, r8
 8004b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	615e      	str	r6, [r3, #20]
 8004ba0:	6125      	str	r5, [r4, #16]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba8:	08005d57 	.word	0x08005d57
 8004bac:	08005d68 	.word	0x08005d68

08004bb0 <__hi0bits>:
 8004bb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	bf36      	itet	cc
 8004bb8:	0403      	lslcc	r3, r0, #16
 8004bba:	2000      	movcs	r0, #0
 8004bbc:	2010      	movcc	r0, #16
 8004bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc2:	bf3c      	itt	cc
 8004bc4:	021b      	lslcc	r3, r3, #8
 8004bc6:	3008      	addcc	r0, #8
 8004bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bcc:	bf3c      	itt	cc
 8004bce:	011b      	lslcc	r3, r3, #4
 8004bd0:	3004      	addcc	r0, #4
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd6:	bf3c      	itt	cc
 8004bd8:	009b      	lslcc	r3, r3, #2
 8004bda:	3002      	addcc	r0, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db05      	blt.n	8004bec <__hi0bits+0x3c>
 8004be0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004be4:	f100 0001 	add.w	r0, r0, #1
 8004be8:	bf08      	it	eq
 8004bea:	2020      	moveq	r0, #32
 8004bec:	4770      	bx	lr

08004bee <__lo0bits>:
 8004bee:	6803      	ldr	r3, [r0, #0]
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f013 0007 	ands.w	r0, r3, #7
 8004bf6:	d00b      	beq.n	8004c10 <__lo0bits+0x22>
 8004bf8:	07d9      	lsls	r1, r3, #31
 8004bfa:	d421      	bmi.n	8004c40 <__lo0bits+0x52>
 8004bfc:	0798      	lsls	r0, r3, #30
 8004bfe:	bf49      	itett	mi
 8004c00:	085b      	lsrmi	r3, r3, #1
 8004c02:	089b      	lsrpl	r3, r3, #2
 8004c04:	2001      	movmi	r0, #1
 8004c06:	6013      	strmi	r3, [r2, #0]
 8004c08:	bf5c      	itt	pl
 8004c0a:	6013      	strpl	r3, [r2, #0]
 8004c0c:	2002      	movpl	r0, #2
 8004c0e:	4770      	bx	lr
 8004c10:	b299      	uxth	r1, r3
 8004c12:	b909      	cbnz	r1, 8004c18 <__lo0bits+0x2a>
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	2010      	movs	r0, #16
 8004c18:	b2d9      	uxtb	r1, r3
 8004c1a:	b909      	cbnz	r1, 8004c20 <__lo0bits+0x32>
 8004c1c:	3008      	adds	r0, #8
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	0719      	lsls	r1, r3, #28
 8004c22:	bf04      	itt	eq
 8004c24:	091b      	lsreq	r3, r3, #4
 8004c26:	3004      	addeq	r0, #4
 8004c28:	0799      	lsls	r1, r3, #30
 8004c2a:	bf04      	itt	eq
 8004c2c:	089b      	lsreq	r3, r3, #2
 8004c2e:	3002      	addeq	r0, #2
 8004c30:	07d9      	lsls	r1, r3, #31
 8004c32:	d403      	bmi.n	8004c3c <__lo0bits+0x4e>
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	f100 0001 	add.w	r0, r0, #1
 8004c3a:	d003      	beq.n	8004c44 <__lo0bits+0x56>
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4770      	bx	lr
 8004c40:	2000      	movs	r0, #0
 8004c42:	4770      	bx	lr
 8004c44:	2020      	movs	r0, #32
 8004c46:	4770      	bx	lr

08004c48 <__i2b>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	f7ff ff07 	bl	8004a60 <_Balloc>
 8004c52:	4602      	mov	r2, r0
 8004c54:	b928      	cbnz	r0, 8004c62 <__i2b+0x1a>
 8004c56:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <__i2b+0x24>)
 8004c58:	4805      	ldr	r0, [pc, #20]	@ (8004c70 <__i2b+0x28>)
 8004c5a:	f240 1145 	movw	r1, #325	@ 0x145
 8004c5e:	f000 fcbd 	bl	80055dc <__assert_func>
 8004c62:	2301      	movs	r3, #1
 8004c64:	6144      	str	r4, [r0, #20]
 8004c66:	6103      	str	r3, [r0, #16]
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08005d57 	.word	0x08005d57
 8004c70:	08005d68 	.word	0x08005d68

08004c74 <__multiply>:
 8004c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c78:	4614      	mov	r4, r2
 8004c7a:	690a      	ldr	r2, [r1, #16]
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bfa8      	it	ge
 8004c82:	4623      	movge	r3, r4
 8004c84:	460f      	mov	r7, r1
 8004c86:	bfa4      	itt	ge
 8004c88:	460c      	movge	r4, r1
 8004c8a:	461f      	movge	r7, r3
 8004c8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004c90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004c94:	68a3      	ldr	r3, [r4, #8]
 8004c96:	6861      	ldr	r1, [r4, #4]
 8004c98:	eb0a 0609 	add.w	r6, sl, r9
 8004c9c:	42b3      	cmp	r3, r6
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	bfb8      	it	lt
 8004ca2:	3101      	addlt	r1, #1
 8004ca4:	f7ff fedc 	bl	8004a60 <_Balloc>
 8004ca8:	b930      	cbnz	r0, 8004cb8 <__multiply+0x44>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b44      	ldr	r3, [pc, #272]	@ (8004dc0 <__multiply+0x14c>)
 8004cae:	4845      	ldr	r0, [pc, #276]	@ (8004dc4 <__multiply+0x150>)
 8004cb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004cb4:	f000 fc92 	bl	80055dc <__assert_func>
 8004cb8:	f100 0514 	add.w	r5, r0, #20
 8004cbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4543      	cmp	r3, r8
 8004cc6:	d321      	bcc.n	8004d0c <__multiply+0x98>
 8004cc8:	f107 0114 	add.w	r1, r7, #20
 8004ccc:	f104 0214 	add.w	r2, r4, #20
 8004cd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004cd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004cd8:	9302      	str	r3, [sp, #8]
 8004cda:	1b13      	subs	r3, r2, r4
 8004cdc:	3b15      	subs	r3, #21
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	f104 0715 	add.w	r7, r4, #21
 8004ce8:	42ba      	cmp	r2, r7
 8004cea:	bf38      	it	cc
 8004cec:	2304      	movcc	r3, #4
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	9103      	str	r1, [sp, #12]
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	d80c      	bhi.n	8004d12 <__multiply+0x9e>
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	dd03      	ble.n	8004d04 <__multiply+0x90>
 8004cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05b      	beq.n	8004dbc <__multiply+0x148>
 8004d04:	6106      	str	r6, [r0, #16]
 8004d06:	b005      	add	sp, #20
 8004d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0c:	f843 2b04 	str.w	r2, [r3], #4
 8004d10:	e7d8      	b.n	8004cc4 <__multiply+0x50>
 8004d12:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d16:	f1ba 0f00 	cmp.w	sl, #0
 8004d1a:	d024      	beq.n	8004d66 <__multiply+0xf2>
 8004d1c:	f104 0e14 	add.w	lr, r4, #20
 8004d20:	46a9      	mov	r9, r5
 8004d22:	f04f 0c00 	mov.w	ip, #0
 8004d26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d2a:	f8d9 3000 	ldr.w	r3, [r9]
 8004d2e:	fa1f fb87 	uxth.w	fp, r7
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004d3c:	f8d9 7000 	ldr.w	r7, [r9]
 8004d40:	4463      	add	r3, ip
 8004d42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d46:	fb0a c70b 	mla	r7, sl, fp, ip
 8004d4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d54:	4572      	cmp	r2, lr
 8004d56:	f849 3b04 	str.w	r3, [r9], #4
 8004d5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d5e:	d8e2      	bhi.n	8004d26 <__multiply+0xb2>
 8004d60:	9b01      	ldr	r3, [sp, #4]
 8004d62:	f845 c003 	str.w	ip, [r5, r3]
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d6c:	3104      	adds	r1, #4
 8004d6e:	f1b9 0f00 	cmp.w	r9, #0
 8004d72:	d021      	beq.n	8004db8 <__multiply+0x144>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	f104 0c14 	add.w	ip, r4, #20
 8004d7a:	46ae      	mov	lr, r5
 8004d7c:	f04f 0a00 	mov.w	sl, #0
 8004d80:	f8bc b000 	ldrh.w	fp, [ip]
 8004d84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004d88:	fb09 770b 	mla	r7, r9, fp, r7
 8004d8c:	4457      	add	r7, sl
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d94:	f84e 3b04 	str.w	r3, [lr], #4
 8004d98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004da0:	f8be 3000 	ldrh.w	r3, [lr]
 8004da4:	fb09 330a 	mla	r3, r9, sl, r3
 8004da8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004dac:	4562      	cmp	r2, ip
 8004dae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004db2:	d8e5      	bhi.n	8004d80 <__multiply+0x10c>
 8004db4:	9f01      	ldr	r7, [sp, #4]
 8004db6:	51eb      	str	r3, [r5, r7]
 8004db8:	3504      	adds	r5, #4
 8004dba:	e799      	b.n	8004cf0 <__multiply+0x7c>
 8004dbc:	3e01      	subs	r6, #1
 8004dbe:	e79b      	b.n	8004cf8 <__multiply+0x84>
 8004dc0:	08005d57 	.word	0x08005d57
 8004dc4:	08005d68 	.word	0x08005d68

08004dc8 <__pow5mult>:
 8004dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dcc:	4615      	mov	r5, r2
 8004dce:	f012 0203 	ands.w	r2, r2, #3
 8004dd2:	4607      	mov	r7, r0
 8004dd4:	460e      	mov	r6, r1
 8004dd6:	d007      	beq.n	8004de8 <__pow5mult+0x20>
 8004dd8:	4c25      	ldr	r4, [pc, #148]	@ (8004e70 <__pow5mult+0xa8>)
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004de2:	f7ff fe9f 	bl	8004b24 <__multadd>
 8004de6:	4606      	mov	r6, r0
 8004de8:	10ad      	asrs	r5, r5, #2
 8004dea:	d03d      	beq.n	8004e68 <__pow5mult+0xa0>
 8004dec:	69fc      	ldr	r4, [r7, #28]
 8004dee:	b97c      	cbnz	r4, 8004e10 <__pow5mult+0x48>
 8004df0:	2010      	movs	r0, #16
 8004df2:	f7ff fd7f 	bl	80048f4 <malloc>
 8004df6:	4602      	mov	r2, r0
 8004df8:	61f8      	str	r0, [r7, #28]
 8004dfa:	b928      	cbnz	r0, 8004e08 <__pow5mult+0x40>
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <__pow5mult+0xac>)
 8004dfe:	481e      	ldr	r0, [pc, #120]	@ (8004e78 <__pow5mult+0xb0>)
 8004e00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e04:	f000 fbea 	bl	80055dc <__assert_func>
 8004e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e0c:	6004      	str	r4, [r0, #0]
 8004e0e:	60c4      	str	r4, [r0, #12]
 8004e10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e18:	b94c      	cbnz	r4, 8004e2e <__pow5mult+0x66>
 8004e1a:	f240 2171 	movw	r1, #625	@ 0x271
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f7ff ff12 	bl	8004c48 <__i2b>
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	6003      	str	r3, [r0, #0]
 8004e2e:	f04f 0900 	mov.w	r9, #0
 8004e32:	07eb      	lsls	r3, r5, #31
 8004e34:	d50a      	bpl.n	8004e4c <__pow5mult+0x84>
 8004e36:	4631      	mov	r1, r6
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7ff ff1a 	bl	8004c74 <__multiply>
 8004e40:	4631      	mov	r1, r6
 8004e42:	4680      	mov	r8, r0
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff fe4b 	bl	8004ae0 <_Bfree>
 8004e4a:	4646      	mov	r6, r8
 8004e4c:	106d      	asrs	r5, r5, #1
 8004e4e:	d00b      	beq.n	8004e68 <__pow5mult+0xa0>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	b938      	cbnz	r0, 8004e64 <__pow5mult+0x9c>
 8004e54:	4622      	mov	r2, r4
 8004e56:	4621      	mov	r1, r4
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f7ff ff0b 	bl	8004c74 <__multiply>
 8004e5e:	6020      	str	r0, [r4, #0]
 8004e60:	f8c0 9000 	str.w	r9, [r0]
 8004e64:	4604      	mov	r4, r0
 8004e66:	e7e4      	b.n	8004e32 <__pow5mult+0x6a>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e6e:	bf00      	nop
 8004e70:	08005dc4 	.word	0x08005dc4
 8004e74:	08005ce8 	.word	0x08005ce8
 8004e78:	08005d68 	.word	0x08005d68

08004e7c <__lshift>:
 8004e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e80:	460c      	mov	r4, r1
 8004e82:	6849      	ldr	r1, [r1, #4]
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4691      	mov	r9, r2
 8004e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e94:	f108 0601 	add.w	r6, r8, #1
 8004e98:	42b3      	cmp	r3, r6
 8004e9a:	db0b      	blt.n	8004eb4 <__lshift+0x38>
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f7ff fddf 	bl	8004a60 <_Balloc>
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	b948      	cbnz	r0, 8004eba <__lshift+0x3e>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	4b28      	ldr	r3, [pc, #160]	@ (8004f4c <__lshift+0xd0>)
 8004eaa:	4829      	ldr	r0, [pc, #164]	@ (8004f50 <__lshift+0xd4>)
 8004eac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004eb0:	f000 fb94 	bl	80055dc <__assert_func>
 8004eb4:	3101      	adds	r1, #1
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	e7ee      	b.n	8004e98 <__lshift+0x1c>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f100 0114 	add.w	r1, r0, #20
 8004ec0:	f100 0210 	add.w	r2, r0, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	4553      	cmp	r3, sl
 8004ec8:	db33      	blt.n	8004f32 <__lshift+0xb6>
 8004eca:	6920      	ldr	r0, [r4, #16]
 8004ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ed0:	f104 0314 	add.w	r3, r4, #20
 8004ed4:	f019 091f 	ands.w	r9, r9, #31
 8004ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004edc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ee0:	d02b      	beq.n	8004f3a <__lshift+0xbe>
 8004ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ee6:	468a      	mov	sl, r1
 8004ee8:	2200      	movs	r2, #0
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	fa00 f009 	lsl.w	r0, r0, r9
 8004ef0:	4310      	orrs	r0, r2
 8004ef2:	f84a 0b04 	str.w	r0, [sl], #4
 8004ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004efa:	459c      	cmp	ip, r3
 8004efc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f00:	d8f3      	bhi.n	8004eea <__lshift+0x6e>
 8004f02:	ebac 0304 	sub.w	r3, ip, r4
 8004f06:	3b15      	subs	r3, #21
 8004f08:	f023 0303 	bic.w	r3, r3, #3
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	f104 0015 	add.w	r0, r4, #21
 8004f12:	4584      	cmp	ip, r0
 8004f14:	bf38      	it	cc
 8004f16:	2304      	movcc	r3, #4
 8004f18:	50ca      	str	r2, [r1, r3]
 8004f1a:	b10a      	cbz	r2, 8004f20 <__lshift+0xa4>
 8004f1c:	f108 0602 	add.w	r6, r8, #2
 8004f20:	3e01      	subs	r6, #1
 8004f22:	4638      	mov	r0, r7
 8004f24:	612e      	str	r6, [r5, #16]
 8004f26:	4621      	mov	r1, r4
 8004f28:	f7ff fdda 	bl	8004ae0 <_Bfree>
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f32:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f36:	3301      	adds	r3, #1
 8004f38:	e7c5      	b.n	8004ec6 <__lshift+0x4a>
 8004f3a:	3904      	subs	r1, #4
 8004f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f40:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f44:	459c      	cmp	ip, r3
 8004f46:	d8f9      	bhi.n	8004f3c <__lshift+0xc0>
 8004f48:	e7ea      	b.n	8004f20 <__lshift+0xa4>
 8004f4a:	bf00      	nop
 8004f4c:	08005d57 	.word	0x08005d57
 8004f50:	08005d68 	.word	0x08005d68

08004f54 <__mcmp>:
 8004f54:	690a      	ldr	r2, [r1, #16]
 8004f56:	4603      	mov	r3, r0
 8004f58:	6900      	ldr	r0, [r0, #16]
 8004f5a:	1a80      	subs	r0, r0, r2
 8004f5c:	b530      	push	{r4, r5, lr}
 8004f5e:	d10e      	bne.n	8004f7e <__mcmp+0x2a>
 8004f60:	3314      	adds	r3, #20
 8004f62:	3114      	adds	r1, #20
 8004f64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f74:	4295      	cmp	r5, r2
 8004f76:	d003      	beq.n	8004f80 <__mcmp+0x2c>
 8004f78:	d205      	bcs.n	8004f86 <__mcmp+0x32>
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	bd30      	pop	{r4, r5, pc}
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d3f3      	bcc.n	8004f6c <__mcmp+0x18>
 8004f84:	e7fb      	b.n	8004f7e <__mcmp+0x2a>
 8004f86:	2001      	movs	r0, #1
 8004f88:	e7f9      	b.n	8004f7e <__mcmp+0x2a>
	...

08004f8c <__mdiff>:
 8004f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f90:	4689      	mov	r9, r1
 8004f92:	4606      	mov	r6, r0
 8004f94:	4611      	mov	r1, r2
 8004f96:	4648      	mov	r0, r9
 8004f98:	4614      	mov	r4, r2
 8004f9a:	f7ff ffdb 	bl	8004f54 <__mcmp>
 8004f9e:	1e05      	subs	r5, r0, #0
 8004fa0:	d112      	bne.n	8004fc8 <__mdiff+0x3c>
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7ff fd5b 	bl	8004a60 <_Balloc>
 8004faa:	4602      	mov	r2, r0
 8004fac:	b928      	cbnz	r0, 8004fba <__mdiff+0x2e>
 8004fae:	4b3f      	ldr	r3, [pc, #252]	@ (80050ac <__mdiff+0x120>)
 8004fb0:	f240 2137 	movw	r1, #567	@ 0x237
 8004fb4:	483e      	ldr	r0, [pc, #248]	@ (80050b0 <__mdiff+0x124>)
 8004fb6:	f000 fb11 	bl	80055dc <__assert_func>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	b003      	add	sp, #12
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	bfbc      	itt	lt
 8004fca:	464b      	movlt	r3, r9
 8004fcc:	46a1      	movlt	r9, r4
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004fd4:	bfba      	itte	lt
 8004fd6:	461c      	movlt	r4, r3
 8004fd8:	2501      	movlt	r5, #1
 8004fda:	2500      	movge	r5, #0
 8004fdc:	f7ff fd40 	bl	8004a60 <_Balloc>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	b918      	cbnz	r0, 8004fec <__mdiff+0x60>
 8004fe4:	4b31      	ldr	r3, [pc, #196]	@ (80050ac <__mdiff+0x120>)
 8004fe6:	f240 2145 	movw	r1, #581	@ 0x245
 8004fea:	e7e3      	b.n	8004fb4 <__mdiff+0x28>
 8004fec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ff0:	6926      	ldr	r6, [r4, #16]
 8004ff2:	60c5      	str	r5, [r0, #12]
 8004ff4:	f109 0310 	add.w	r3, r9, #16
 8004ff8:	f109 0514 	add.w	r5, r9, #20
 8004ffc:	f104 0e14 	add.w	lr, r4, #20
 8005000:	f100 0b14 	add.w	fp, r0, #20
 8005004:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005008:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	46d9      	mov	r9, fp
 8005010:	f04f 0c00 	mov.w	ip, #0
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	f85e 0b04 	ldr.w	r0, [lr], #4
 800501a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	fa1f f38a 	uxth.w	r3, sl
 8005024:	4619      	mov	r1, r3
 8005026:	b283      	uxth	r3, r0
 8005028:	1acb      	subs	r3, r1, r3
 800502a:	0c00      	lsrs	r0, r0, #16
 800502c:	4463      	add	r3, ip
 800502e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005032:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005036:	b29b      	uxth	r3, r3
 8005038:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800503c:	4576      	cmp	r6, lr
 800503e:	f849 3b04 	str.w	r3, [r9], #4
 8005042:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005046:	d8e5      	bhi.n	8005014 <__mdiff+0x88>
 8005048:	1b33      	subs	r3, r6, r4
 800504a:	3b15      	subs	r3, #21
 800504c:	f023 0303 	bic.w	r3, r3, #3
 8005050:	3415      	adds	r4, #21
 8005052:	3304      	adds	r3, #4
 8005054:	42a6      	cmp	r6, r4
 8005056:	bf38      	it	cc
 8005058:	2304      	movcc	r3, #4
 800505a:	441d      	add	r5, r3
 800505c:	445b      	add	r3, fp
 800505e:	461e      	mov	r6, r3
 8005060:	462c      	mov	r4, r5
 8005062:	4544      	cmp	r4, r8
 8005064:	d30e      	bcc.n	8005084 <__mdiff+0xf8>
 8005066:	f108 0103 	add.w	r1, r8, #3
 800506a:	1b49      	subs	r1, r1, r5
 800506c:	f021 0103 	bic.w	r1, r1, #3
 8005070:	3d03      	subs	r5, #3
 8005072:	45a8      	cmp	r8, r5
 8005074:	bf38      	it	cc
 8005076:	2100      	movcc	r1, #0
 8005078:	440b      	add	r3, r1
 800507a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800507e:	b191      	cbz	r1, 80050a6 <__mdiff+0x11a>
 8005080:	6117      	str	r7, [r2, #16]
 8005082:	e79d      	b.n	8004fc0 <__mdiff+0x34>
 8005084:	f854 1b04 	ldr.w	r1, [r4], #4
 8005088:	46e6      	mov	lr, ip
 800508a:	0c08      	lsrs	r0, r1, #16
 800508c:	fa1c fc81 	uxtah	ip, ip, r1
 8005090:	4471      	add	r1, lr
 8005092:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005096:	b289      	uxth	r1, r1
 8005098:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800509c:	f846 1b04 	str.w	r1, [r6], #4
 80050a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050a4:	e7dd      	b.n	8005062 <__mdiff+0xd6>
 80050a6:	3f01      	subs	r7, #1
 80050a8:	e7e7      	b.n	800507a <__mdiff+0xee>
 80050aa:	bf00      	nop
 80050ac:	08005d57 	.word	0x08005d57
 80050b0:	08005d68 	.word	0x08005d68

080050b4 <__d2b>:
 80050b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	460f      	mov	r7, r1
 80050ba:	2101      	movs	r1, #1
 80050bc:	ec59 8b10 	vmov	r8, r9, d0
 80050c0:	4616      	mov	r6, r2
 80050c2:	f7ff fccd 	bl	8004a60 <_Balloc>
 80050c6:	4604      	mov	r4, r0
 80050c8:	b930      	cbnz	r0, 80050d8 <__d2b+0x24>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b23      	ldr	r3, [pc, #140]	@ (800515c <__d2b+0xa8>)
 80050ce:	4824      	ldr	r0, [pc, #144]	@ (8005160 <__d2b+0xac>)
 80050d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80050d4:	f000 fa82 	bl	80055dc <__assert_func>
 80050d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050e0:	b10d      	cbz	r5, 80050e6 <__d2b+0x32>
 80050e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	f1b8 0300 	subs.w	r3, r8, #0
 80050ec:	d023      	beq.n	8005136 <__d2b+0x82>
 80050ee:	4668      	mov	r0, sp
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f7ff fd7c 	bl	8004bee <__lo0bits>
 80050f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050fa:	b1d0      	cbz	r0, 8005132 <__d2b+0x7e>
 80050fc:	f1c0 0320 	rsb	r3, r0, #32
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	430b      	orrs	r3, r1
 8005106:	40c2      	lsrs	r2, r0
 8005108:	6163      	str	r3, [r4, #20]
 800510a:	9201      	str	r2, [sp, #4]
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2201      	moveq	r2, #1
 8005116:	2202      	movne	r2, #2
 8005118:	6122      	str	r2, [r4, #16]
 800511a:	b1a5      	cbz	r5, 8005146 <__d2b+0x92>
 800511c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005120:	4405      	add	r5, r0
 8005122:	603d      	str	r5, [r7, #0]
 8005124:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	4620      	mov	r0, r4
 800512c:	b003      	add	sp, #12
 800512e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005132:	6161      	str	r1, [r4, #20]
 8005134:	e7ea      	b.n	800510c <__d2b+0x58>
 8005136:	a801      	add	r0, sp, #4
 8005138:	f7ff fd59 	bl	8004bee <__lo0bits>
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	6163      	str	r3, [r4, #20]
 8005140:	3020      	adds	r0, #32
 8005142:	2201      	movs	r2, #1
 8005144:	e7e8      	b.n	8005118 <__d2b+0x64>
 8005146:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800514a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800514e:	6038      	str	r0, [r7, #0]
 8005150:	6918      	ldr	r0, [r3, #16]
 8005152:	f7ff fd2d 	bl	8004bb0 <__hi0bits>
 8005156:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800515a:	e7e5      	b.n	8005128 <__d2b+0x74>
 800515c:	08005d57 	.word	0x08005d57
 8005160:	08005d68 	.word	0x08005d68

08005164 <__ssputs_r>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	688e      	ldr	r6, [r1, #8]
 800516a:	461f      	mov	r7, r3
 800516c:	42be      	cmp	r6, r7
 800516e:	680b      	ldr	r3, [r1, #0]
 8005170:	4682      	mov	sl, r0
 8005172:	460c      	mov	r4, r1
 8005174:	4690      	mov	r8, r2
 8005176:	d82d      	bhi.n	80051d4 <__ssputs_r+0x70>
 8005178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800517c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005180:	d026      	beq.n	80051d0 <__ssputs_r+0x6c>
 8005182:	6965      	ldr	r5, [r4, #20]
 8005184:	6909      	ldr	r1, [r1, #16]
 8005186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800518a:	eba3 0901 	sub.w	r9, r3, r1
 800518e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005192:	1c7b      	adds	r3, r7, #1
 8005194:	444b      	add	r3, r9
 8005196:	106d      	asrs	r5, r5, #1
 8005198:	429d      	cmp	r5, r3
 800519a:	bf38      	it	cc
 800519c:	461d      	movcc	r5, r3
 800519e:	0553      	lsls	r3, r2, #21
 80051a0:	d527      	bpl.n	80051f2 <__ssputs_r+0x8e>
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7ff fbd0 	bl	8004948 <_malloc_r>
 80051a8:	4606      	mov	r6, r0
 80051aa:	b360      	cbz	r0, 8005206 <__ssputs_r+0xa2>
 80051ac:	6921      	ldr	r1, [r4, #16]
 80051ae:	464a      	mov	r2, r9
 80051b0:	f000 fa06 	bl	80055c0 <memcpy>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	6126      	str	r6, [r4, #16]
 80051c2:	6165      	str	r5, [r4, #20]
 80051c4:	444e      	add	r6, r9
 80051c6:	eba5 0509 	sub.w	r5, r5, r9
 80051ca:	6026      	str	r6, [r4, #0]
 80051cc:	60a5      	str	r5, [r4, #8]
 80051ce:	463e      	mov	r6, r7
 80051d0:	42be      	cmp	r6, r7
 80051d2:	d900      	bls.n	80051d6 <__ssputs_r+0x72>
 80051d4:	463e      	mov	r6, r7
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	4632      	mov	r2, r6
 80051da:	4641      	mov	r1, r8
 80051dc:	f000 f9c6 	bl	800556c <memmove>
 80051e0:	68a3      	ldr	r3, [r4, #8]
 80051e2:	1b9b      	subs	r3, r3, r6
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	4433      	add	r3, r6
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	2000      	movs	r0, #0
 80051ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f2:	462a      	mov	r2, r5
 80051f4:	f000 fa36 	bl	8005664 <_realloc_r>
 80051f8:	4606      	mov	r6, r0
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1e0      	bne.n	80051c0 <__ssputs_r+0x5c>
 80051fe:	6921      	ldr	r1, [r4, #16]
 8005200:	4650      	mov	r0, sl
 8005202:	f7ff fb2d 	bl	8004860 <_free_r>
 8005206:	230c      	movs	r3, #12
 8005208:	f8ca 3000 	str.w	r3, [sl]
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	e7e9      	b.n	80051ee <__ssputs_r+0x8a>
	...

0800521c <_svfiprintf_r>:
 800521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	4698      	mov	r8, r3
 8005222:	898b      	ldrh	r3, [r1, #12]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	b09d      	sub	sp, #116	@ 0x74
 8005228:	4607      	mov	r7, r0
 800522a:	460d      	mov	r5, r1
 800522c:	4614      	mov	r4, r2
 800522e:	d510      	bpl.n	8005252 <_svfiprintf_r+0x36>
 8005230:	690b      	ldr	r3, [r1, #16]
 8005232:	b973      	cbnz	r3, 8005252 <_svfiprintf_r+0x36>
 8005234:	2140      	movs	r1, #64	@ 0x40
 8005236:	f7ff fb87 	bl	8004948 <_malloc_r>
 800523a:	6028      	str	r0, [r5, #0]
 800523c:	6128      	str	r0, [r5, #16]
 800523e:	b930      	cbnz	r0, 800524e <_svfiprintf_r+0x32>
 8005240:	230c      	movs	r3, #12
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	b01d      	add	sp, #116	@ 0x74
 800524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524e:	2340      	movs	r3, #64	@ 0x40
 8005250:	616b      	str	r3, [r5, #20]
 8005252:	2300      	movs	r3, #0
 8005254:	9309      	str	r3, [sp, #36]	@ 0x24
 8005256:	2320      	movs	r3, #32
 8005258:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800525c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005260:	2330      	movs	r3, #48	@ 0x30
 8005262:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005400 <_svfiprintf_r+0x1e4>
 8005266:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800526a:	f04f 0901 	mov.w	r9, #1
 800526e:	4623      	mov	r3, r4
 8005270:	469a      	mov	sl, r3
 8005272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005276:	b10a      	cbz	r2, 800527c <_svfiprintf_r+0x60>
 8005278:	2a25      	cmp	r2, #37	@ 0x25
 800527a:	d1f9      	bne.n	8005270 <_svfiprintf_r+0x54>
 800527c:	ebba 0b04 	subs.w	fp, sl, r4
 8005280:	d00b      	beq.n	800529a <_svfiprintf_r+0x7e>
 8005282:	465b      	mov	r3, fp
 8005284:	4622      	mov	r2, r4
 8005286:	4629      	mov	r1, r5
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff6b 	bl	8005164 <__ssputs_r>
 800528e:	3001      	adds	r0, #1
 8005290:	f000 80a7 	beq.w	80053e2 <_svfiprintf_r+0x1c6>
 8005294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005296:	445a      	add	r2, fp
 8005298:	9209      	str	r2, [sp, #36]	@ 0x24
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 809f 	beq.w	80053e2 <_svfiprintf_r+0x1c6>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ae:	f10a 0a01 	add.w	sl, sl, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	9307      	str	r3, [sp, #28]
 80052b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80052bc:	4654      	mov	r4, sl
 80052be:	2205      	movs	r2, #5
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	484e      	ldr	r0, [pc, #312]	@ (8005400 <_svfiprintf_r+0x1e4>)
 80052c6:	f7fa ff83 	bl	80001d0 <memchr>
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	b9d8      	cbnz	r0, 8005306 <_svfiprintf_r+0xea>
 80052ce:	06d0      	lsls	r0, r2, #27
 80052d0:	bf44      	itt	mi
 80052d2:	2320      	movmi	r3, #32
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052d8:	0711      	lsls	r1, r2, #28
 80052da:	bf44      	itt	mi
 80052dc:	232b      	movmi	r3, #43	@ 0x2b
 80052de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052e2:	f89a 3000 	ldrb.w	r3, [sl]
 80052e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e8:	d015      	beq.n	8005316 <_svfiprintf_r+0xfa>
 80052ea:	9a07      	ldr	r2, [sp, #28]
 80052ec:	4654      	mov	r4, sl
 80052ee:	2000      	movs	r0, #0
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4621      	mov	r1, r4
 80052f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fa:	3b30      	subs	r3, #48	@ 0x30
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	d94b      	bls.n	8005398 <_svfiprintf_r+0x17c>
 8005300:	b1b0      	cbz	r0, 8005330 <_svfiprintf_r+0x114>
 8005302:	9207      	str	r2, [sp, #28]
 8005304:	e014      	b.n	8005330 <_svfiprintf_r+0x114>
 8005306:	eba0 0308 	sub.w	r3, r0, r8
 800530a:	fa09 f303 	lsl.w	r3, r9, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	46a2      	mov	sl, r4
 8005314:	e7d2      	b.n	80052bc <_svfiprintf_r+0xa0>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	9103      	str	r1, [sp, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfbb      	ittet	lt
 8005322:	425b      	neglt	r3, r3
 8005324:	f042 0202 	orrlt.w	r2, r2, #2
 8005328:	9307      	strge	r3, [sp, #28]
 800532a:	9307      	strlt	r3, [sp, #28]
 800532c:	bfb8      	it	lt
 800532e:	9204      	strlt	r2, [sp, #16]
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	2b2e      	cmp	r3, #46	@ 0x2e
 8005334:	d10a      	bne.n	800534c <_svfiprintf_r+0x130>
 8005336:	7863      	ldrb	r3, [r4, #1]
 8005338:	2b2a      	cmp	r3, #42	@ 0x2a
 800533a:	d132      	bne.n	80053a2 <_svfiprintf_r+0x186>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	9203      	str	r2, [sp, #12]
 8005344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005348:	3402      	adds	r4, #2
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005410 <_svfiprintf_r+0x1f4>
 8005350:	7821      	ldrb	r1, [r4, #0]
 8005352:	2203      	movs	r2, #3
 8005354:	4650      	mov	r0, sl
 8005356:	f7fa ff3b 	bl	80001d0 <memchr>
 800535a:	b138      	cbz	r0, 800536c <_svfiprintf_r+0x150>
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	eba0 000a 	sub.w	r0, r0, sl
 8005362:	2240      	movs	r2, #64	@ 0x40
 8005364:	4082      	lsls	r2, r0
 8005366:	4313      	orrs	r3, r2
 8005368:	3401      	adds	r4, #1
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005370:	4824      	ldr	r0, [pc, #144]	@ (8005404 <_svfiprintf_r+0x1e8>)
 8005372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005376:	2206      	movs	r2, #6
 8005378:	f7fa ff2a 	bl	80001d0 <memchr>
 800537c:	2800      	cmp	r0, #0
 800537e:	d036      	beq.n	80053ee <_svfiprintf_r+0x1d2>
 8005380:	4b21      	ldr	r3, [pc, #132]	@ (8005408 <_svfiprintf_r+0x1ec>)
 8005382:	bb1b      	cbnz	r3, 80053cc <_svfiprintf_r+0x1b0>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	3307      	adds	r3, #7
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	3308      	adds	r3, #8
 800538e:	9303      	str	r3, [sp, #12]
 8005390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005392:	4433      	add	r3, r6
 8005394:	9309      	str	r3, [sp, #36]	@ 0x24
 8005396:	e76a      	b.n	800526e <_svfiprintf_r+0x52>
 8005398:	fb0c 3202 	mla	r2, ip, r2, r3
 800539c:	460c      	mov	r4, r1
 800539e:	2001      	movs	r0, #1
 80053a0:	e7a8      	b.n	80052f4 <_svfiprintf_r+0xd8>
 80053a2:	2300      	movs	r3, #0
 80053a4:	3401      	adds	r4, #1
 80053a6:	9305      	str	r3, [sp, #20]
 80053a8:	4619      	mov	r1, r3
 80053aa:	f04f 0c0a 	mov.w	ip, #10
 80053ae:	4620      	mov	r0, r4
 80053b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b4:	3a30      	subs	r2, #48	@ 0x30
 80053b6:	2a09      	cmp	r2, #9
 80053b8:	d903      	bls.n	80053c2 <_svfiprintf_r+0x1a6>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0c6      	beq.n	800534c <_svfiprintf_r+0x130>
 80053be:	9105      	str	r1, [sp, #20]
 80053c0:	e7c4      	b.n	800534c <_svfiprintf_r+0x130>
 80053c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c6:	4604      	mov	r4, r0
 80053c8:	2301      	movs	r3, #1
 80053ca:	e7f0      	b.n	80053ae <_svfiprintf_r+0x192>
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	462a      	mov	r2, r5
 80053d2:	4b0e      	ldr	r3, [pc, #56]	@ (800540c <_svfiprintf_r+0x1f0>)
 80053d4:	a904      	add	r1, sp, #16
 80053d6:	4638      	mov	r0, r7
 80053d8:	f7fd fe82 	bl	80030e0 <_printf_float>
 80053dc:	1c42      	adds	r2, r0, #1
 80053de:	4606      	mov	r6, r0
 80053e0:	d1d6      	bne.n	8005390 <_svfiprintf_r+0x174>
 80053e2:	89ab      	ldrh	r3, [r5, #12]
 80053e4:	065b      	lsls	r3, r3, #25
 80053e6:	f53f af2d 	bmi.w	8005244 <_svfiprintf_r+0x28>
 80053ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053ec:	e72c      	b.n	8005248 <_svfiprintf_r+0x2c>
 80053ee:	ab03      	add	r3, sp, #12
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	462a      	mov	r2, r5
 80053f4:	4b05      	ldr	r3, [pc, #20]	@ (800540c <_svfiprintf_r+0x1f0>)
 80053f6:	a904      	add	r1, sp, #16
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7fe f909 	bl	8003610 <_printf_i>
 80053fe:	e7ed      	b.n	80053dc <_svfiprintf_r+0x1c0>
 8005400:	08005ec0 	.word	0x08005ec0
 8005404:	08005eca 	.word	0x08005eca
 8005408:	080030e1 	.word	0x080030e1
 800540c:	08005165 	.word	0x08005165
 8005410:	08005ec6 	.word	0x08005ec6

08005414 <__sflush_r>:
 8005414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541c:	0716      	lsls	r6, r2, #28
 800541e:	4605      	mov	r5, r0
 8005420:	460c      	mov	r4, r1
 8005422:	d454      	bmi.n	80054ce <__sflush_r+0xba>
 8005424:	684b      	ldr	r3, [r1, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	dc02      	bgt.n	8005430 <__sflush_r+0x1c>
 800542a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	dd48      	ble.n	80054c2 <__sflush_r+0xae>
 8005430:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005432:	2e00      	cmp	r6, #0
 8005434:	d045      	beq.n	80054c2 <__sflush_r+0xae>
 8005436:	2300      	movs	r3, #0
 8005438:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800543c:	682f      	ldr	r7, [r5, #0]
 800543e:	6a21      	ldr	r1, [r4, #32]
 8005440:	602b      	str	r3, [r5, #0]
 8005442:	d030      	beq.n	80054a6 <__sflush_r+0x92>
 8005444:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	0759      	lsls	r1, r3, #29
 800544a:	d505      	bpl.n	8005458 <__sflush_r+0x44>
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005452:	b10b      	cbz	r3, 8005458 <__sflush_r+0x44>
 8005454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	2300      	movs	r3, #0
 800545a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	4628      	mov	r0, r5
 8005460:	47b0      	blx	r6
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	d106      	bne.n	8005476 <__sflush_r+0x62>
 8005468:	6829      	ldr	r1, [r5, #0]
 800546a:	291d      	cmp	r1, #29
 800546c:	d82b      	bhi.n	80054c6 <__sflush_r+0xb2>
 800546e:	4a2a      	ldr	r2, [pc, #168]	@ (8005518 <__sflush_r+0x104>)
 8005470:	410a      	asrs	r2, r1
 8005472:	07d6      	lsls	r6, r2, #31
 8005474:	d427      	bmi.n	80054c6 <__sflush_r+0xb2>
 8005476:	2200      	movs	r2, #0
 8005478:	6062      	str	r2, [r4, #4]
 800547a:	04d9      	lsls	r1, r3, #19
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	6022      	str	r2, [r4, #0]
 8005480:	d504      	bpl.n	800548c <__sflush_r+0x78>
 8005482:	1c42      	adds	r2, r0, #1
 8005484:	d101      	bne.n	800548a <__sflush_r+0x76>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	b903      	cbnz	r3, 800548c <__sflush_r+0x78>
 800548a:	6560      	str	r0, [r4, #84]	@ 0x54
 800548c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800548e:	602f      	str	r7, [r5, #0]
 8005490:	b1b9      	cbz	r1, 80054c2 <__sflush_r+0xae>
 8005492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005496:	4299      	cmp	r1, r3
 8005498:	d002      	beq.n	80054a0 <__sflush_r+0x8c>
 800549a:	4628      	mov	r0, r5
 800549c:	f7ff f9e0 	bl	8004860 <_free_r>
 80054a0:	2300      	movs	r3, #0
 80054a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80054a4:	e00d      	b.n	80054c2 <__sflush_r+0xae>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b0      	blx	r6
 80054ac:	4602      	mov	r2, r0
 80054ae:	1c50      	adds	r0, r2, #1
 80054b0:	d1c9      	bne.n	8005446 <__sflush_r+0x32>
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0c6      	beq.n	8005446 <__sflush_r+0x32>
 80054b8:	2b1d      	cmp	r3, #29
 80054ba:	d001      	beq.n	80054c0 <__sflush_r+0xac>
 80054bc:	2b16      	cmp	r3, #22
 80054be:	d11e      	bne.n	80054fe <__sflush_r+0xea>
 80054c0:	602f      	str	r7, [r5, #0]
 80054c2:	2000      	movs	r0, #0
 80054c4:	e022      	b.n	800550c <__sflush_r+0xf8>
 80054c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	e01b      	b.n	8005506 <__sflush_r+0xf2>
 80054ce:	690f      	ldr	r7, [r1, #16]
 80054d0:	2f00      	cmp	r7, #0
 80054d2:	d0f6      	beq.n	80054c2 <__sflush_r+0xae>
 80054d4:	0793      	lsls	r3, r2, #30
 80054d6:	680e      	ldr	r6, [r1, #0]
 80054d8:	bf08      	it	eq
 80054da:	694b      	ldreq	r3, [r1, #20]
 80054dc:	600f      	str	r7, [r1, #0]
 80054de:	bf18      	it	ne
 80054e0:	2300      	movne	r3, #0
 80054e2:	eba6 0807 	sub.w	r8, r6, r7
 80054e6:	608b      	str	r3, [r1, #8]
 80054e8:	f1b8 0f00 	cmp.w	r8, #0
 80054ec:	dde9      	ble.n	80054c2 <__sflush_r+0xae>
 80054ee:	6a21      	ldr	r1, [r4, #32]
 80054f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054f2:	4643      	mov	r3, r8
 80054f4:	463a      	mov	r2, r7
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b0      	blx	r6
 80054fa:	2800      	cmp	r0, #0
 80054fc:	dc08      	bgt.n	8005510 <__sflush_r+0xfc>
 80054fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	4407      	add	r7, r0
 8005512:	eba8 0800 	sub.w	r8, r8, r0
 8005516:	e7e7      	b.n	80054e8 <__sflush_r+0xd4>
 8005518:	dfbffffe 	.word	0xdfbffffe

0800551c <_fflush_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b913      	cbnz	r3, 800552c <_fflush_r+0x10>
 8005526:	2500      	movs	r5, #0
 8005528:	4628      	mov	r0, r5
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	b118      	cbz	r0, 8005536 <_fflush_r+0x1a>
 800552e:	6a03      	ldr	r3, [r0, #32]
 8005530:	b90b      	cbnz	r3, 8005536 <_fflush_r+0x1a>
 8005532:	f7fe fa19 	bl	8003968 <__sinit>
 8005536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f3      	beq.n	8005526 <_fflush_r+0xa>
 800553e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005540:	07d0      	lsls	r0, r2, #31
 8005542:	d404      	bmi.n	800554e <_fflush_r+0x32>
 8005544:	0599      	lsls	r1, r3, #22
 8005546:	d402      	bmi.n	800554e <_fflush_r+0x32>
 8005548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800554a:	f7fe fb38 	bl	8003bbe <__retarget_lock_acquire_recursive>
 800554e:	4628      	mov	r0, r5
 8005550:	4621      	mov	r1, r4
 8005552:	f7ff ff5f 	bl	8005414 <__sflush_r>
 8005556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005558:	07da      	lsls	r2, r3, #31
 800555a:	4605      	mov	r5, r0
 800555c:	d4e4      	bmi.n	8005528 <_fflush_r+0xc>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	059b      	lsls	r3, r3, #22
 8005562:	d4e1      	bmi.n	8005528 <_fflush_r+0xc>
 8005564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005566:	f7fe fb2b 	bl	8003bc0 <__retarget_lock_release_recursive>
 800556a:	e7dd      	b.n	8005528 <_fflush_r+0xc>

0800556c <memmove>:
 800556c:	4288      	cmp	r0, r1
 800556e:	b510      	push	{r4, lr}
 8005570:	eb01 0402 	add.w	r4, r1, r2
 8005574:	d902      	bls.n	800557c <memmove+0x10>
 8005576:	4284      	cmp	r4, r0
 8005578:	4623      	mov	r3, r4
 800557a:	d807      	bhi.n	800558c <memmove+0x20>
 800557c:	1e43      	subs	r3, r0, #1
 800557e:	42a1      	cmp	r1, r4
 8005580:	d008      	beq.n	8005594 <memmove+0x28>
 8005582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800558a:	e7f8      	b.n	800557e <memmove+0x12>
 800558c:	4402      	add	r2, r0
 800558e:	4601      	mov	r1, r0
 8005590:	428a      	cmp	r2, r1
 8005592:	d100      	bne.n	8005596 <memmove+0x2a>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800559a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800559e:	e7f7      	b.n	8005590 <memmove+0x24>

080055a0 <_sbrk_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	@ (80055bc <_sbrk_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fc fa18 	bl	80019e0 <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_sbrk_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_sbrk_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	200003c0 	.word	0x200003c0

080055c0 <memcpy>:
 80055c0:	440a      	add	r2, r1
 80055c2:	4291      	cmp	r1, r2
 80055c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c8:	d100      	bne.n	80055cc <memcpy+0xc>
 80055ca:	4770      	bx	lr
 80055cc:	b510      	push	{r4, lr}
 80055ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d6:	4291      	cmp	r1, r2
 80055d8:	d1f9      	bne.n	80055ce <memcpy+0xe>
 80055da:	bd10      	pop	{r4, pc}

080055dc <__assert_func>:
 80055dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055de:	4614      	mov	r4, r2
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b09      	ldr	r3, [pc, #36]	@ (8005608 <__assert_func+0x2c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4605      	mov	r5, r0
 80055e8:	68d8      	ldr	r0, [r3, #12]
 80055ea:	b954      	cbnz	r4, 8005602 <__assert_func+0x26>
 80055ec:	4b07      	ldr	r3, [pc, #28]	@ (800560c <__assert_func+0x30>)
 80055ee:	461c      	mov	r4, r3
 80055f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055f4:	9100      	str	r1, [sp, #0]
 80055f6:	462b      	mov	r3, r5
 80055f8:	4905      	ldr	r1, [pc, #20]	@ (8005610 <__assert_func+0x34>)
 80055fa:	f000 f86f 	bl	80056dc <fiprintf>
 80055fe:	f000 f87f 	bl	8005700 <abort>
 8005602:	4b04      	ldr	r3, [pc, #16]	@ (8005614 <__assert_func+0x38>)
 8005604:	e7f4      	b.n	80055f0 <__assert_func+0x14>
 8005606:	bf00      	nop
 8005608:	20000010 	.word	0x20000010
 800560c:	08005f16 	.word	0x08005f16
 8005610:	08005ee8 	.word	0x08005ee8
 8005614:	08005edb 	.word	0x08005edb

08005618 <_calloc_r>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	fba1 5402 	umull	r5, r4, r1, r2
 800561e:	b93c      	cbnz	r4, 8005630 <_calloc_r+0x18>
 8005620:	4629      	mov	r1, r5
 8005622:	f7ff f991 	bl	8004948 <_malloc_r>
 8005626:	4606      	mov	r6, r0
 8005628:	b928      	cbnz	r0, 8005636 <_calloc_r+0x1e>
 800562a:	2600      	movs	r6, #0
 800562c:	4630      	mov	r0, r6
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	220c      	movs	r2, #12
 8005632:	6002      	str	r2, [r0, #0]
 8005634:	e7f9      	b.n	800562a <_calloc_r+0x12>
 8005636:	462a      	mov	r2, r5
 8005638:	4621      	mov	r1, r4
 800563a:	f7fe fa42 	bl	8003ac2 <memset>
 800563e:	e7f5      	b.n	800562c <_calloc_r+0x14>

08005640 <__ascii_mbtowc>:
 8005640:	b082      	sub	sp, #8
 8005642:	b901      	cbnz	r1, 8005646 <__ascii_mbtowc+0x6>
 8005644:	a901      	add	r1, sp, #4
 8005646:	b142      	cbz	r2, 800565a <__ascii_mbtowc+0x1a>
 8005648:	b14b      	cbz	r3, 800565e <__ascii_mbtowc+0x1e>
 800564a:	7813      	ldrb	r3, [r2, #0]
 800564c:	600b      	str	r3, [r1, #0]
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	1e10      	subs	r0, r2, #0
 8005652:	bf18      	it	ne
 8005654:	2001      	movne	r0, #1
 8005656:	b002      	add	sp, #8
 8005658:	4770      	bx	lr
 800565a:	4610      	mov	r0, r2
 800565c:	e7fb      	b.n	8005656 <__ascii_mbtowc+0x16>
 800565e:	f06f 0001 	mvn.w	r0, #1
 8005662:	e7f8      	b.n	8005656 <__ascii_mbtowc+0x16>

08005664 <_realloc_r>:
 8005664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	4680      	mov	r8, r0
 800566a:	4615      	mov	r5, r2
 800566c:	460c      	mov	r4, r1
 800566e:	b921      	cbnz	r1, 800567a <_realloc_r+0x16>
 8005670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	4611      	mov	r1, r2
 8005676:	f7ff b967 	b.w	8004948 <_malloc_r>
 800567a:	b92a      	cbnz	r2, 8005688 <_realloc_r+0x24>
 800567c:	f7ff f8f0 	bl	8004860 <_free_r>
 8005680:	2400      	movs	r4, #0
 8005682:	4620      	mov	r0, r4
 8005684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005688:	f000 f841 	bl	800570e <_malloc_usable_size_r>
 800568c:	4285      	cmp	r5, r0
 800568e:	4606      	mov	r6, r0
 8005690:	d802      	bhi.n	8005698 <_realloc_r+0x34>
 8005692:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005696:	d8f4      	bhi.n	8005682 <_realloc_r+0x1e>
 8005698:	4629      	mov	r1, r5
 800569a:	4640      	mov	r0, r8
 800569c:	f7ff f954 	bl	8004948 <_malloc_r>
 80056a0:	4607      	mov	r7, r0
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d0ec      	beq.n	8005680 <_realloc_r+0x1c>
 80056a6:	42b5      	cmp	r5, r6
 80056a8:	462a      	mov	r2, r5
 80056aa:	4621      	mov	r1, r4
 80056ac:	bf28      	it	cs
 80056ae:	4632      	movcs	r2, r6
 80056b0:	f7ff ff86 	bl	80055c0 <memcpy>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff f8d2 	bl	8004860 <_free_r>
 80056bc:	463c      	mov	r4, r7
 80056be:	e7e0      	b.n	8005682 <_realloc_r+0x1e>

080056c0 <__ascii_wctomb>:
 80056c0:	4603      	mov	r3, r0
 80056c2:	4608      	mov	r0, r1
 80056c4:	b141      	cbz	r1, 80056d8 <__ascii_wctomb+0x18>
 80056c6:	2aff      	cmp	r2, #255	@ 0xff
 80056c8:	d904      	bls.n	80056d4 <__ascii_wctomb+0x14>
 80056ca:	228a      	movs	r2, #138	@ 0x8a
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	4770      	bx	lr
 80056d4:	700a      	strb	r2, [r1, #0]
 80056d6:	2001      	movs	r0, #1
 80056d8:	4770      	bx	lr
	...

080056dc <fiprintf>:
 80056dc:	b40e      	push	{r1, r2, r3}
 80056de:	b503      	push	{r0, r1, lr}
 80056e0:	4601      	mov	r1, r0
 80056e2:	ab03      	add	r3, sp, #12
 80056e4:	4805      	ldr	r0, [pc, #20]	@ (80056fc <fiprintf+0x20>)
 80056e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	f000 f83f 	bl	8005770 <_vfiprintf_r>
 80056f2:	b002      	add	sp, #8
 80056f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056f8:	b003      	add	sp, #12
 80056fa:	4770      	bx	lr
 80056fc:	20000010 	.word	0x20000010

08005700 <abort>:
 8005700:	b508      	push	{r3, lr}
 8005702:	2006      	movs	r0, #6
 8005704:	f000 fa08 	bl	8005b18 <raise>
 8005708:	2001      	movs	r0, #1
 800570a:	f7fc f8f1 	bl	80018f0 <_exit>

0800570e <_malloc_usable_size_r>:
 800570e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005712:	1f18      	subs	r0, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfbc      	itt	lt
 8005718:	580b      	ldrlt	r3, [r1, r0]
 800571a:	18c0      	addlt	r0, r0, r3
 800571c:	4770      	bx	lr

0800571e <__sfputc_r>:
 800571e:	6893      	ldr	r3, [r2, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	b410      	push	{r4}
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	da08      	bge.n	800573c <__sfputc_r+0x1e>
 800572a:	6994      	ldr	r4, [r2, #24]
 800572c:	42a3      	cmp	r3, r4
 800572e:	db01      	blt.n	8005734 <__sfputc_r+0x16>
 8005730:	290a      	cmp	r1, #10
 8005732:	d103      	bne.n	800573c <__sfputc_r+0x1e>
 8005734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005738:	f000 b932 	b.w	80059a0 <__swbuf_r>
 800573c:	6813      	ldr	r3, [r2, #0]
 800573e:	1c58      	adds	r0, r3, #1
 8005740:	6010      	str	r0, [r2, #0]
 8005742:	7019      	strb	r1, [r3, #0]
 8005744:	4608      	mov	r0, r1
 8005746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800574a:	4770      	bx	lr

0800574c <__sfputs_r>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	4614      	mov	r4, r2
 8005754:	18d5      	adds	r5, r2, r3
 8005756:	42ac      	cmp	r4, r5
 8005758:	d101      	bne.n	800575e <__sfputs_r+0x12>
 800575a:	2000      	movs	r0, #0
 800575c:	e007      	b.n	800576e <__sfputs_r+0x22>
 800575e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005762:	463a      	mov	r2, r7
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffda 	bl	800571e <__sfputc_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	d1f3      	bne.n	8005756 <__sfputs_r+0xa>
 800576e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005770 <_vfiprintf_r>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	460d      	mov	r5, r1
 8005776:	b09d      	sub	sp, #116	@ 0x74
 8005778:	4614      	mov	r4, r2
 800577a:	4698      	mov	r8, r3
 800577c:	4606      	mov	r6, r0
 800577e:	b118      	cbz	r0, 8005788 <_vfiprintf_r+0x18>
 8005780:	6a03      	ldr	r3, [r0, #32]
 8005782:	b90b      	cbnz	r3, 8005788 <_vfiprintf_r+0x18>
 8005784:	f7fe f8f0 	bl	8003968 <__sinit>
 8005788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800578a:	07d9      	lsls	r1, r3, #31
 800578c:	d405      	bmi.n	800579a <_vfiprintf_r+0x2a>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	059a      	lsls	r2, r3, #22
 8005792:	d402      	bmi.n	800579a <_vfiprintf_r+0x2a>
 8005794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005796:	f7fe fa12 	bl	8003bbe <__retarget_lock_acquire_recursive>
 800579a:	89ab      	ldrh	r3, [r5, #12]
 800579c:	071b      	lsls	r3, r3, #28
 800579e:	d501      	bpl.n	80057a4 <_vfiprintf_r+0x34>
 80057a0:	692b      	ldr	r3, [r5, #16]
 80057a2:	b99b      	cbnz	r3, 80057cc <_vfiprintf_r+0x5c>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 f938 	bl	8005a1c <__swsetup_r>
 80057ac:	b170      	cbz	r0, 80057cc <_vfiprintf_r+0x5c>
 80057ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057b0:	07dc      	lsls	r4, r3, #31
 80057b2:	d504      	bpl.n	80057be <_vfiprintf_r+0x4e>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	b01d      	add	sp, #116	@ 0x74
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	0598      	lsls	r0, r3, #22
 80057c2:	d4f7      	bmi.n	80057b4 <_vfiprintf_r+0x44>
 80057c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057c6:	f7fe f9fb 	bl	8003bc0 <__retarget_lock_release_recursive>
 80057ca:	e7f3      	b.n	80057b4 <_vfiprintf_r+0x44>
 80057cc:	2300      	movs	r3, #0
 80057ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d0:	2320      	movs	r3, #32
 80057d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80057da:	2330      	movs	r3, #48	@ 0x30
 80057dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800598c <_vfiprintf_r+0x21c>
 80057e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057e4:	f04f 0901 	mov.w	r9, #1
 80057e8:	4623      	mov	r3, r4
 80057ea:	469a      	mov	sl, r3
 80057ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f0:	b10a      	cbz	r2, 80057f6 <_vfiprintf_r+0x86>
 80057f2:	2a25      	cmp	r2, #37	@ 0x25
 80057f4:	d1f9      	bne.n	80057ea <_vfiprintf_r+0x7a>
 80057f6:	ebba 0b04 	subs.w	fp, sl, r4
 80057fa:	d00b      	beq.n	8005814 <_vfiprintf_r+0xa4>
 80057fc:	465b      	mov	r3, fp
 80057fe:	4622      	mov	r2, r4
 8005800:	4629      	mov	r1, r5
 8005802:	4630      	mov	r0, r6
 8005804:	f7ff ffa2 	bl	800574c <__sfputs_r>
 8005808:	3001      	adds	r0, #1
 800580a:	f000 80a7 	beq.w	800595c <_vfiprintf_r+0x1ec>
 800580e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005810:	445a      	add	r2, fp
 8005812:	9209      	str	r2, [sp, #36]	@ 0x24
 8005814:	f89a 3000 	ldrb.w	r3, [sl]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 809f 	beq.w	800595c <_vfiprintf_r+0x1ec>
 800581e:	2300      	movs	r3, #0
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005828:	f10a 0a01 	add.w	sl, sl, #1
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005834:	931a      	str	r3, [sp, #104]	@ 0x68
 8005836:	4654      	mov	r4, sl
 8005838:	2205      	movs	r2, #5
 800583a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583e:	4853      	ldr	r0, [pc, #332]	@ (800598c <_vfiprintf_r+0x21c>)
 8005840:	f7fa fcc6 	bl	80001d0 <memchr>
 8005844:	9a04      	ldr	r2, [sp, #16]
 8005846:	b9d8      	cbnz	r0, 8005880 <_vfiprintf_r+0x110>
 8005848:	06d1      	lsls	r1, r2, #27
 800584a:	bf44      	itt	mi
 800584c:	2320      	movmi	r3, #32
 800584e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005852:	0713      	lsls	r3, r2, #28
 8005854:	bf44      	itt	mi
 8005856:	232b      	movmi	r3, #43	@ 0x2b
 8005858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800585c:	f89a 3000 	ldrb.w	r3, [sl]
 8005860:	2b2a      	cmp	r3, #42	@ 0x2a
 8005862:	d015      	beq.n	8005890 <_vfiprintf_r+0x120>
 8005864:	9a07      	ldr	r2, [sp, #28]
 8005866:	4654      	mov	r4, sl
 8005868:	2000      	movs	r0, #0
 800586a:	f04f 0c0a 	mov.w	ip, #10
 800586e:	4621      	mov	r1, r4
 8005870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005874:	3b30      	subs	r3, #48	@ 0x30
 8005876:	2b09      	cmp	r3, #9
 8005878:	d94b      	bls.n	8005912 <_vfiprintf_r+0x1a2>
 800587a:	b1b0      	cbz	r0, 80058aa <_vfiprintf_r+0x13a>
 800587c:	9207      	str	r2, [sp, #28]
 800587e:	e014      	b.n	80058aa <_vfiprintf_r+0x13a>
 8005880:	eba0 0308 	sub.w	r3, r0, r8
 8005884:	fa09 f303 	lsl.w	r3, r9, r3
 8005888:	4313      	orrs	r3, r2
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	46a2      	mov	sl, r4
 800588e:	e7d2      	b.n	8005836 <_vfiprintf_r+0xc6>
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	1d19      	adds	r1, r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	9103      	str	r1, [sp, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	bfbb      	ittet	lt
 800589c:	425b      	neglt	r3, r3
 800589e:	f042 0202 	orrlt.w	r2, r2, #2
 80058a2:	9307      	strge	r3, [sp, #28]
 80058a4:	9307      	strlt	r3, [sp, #28]
 80058a6:	bfb8      	it	lt
 80058a8:	9204      	strlt	r2, [sp, #16]
 80058aa:	7823      	ldrb	r3, [r4, #0]
 80058ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80058ae:	d10a      	bne.n	80058c6 <_vfiprintf_r+0x156>
 80058b0:	7863      	ldrb	r3, [r4, #1]
 80058b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80058b4:	d132      	bne.n	800591c <_vfiprintf_r+0x1ac>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	1d1a      	adds	r2, r3, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	9203      	str	r2, [sp, #12]
 80058be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058c2:	3402      	adds	r4, #2
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800599c <_vfiprintf_r+0x22c>
 80058ca:	7821      	ldrb	r1, [r4, #0]
 80058cc:	2203      	movs	r2, #3
 80058ce:	4650      	mov	r0, sl
 80058d0:	f7fa fc7e 	bl	80001d0 <memchr>
 80058d4:	b138      	cbz	r0, 80058e6 <_vfiprintf_r+0x176>
 80058d6:	9b04      	ldr	r3, [sp, #16]
 80058d8:	eba0 000a 	sub.w	r0, r0, sl
 80058dc:	2240      	movs	r2, #64	@ 0x40
 80058de:	4082      	lsls	r2, r0
 80058e0:	4313      	orrs	r3, r2
 80058e2:	3401      	adds	r4, #1
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ea:	4829      	ldr	r0, [pc, #164]	@ (8005990 <_vfiprintf_r+0x220>)
 80058ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058f0:	2206      	movs	r2, #6
 80058f2:	f7fa fc6d 	bl	80001d0 <memchr>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d03f      	beq.n	800597a <_vfiprintf_r+0x20a>
 80058fa:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <_vfiprintf_r+0x224>)
 80058fc:	bb1b      	cbnz	r3, 8005946 <_vfiprintf_r+0x1d6>
 80058fe:	9b03      	ldr	r3, [sp, #12]
 8005900:	3307      	adds	r3, #7
 8005902:	f023 0307 	bic.w	r3, r3, #7
 8005906:	3308      	adds	r3, #8
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590c:	443b      	add	r3, r7
 800590e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005910:	e76a      	b.n	80057e8 <_vfiprintf_r+0x78>
 8005912:	fb0c 3202 	mla	r2, ip, r2, r3
 8005916:	460c      	mov	r4, r1
 8005918:	2001      	movs	r0, #1
 800591a:	e7a8      	b.n	800586e <_vfiprintf_r+0xfe>
 800591c:	2300      	movs	r3, #0
 800591e:	3401      	adds	r4, #1
 8005920:	9305      	str	r3, [sp, #20]
 8005922:	4619      	mov	r1, r3
 8005924:	f04f 0c0a 	mov.w	ip, #10
 8005928:	4620      	mov	r0, r4
 800592a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800592e:	3a30      	subs	r2, #48	@ 0x30
 8005930:	2a09      	cmp	r2, #9
 8005932:	d903      	bls.n	800593c <_vfiprintf_r+0x1cc>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0c6      	beq.n	80058c6 <_vfiprintf_r+0x156>
 8005938:	9105      	str	r1, [sp, #20]
 800593a:	e7c4      	b.n	80058c6 <_vfiprintf_r+0x156>
 800593c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005940:	4604      	mov	r4, r0
 8005942:	2301      	movs	r3, #1
 8005944:	e7f0      	b.n	8005928 <_vfiprintf_r+0x1b8>
 8005946:	ab03      	add	r3, sp, #12
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	462a      	mov	r2, r5
 800594c:	4b12      	ldr	r3, [pc, #72]	@ (8005998 <_vfiprintf_r+0x228>)
 800594e:	a904      	add	r1, sp, #16
 8005950:	4630      	mov	r0, r6
 8005952:	f7fd fbc5 	bl	80030e0 <_printf_float>
 8005956:	4607      	mov	r7, r0
 8005958:	1c78      	adds	r0, r7, #1
 800595a:	d1d6      	bne.n	800590a <_vfiprintf_r+0x19a>
 800595c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800595e:	07d9      	lsls	r1, r3, #31
 8005960:	d405      	bmi.n	800596e <_vfiprintf_r+0x1fe>
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	059a      	lsls	r2, r3, #22
 8005966:	d402      	bmi.n	800596e <_vfiprintf_r+0x1fe>
 8005968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800596a:	f7fe f929 	bl	8003bc0 <__retarget_lock_release_recursive>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	065b      	lsls	r3, r3, #25
 8005972:	f53f af1f 	bmi.w	80057b4 <_vfiprintf_r+0x44>
 8005976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005978:	e71e      	b.n	80057b8 <_vfiprintf_r+0x48>
 800597a:	ab03      	add	r3, sp, #12
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	462a      	mov	r2, r5
 8005980:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <_vfiprintf_r+0x228>)
 8005982:	a904      	add	r1, sp, #16
 8005984:	4630      	mov	r0, r6
 8005986:	f7fd fe43 	bl	8003610 <_printf_i>
 800598a:	e7e4      	b.n	8005956 <_vfiprintf_r+0x1e6>
 800598c:	08005ec0 	.word	0x08005ec0
 8005990:	08005eca 	.word	0x08005eca
 8005994:	080030e1 	.word	0x080030e1
 8005998:	0800574d 	.word	0x0800574d
 800599c:	08005ec6 	.word	0x08005ec6

080059a0 <__swbuf_r>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	460e      	mov	r6, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	4605      	mov	r5, r0
 80059a8:	b118      	cbz	r0, 80059b2 <__swbuf_r+0x12>
 80059aa:	6a03      	ldr	r3, [r0, #32]
 80059ac:	b90b      	cbnz	r3, 80059b2 <__swbuf_r+0x12>
 80059ae:	f7fd ffdb 	bl	8003968 <__sinit>
 80059b2:	69a3      	ldr	r3, [r4, #24]
 80059b4:	60a3      	str	r3, [r4, #8]
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	071a      	lsls	r2, r3, #28
 80059ba:	d501      	bpl.n	80059c0 <__swbuf_r+0x20>
 80059bc:	6923      	ldr	r3, [r4, #16]
 80059be:	b943      	cbnz	r3, 80059d2 <__swbuf_r+0x32>
 80059c0:	4621      	mov	r1, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 f82a 	bl	8005a1c <__swsetup_r>
 80059c8:	b118      	cbz	r0, 80059d2 <__swbuf_r+0x32>
 80059ca:	f04f 37ff 	mov.w	r7, #4294967295
 80059ce:	4638      	mov	r0, r7
 80059d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	1a98      	subs	r0, r3, r2
 80059d8:	6963      	ldr	r3, [r4, #20]
 80059da:	b2f6      	uxtb	r6, r6
 80059dc:	4283      	cmp	r3, r0
 80059de:	4637      	mov	r7, r6
 80059e0:	dc05      	bgt.n	80059ee <__swbuf_r+0x4e>
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f7ff fd99 	bl	800551c <_fflush_r>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d1ed      	bne.n	80059ca <__swbuf_r+0x2a>
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	701e      	strb	r6, [r3, #0]
 80059fc:	6962      	ldr	r2, [r4, #20]
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d004      	beq.n	8005a0e <__swbuf_r+0x6e>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	07db      	lsls	r3, r3, #31
 8005a08:	d5e1      	bpl.n	80059ce <__swbuf_r+0x2e>
 8005a0a:	2e0a      	cmp	r6, #10
 8005a0c:	d1df      	bne.n	80059ce <__swbuf_r+0x2e>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7ff fd83 	bl	800551c <_fflush_r>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d0d9      	beq.n	80059ce <__swbuf_r+0x2e>
 8005a1a:	e7d6      	b.n	80059ca <__swbuf_r+0x2a>

08005a1c <__swsetup_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4b29      	ldr	r3, [pc, #164]	@ (8005ac4 <__swsetup_r+0xa8>)
 8005a20:	4605      	mov	r5, r0
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	460c      	mov	r4, r1
 8005a26:	b118      	cbz	r0, 8005a30 <__swsetup_r+0x14>
 8005a28:	6a03      	ldr	r3, [r0, #32]
 8005a2a:	b90b      	cbnz	r3, 8005a30 <__swsetup_r+0x14>
 8005a2c:	f7fd ff9c 	bl	8003968 <__sinit>
 8005a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a34:	0719      	lsls	r1, r3, #28
 8005a36:	d422      	bmi.n	8005a7e <__swsetup_r+0x62>
 8005a38:	06da      	lsls	r2, r3, #27
 8005a3a:	d407      	bmi.n	8005a4c <__swsetup_r+0x30>
 8005a3c:	2209      	movs	r2, #9
 8005a3e:	602a      	str	r2, [r5, #0]
 8005a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4a:	e033      	b.n	8005ab4 <__swsetup_r+0x98>
 8005a4c:	0758      	lsls	r0, r3, #29
 8005a4e:	d512      	bpl.n	8005a76 <__swsetup_r+0x5a>
 8005a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a52:	b141      	cbz	r1, 8005a66 <__swsetup_r+0x4a>
 8005a54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	d002      	beq.n	8005a62 <__swsetup_r+0x46>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f7fe feff 	bl	8004860 <_free_r>
 8005a62:	2300      	movs	r3, #0
 8005a64:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6063      	str	r3, [r4, #4]
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	f043 0308 	orr.w	r3, r3, #8
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	b94b      	cbnz	r3, 8005a96 <__swsetup_r+0x7a>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8c:	d003      	beq.n	8005a96 <__swsetup_r+0x7a>
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 f883 	bl	8005b9c <__smakebuf_r>
 8005a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9a:	f013 0201 	ands.w	r2, r3, #1
 8005a9e:	d00a      	beq.n	8005ab6 <__swsetup_r+0x9a>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	60a2      	str	r2, [r4, #8]
 8005aa4:	6962      	ldr	r2, [r4, #20]
 8005aa6:	4252      	negs	r2, r2
 8005aa8:	61a2      	str	r2, [r4, #24]
 8005aaa:	6922      	ldr	r2, [r4, #16]
 8005aac:	b942      	cbnz	r2, 8005ac0 <__swsetup_r+0xa4>
 8005aae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ab2:	d1c5      	bne.n	8005a40 <__swsetup_r+0x24>
 8005ab4:	bd38      	pop	{r3, r4, r5, pc}
 8005ab6:	0799      	lsls	r1, r3, #30
 8005ab8:	bf58      	it	pl
 8005aba:	6962      	ldrpl	r2, [r4, #20]
 8005abc:	60a2      	str	r2, [r4, #8]
 8005abe:	e7f4      	b.n	8005aaa <__swsetup_r+0x8e>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e7f7      	b.n	8005ab4 <__swsetup_r+0x98>
 8005ac4:	20000010 	.word	0x20000010

08005ac8 <_raise_r>:
 8005ac8:	291f      	cmp	r1, #31
 8005aca:	b538      	push	{r3, r4, r5, lr}
 8005acc:	4605      	mov	r5, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	d904      	bls.n	8005adc <_raise_r+0x14>
 8005ad2:	2316      	movs	r3, #22
 8005ad4:	6003      	str	r3, [r0, #0]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ade:	b112      	cbz	r2, 8005ae6 <_raise_r+0x1e>
 8005ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ae4:	b94b      	cbnz	r3, 8005afa <_raise_r+0x32>
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 f830 	bl	8005b4c <_getpid_r>
 8005aec:	4622      	mov	r2, r4
 8005aee:	4601      	mov	r1, r0
 8005af0:	4628      	mov	r0, r5
 8005af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005af6:	f000 b817 	b.w	8005b28 <_kill_r>
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d00a      	beq.n	8005b14 <_raise_r+0x4c>
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	d103      	bne.n	8005b0a <_raise_r+0x42>
 8005b02:	2316      	movs	r3, #22
 8005b04:	6003      	str	r3, [r0, #0]
 8005b06:	2001      	movs	r0, #1
 8005b08:	e7e7      	b.n	8005ada <_raise_r+0x12>
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005b10:	4620      	mov	r0, r4
 8005b12:	4798      	blx	r3
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7e0      	b.n	8005ada <_raise_r+0x12>

08005b18 <raise>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	@ (8005b24 <raise+0xc>)
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	f7ff bfd3 	b.w	8005ac8 <_raise_r>
 8005b22:	bf00      	nop
 8005b24:	20000010 	.word	0x20000010

08005b28 <_kill_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d07      	ldr	r5, [pc, #28]	@ (8005b48 <_kill_r+0x20>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	f7fb fecb 	bl	80018d0 <_kill>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d102      	bne.n	8005b44 <_kill_r+0x1c>
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	b103      	cbz	r3, 8005b44 <_kill_r+0x1c>
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	bf00      	nop
 8005b48:	200003c0 	.word	0x200003c0

08005b4c <_getpid_r>:
 8005b4c:	f7fb beb8 	b.w	80018c0 <_getpid>

08005b50 <__swhatbuf_r>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	460c      	mov	r4, r1
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	b096      	sub	sp, #88	@ 0x58
 8005b5c:	4615      	mov	r5, r2
 8005b5e:	461e      	mov	r6, r3
 8005b60:	da0d      	bge.n	8005b7e <__swhatbuf_r+0x2e>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	bf14      	ite	ne
 8005b6e:	2340      	movne	r3, #64	@ 0x40
 8005b70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b74:	2000      	movs	r0, #0
 8005b76:	6031      	str	r1, [r6, #0]
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	b016      	add	sp, #88	@ 0x58
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	466a      	mov	r2, sp
 8005b80:	f000 f848 	bl	8005c14 <_fstat_r>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	dbec      	blt.n	8005b62 <__swhatbuf_r+0x12>
 8005b88:	9901      	ldr	r1, [sp, #4]
 8005b8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b92:	4259      	negs	r1, r3
 8005b94:	4159      	adcs	r1, r3
 8005b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b9a:	e7eb      	b.n	8005b74 <__swhatbuf_r+0x24>

08005b9c <__smakebuf_r>:
 8005b9c:	898b      	ldrh	r3, [r1, #12]
 8005b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba0:	079d      	lsls	r5, r3, #30
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	d507      	bpl.n	8005bb8 <__smakebuf_r+0x1c>
 8005ba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	6163      	str	r3, [r4, #20]
 8005bb4:	b003      	add	sp, #12
 8005bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb8:	ab01      	add	r3, sp, #4
 8005bba:	466a      	mov	r2, sp
 8005bbc:	f7ff ffc8 	bl	8005b50 <__swhatbuf_r>
 8005bc0:	9f00      	ldr	r7, [sp, #0]
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7fe febe 	bl	8004948 <_malloc_r>
 8005bcc:	b948      	cbnz	r0, 8005be2 <__smakebuf_r+0x46>
 8005bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd2:	059a      	lsls	r2, r3, #22
 8005bd4:	d4ee      	bmi.n	8005bb4 <__smakebuf_r+0x18>
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	e7e2      	b.n	8005ba8 <__smakebuf_r+0xc>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	6020      	str	r0, [r4, #0]
 8005be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bf2:	b15b      	cbz	r3, 8005c0c <__smakebuf_r+0x70>
 8005bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 f81d 	bl	8005c38 <_isatty_r>
 8005bfe:	b128      	cbz	r0, 8005c0c <__smakebuf_r+0x70>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	431d      	orrs	r5, r3
 8005c10:	81a5      	strh	r5, [r4, #12]
 8005c12:	e7cf      	b.n	8005bb4 <__smakebuf_r+0x18>

08005c14 <_fstat_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	@ (8005c34 <_fstat_r+0x20>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	f7fb feb5 	bl	8001990 <_fstat>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d102      	bne.n	8005c30 <_fstat_r+0x1c>
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	b103      	cbz	r3, 8005c30 <_fstat_r+0x1c>
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	bd38      	pop	{r3, r4, r5, pc}
 8005c32:	bf00      	nop
 8005c34:	200003c0 	.word	0x200003c0

08005c38 <_isatty_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d06      	ldr	r5, [pc, #24]	@ (8005c54 <_isatty_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fb feb4 	bl	80019b0 <_isatty>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_isatty_r+0x1a>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_isatty_r+0x1a>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	200003c0 	.word	0x200003c0

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
